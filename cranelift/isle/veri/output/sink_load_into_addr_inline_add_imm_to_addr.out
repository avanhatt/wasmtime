inline term: add_imm_to_addr
inline term: sink_load_into_addr
expansions = 3
expansion {
	term = sink_load_into_addr
	rules = [
		../../codegen/src/isa/aarch64/inst.isle line 3220
		../../codegen/src/isa/aarch64/inst.isle line 3227
	]
	bindings = [
		0: Type	argument(0)
		1: Inst	argument(1)
		5: InstructionData	extractor(inst_data, 1)
		6: Opcode	match_variant(5, InstructionData::Load, opcode)
		7: Unit	constructor(sink_inst, [1], 1)
		8: Value	match_variant(5, InstructionData::Load, arg)
		9: Reg	constructor(put_in_reg, [8], 2)
		10: Offset32	match_variant(5, InstructionData::Load, offset)
		11: i32	extractor(offset32, 10)
		12: i64	constructor(i32_as_i64, [11], 0)
		13: u64	constructor(i64_as_u64, [12], 0)
		17: Type	const_prim(I64)
		18: ImmExtend	make_variant(ImmExtend::Zero, [])
		19: Reg	constructor(imm, [17, 18, 13], 1)
		20: Reg	constructor(add, [17, 9, 19], 2)
	]
	constraints = [
		5:	variant(InstructionData::Load)
		6:	variant(Opcode::Load)
	]
	result = 20
	feasible = true
}
expansion {
	term = sink_load_into_addr
	rules = [
		../../codegen/src/isa/aarch64/inst.isle line 3220
		../../codegen/src/isa/aarch64/inst.isle line 3226
	]
	bindings = [
		0: Type	argument(0)
		1: Inst	argument(1)
		5: InstructionData	extractor(inst_data, 1)
		6: Opcode	match_variant(5, InstructionData::Load, opcode)
		7: Unit	constructor(sink_inst, [1], 1)
		8: Value	match_variant(5, InstructionData::Load, arg)
		9: Reg	constructor(put_in_reg, [8], 2)
		10: Offset32	match_variant(5, InstructionData::Load, offset)
		11: i32	extractor(offset32, 10)
		12: i64	constructor(i32_as_i64, [11], 0)
		13: u64	constructor(i64_as_u64, [12], 0)
		17: Option(Imm12)	extractor(imm12_from_u64, 13)
		18: Type	const_prim(I64)
		19: Imm12	match_some(17)
		20: Reg	constructor(add_imm, [18, 9, 19], 1)
	]
	constraints = [
		5:	variant(InstructionData::Load)
		6:	variant(Opcode::Load)
		17:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = sink_load_into_addr
	rules = [
		../../codegen/src/isa/aarch64/inst.isle line 3220
		../../codegen/src/isa/aarch64/inst.isle line 3225
	]
	bindings = [
		0: Type	argument(0)
		1: Inst	argument(1)
		5: InstructionData	extractor(inst_data, 1)
		6: Opcode	match_variant(5, InstructionData::Load, opcode)
		7: Unit	constructor(sink_inst, [1], 1)
		8: Value	match_variant(5, InstructionData::Load, arg)
		9: Reg	constructor(put_in_reg, [8], 2)
		10: Offset32	match_variant(5, InstructionData::Load, offset)
		11: i32	extractor(offset32, 10)
		12: i64	constructor(i32_as_i64, [11], 0)
		13: u64	constructor(i64_as_u64, [12], 0)
	]
	constraints = [
		5:	variant(InstructionData::Load)
		6:	variant(Opcode::Load)
		13:	const_int(0)
	]
	result = 9
	feasible = true
}

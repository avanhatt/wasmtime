inline term: to_amode_add
inline term: amode_imm_reg_reg_shift
inline term: lower
expansions = 580
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4809
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(nop, 0)
		4: Reg	constructor(invalid_reg, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4781
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(uunarrow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option(Value)	extractor(fcvt_to_uint_sat, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: Value	match_tuple(4, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option(Constant)	extractor(vconst, 13)
		15: Constant	match_some(14)
		16: Option(u128)	extractor(u128_from_constant, 15)
		17: u128	match_some(16)
		18: Xmm	constructor(put_in_xmm, [9], 1)
		19: Type	const_prim(F64X2)
		20: Xmm	constructor(xmm_zero, [19], 2)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 3)
		22: Xmm	constructor(x64_maxpd, [18, 21], 4)
		23: u128	const_int(87645970972029204748118407510518398976, u128)
		24: VCodeConstant	constructor(emit_u128_le_const, [23], 5)
		25: XmmMem	constructor(const_to_xmm_mem, [24], 6)
		26: Xmm	constructor(x64_minpd, [22, 25], 7)
		27: Reg	constructor(xmm_to_reg, [26], 8)
		28: XmmMem	constructor(xmm_to_reg_mem, [27], 9)
		29: RegMem	constructor(xmm_mem_to_reg_mem, [28], 0)
		30: RoundImm	make_variant(RoundImm::RoundZero, [])
		31: Xmm	constructor(x64_round, [19, 29, 30], 10)
		32: u128	const_int(89307505966799035215565906462008934400, u128)
		33: VCodeConstant	constructor(emit_u128_le_const, [32], 11)
		34: XmmMem	constructor(const_to_xmm_mem, [33], 12)
		35: Xmm	constructor(x64_addpd, [31, 34], 13)
		36: XmmMem	constructor(xmm_to_xmm_mem, [20], 14)
		37: u8	const_int(136, u8)
		38: Xmm	constructor(x64_shufps, [35, 36, 37], 15)
		39: InstOutput	constructor(output_xmm, [38], 16)
		40: Option(InstOutput)	some(39)
		41: Option(Option(InstOutput))	some(40)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(F64X2)
		12:	some
		14:	some
		16:	some
		17:	const_int(0)
	]
	result = 41
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4763
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value))	extractor(x86_pmulhrsw, 0)
		5: (Value, Value)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(5, 1)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 2)
		11: Xmm	constructor(x64_pmulhrsw, [8, 10], 3)
		12: InstOutput	constructor(output_xmm, [11], 4)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I16X8)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4737
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(sqmul_round_sat, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Xmm	constructor(put_in_xmm, [5], 1)
		8: Value	match_tuple(4, 1)
		9: Xmm	constructor(put_in_xmm, [8], 2)
		10: XmmMem	constructor(xmm_to_xmm_mem, [9], 3)
		11: Xmm	constructor(x64_pmullw, [7, 10], 4)
		12: XmmMem	constructor(xmm_to_xmm_mem, [9], 5)
		13: Xmm	constructor(x64_pmulhw, [7, 12], 6)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 7)
		15: Xmm	constructor(x64_punpcklwd, [11, 14], 8)
		16: XmmMem	constructor(xmm_to_xmm_mem, [13], 9)
		17: Xmm	constructor(x64_punpckhwd, [11, 16], 10)
		18: u128	const_int(1298074214935938362106650120175616, u128)
		19: VCodeConstant	constructor(emit_u128_le_const, [18], 11)
		20: XmmMem	constructor(const_to_xmm_mem, [19], 12)
		21: Xmm	constructor(x64_movdqu_load, [20], 13)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 14)
		23: Xmm	constructor(x64_paddd, [15, 22], 15)
		24: XmmMem	constructor(xmm_to_xmm_mem, [21], 16)
		25: Xmm	constructor(x64_paddd, [17, 24], 17)
		26: u32	const_int(15, u32)
		27: XmmMemImm	constructor(xmi_imm, [26], 18)
		28: Xmm	constructor(x64_psrad, [23, 27], 19)
		29: XmmMemImm	constructor(xmi_imm, [26], 20)
		30: Xmm	constructor(x64_psrad, [25, 29], 21)
		31: XmmMem	constructor(xmm_to_xmm_mem, [30], 22)
		32: Xmm	constructor(x64_packssdw, [28, 31], 23)
		33: InstOutput	constructor(output_xmm, [32], 24)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		6:	const_prim(I16X8)
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4721
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value))	extractor(sqmul_round_sat, 0)
		5: (Value, Value)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(5, 1)
		10: Xmm	constructor(put_in_xmm, [9], 2)
		11: u128	const_int(-170138587272425278588607549579869519872, u128)
		12: VCodeConstant	constructor(emit_u128_le_const, [11], 3)
		13: XmmMem	constructor(const_to_xmm_mem, [12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [10], 5)
		15: Xmm	constructor(x64_pmulhrsw, [8, 14], 6)
		16: Xmm	constructor(x64_pcmpeqw, [15, 13], 7)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 8)
		18: Xmm	constructor(x64_pxor, [15, 17], 9)
		19: InstOutput	constructor(output_xmm, [18], 10)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I16X8)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4716
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: TlsModel	extractor(tls_model, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(GlobalValue)	extractor(tls_value, 7)
		9: GlobalValue	match_some(8)
		10: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 9)
		11: (ExternalName, RelocDistance, i64)	match_some(10)
		12: ExternalName	match_tuple(11, 0)
		13: Gpr	constructor(coff_tls_get_addr, [12], 1)
		14: InstOutput	constructor(output_gpr, [13], 2)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	variant(TlsModel::Coff)
		8:	some
		10:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4713
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: TlsModel	extractor(tls_model, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(GlobalValue)	extractor(tls_value, 7)
		9: GlobalValue	match_some(8)
		10: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 9)
		11: (ExternalName, RelocDistance, i64)	match_some(10)
		12: ExternalName	match_tuple(11, 0)
		13: Gpr	constructor(macho_tls_get_addr, [12], 1)
		14: InstOutput	constructor(output_gpr, [13], 2)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	variant(TlsModel::Macho)
		8:	some
		10:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4710
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: TlsModel	extractor(tls_model, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(GlobalValue)	extractor(tls_value, 7)
		9: GlobalValue	match_some(8)
		10: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 9)
		11: (ExternalName, RelocDistance, i64)	match_some(10)
		12: ExternalName	match_tuple(11, 0)
		13: Gpr	constructor(elf_tls_get_addr, [12], 1)
		14: InstOutput	constructor(output_gpr, [13], 2)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	variant(TlsModel::ElfGd)
		8:	some
		10:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4702
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(isplit, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: ValueRegs	constructor(put_in_regs, [4], 1)
		7: usize	const_int(0, usize)
		8: Reg	constructor(value_regs_get, [6, 7], 2)
		9: usize	const_int(1, usize)
		10: Reg	constructor(value_regs_get, [6, 9], 3)
		11: ValueRegs	constructor(value_reg, [8], 4)
		12: ValueRegs	constructor(value_reg, [10], 5)
		13: InstOutput	constructor(output_pair, [11, 12], 6)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4697
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(iconcat, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Reg	constructor(put_in_reg, [5], 1)
		8: Value	match_tuple(4, 1)
		9: Reg	constructor(put_in_reg, [8], 2)
		10: ValueRegs	constructor(value_regs, [7, 9], 3)
		11: InstOutput	constructor(output, [10], 4)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I64)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4689
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Xmm	constructor(put_in_xmm, [4], 1)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_packsswb, [10, 11], 3)
		13: OperandSize	make_variant(OperandSize::Size32, [])
		14: Gpr	constructor(x64_pmovmskb, [13, 12], 4)
		15: u8	const_int(8, u8)
		16: Imm8Reg	make_variant(Imm8Reg::Imm8, [15])
		17: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [16], 5)
		18: Type	const_prim(I64)
		19: Gpr	constructor(x64_shr, [18, 14, 17], 6)
		20: InstOutput	constructor(output_gpr, [19], 7)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4680
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Xmm	constructor(put_in_xmm, [4], 1)
		11: OperandSize	make_variant(OperandSize::Size32, [])
		12: Gpr	constructor(x64_movmskpd, [11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4677
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Xmm	constructor(put_in_xmm, [4], 1)
		11: OperandSize	make_variant(OperandSize::Size32, [])
		12: Gpr	constructor(x64_movmskps, [11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4674
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Xmm	constructor(put_in_xmm, [4], 1)
		11: OperandSize	make_variant(OperandSize::Size32, [])
		12: Gpr	constructor(x64_pmovmskb, [11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4657
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vall_true, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Type	constructor(vec_int_type, [5], 1)
		7: Xmm	constructor(put_in_xmm, [4], 2)
		8: Xmm	constructor(xmm_zero, [5], 3)
		9: XmmMem	constructor(xmm_to_xmm_mem, [8], 4)
		10: Xmm	constructor(x64_pcmpeq, [6, 7, 9], 5)
		11: OperandSize	make_variant(OperandSize::Size32, [])
		12: Gpr	constructor(x64_pmovmskb, [11, 10], 6)
		13: GprMemImm	constructor(gpr_to_gpr_mem_imm, [12], 7)
		14: ProducesFlags	constructor(x64_test, [11, 12, 13], 8)
		15: CC	make_variant(CC::Z, [])
		16: ConsumesFlags	constructor(x64_setcc, [15], 9)
		17: ValueRegs	constructor(with_flags, [14, 16], 10)
		18: InstOutput	constructor(output, [17], 11)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4647
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option(Value)	extractor(vall_true, 0)
		5: Value	match_some(4)
		6: Xmm	constructor(put_in_xmm, [5], 1)
		7: Type	extractor(value_type, 5)
		8: Xmm	constructor(xmm_zero, [7], 2)
		9: Type	constructor(vec_int_type, [7], 3)
		10: XmmMem	constructor(xmm_to_xmm_mem, [8], 4)
		11: Xmm	constructor(x64_pcmpeq, [9, 6, 10], 5)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 6)
		13: ProducesFlags	constructor(x64_ptest, [11, 12], 7)
		14: CC	make_variant(CC::Z, [])
		15: ConsumesFlags	constructor(x64_setcc, [14], 8)
		16: ValueRegs	constructor(with_flags, [13, 15], 9)
		17: InstOutput	constructor(output, [16], 10)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4637
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vany_true, 0)
		4: Value	match_some(3)
		5: Xmm	constructor(put_in_xmm, [4], 1)
		6: Type	const_prim(I8X16)
		7: Xmm	constructor(xmm_zero, [6], 2)
		8: XmmMem	constructor(xmm_to_xmm_mem, [7], 3)
		9: Xmm	constructor(x64_pcmpeqb, [5, 8], 4)
		10: OperandSize	make_variant(OperandSize::Size32, [])
		11: Gpr	constructor(x64_pmovmskb, [10, 9], 5)
		12: u32	const_int(65535, u32)
		13: ProducesFlags	constructor(x64_cmp_imm, [10, 11, 12], 6)
		14: CC	make_variant(CC::NZ, [])
		15: ConsumesFlags	constructor(x64_setcc, [14], 7)
		16: ValueRegs	constructor(with_flags, [13, 15], 8)
		17: InstOutput	constructor(output, [16], 9)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4628
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option(Value)	extractor(vany_true, 0)
		5: Value	match_some(4)
		6: Xmm	constructor(put_in_xmm, [5], 1)
		7: XmmMem	constructor(xmm_to_xmm_mem, [6], 2)
		8: ProducesFlags	constructor(x64_ptest, [6, 7], 3)
		9: CC	make_variant(CC::NZ, [])
		10: ConsumesFlags	constructor(x64_setcc, [9], 4)
		11: ValueRegs	constructor(with_flags, [8, 10], 5)
		12: InstOutput	constructor(output, [11], 6)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4622
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: bool	constructor(use_ssse3, [], 0)
		11: Inst	match_tuple(4, 1)
		12: Option(Value)	extractor(splat, 11)
		13: Value	match_some(12)
		14: Option(SinkableLoad)	extractor(sinkable_load, 13)
		15: SinkableLoad	match_some(14)
		16: XmmMem	constructor(sink_load_to_xmm_mem, [15], 1)
		17: Xmm	constructor(x64_movddup, [16], 2)
		18: InstOutput	constructor(output_xmm, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		10:	const_prim(true)
		12:	some
		14:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4620
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		10: u8	const_int(68, u8)
		11: Xmm	constructor(x64_pshufd, [9, 10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4618
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I64)
		11: Xmm	constructor(bitcast_gpr_to_xmm, [10, 9], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		13: u8	const_int(68, u8)
		14: Xmm	constructor(x64_pshufd, [12, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4611
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option(Value)	extractor(splat, 10)
		12: Value	match_some(11)
		13: Option(SinkableLoad)	extractor(sinkable_load, 12)
		14: bool	constructor(use_avx, [], 0)
		15: SinkableLoad	match_some(13)
		16: XmmMem	constructor(sink_load_to_xmm_mem, [15], 1)
		17: Xmm	constructor(x64_vbroadcastss, [16], 2)
		18: InstOutput	constructor(output_xmm, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		13:	some
		14:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4608
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option(Value)	extractor(splat, 10)
		12: Value	match_some(11)
		13: Option(SinkableLoad)	extractor(sinkable_load, 12)
		14: SinkableLoad	match_some(13)
		15: SyntheticAmode	constructor(sink_load, [14], 1)
		16: Xmm	constructor(x64_movss_load, [15], 2)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 3)
		18: u8	const_int(0, u8)
		19: Xmm	constructor(x64_shufps, [16, 17, 18], 4)
		20: InstOutput	constructor(output_xmm, [19], 5)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		13:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4595
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		11: Xmm	constructor(x64_vbroadcastss, [10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
		8:	const_prim(true)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4592
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Xmm	constructor(put_in_xmm, [8], 2)
		11: XmmMem	constructor(put_in_xmm_mem, [8], 3)
		12: u8	const_int(0, u8)
		13: Xmm	constructor(x64_shufps, [10, 11, 12], 4)
		14: InstOutput	constructor(output_xmm, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4585
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	const_prim(I32)
		12: Xmm	constructor(bitcast_gpr_to_xmm, [11, 10], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_vpbroadcastd, [13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		8:	const_prim(true)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4583
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Xmm	constructor(bitcast_gpr_to_xmm, [10, 9], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		13: u8	const_int(0, u8)
		14: Xmm	constructor(x64_pshufd, [12, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4575
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: Option(SinkableLoad)	extractor(sinkable_load_exact, 9)
		11: SinkableLoad	match_some(10)
		12: XmmMem	constructor(sink_load_to_xmm_mem, [11], 1)
		13: Xmm	constructor(x64_vpbroadcastw, [12], 2)
		14: InstOutput	constructor(output_xmm, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		8:	const_prim(true)
		10:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4573
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: Option(SinkableLoad)	extractor(sinkable_load_exact, 8)
		10: Xmm	constructor(xmm_uninit_value, [], 1)
		11: SinkableLoad	match_some(9)
		12: GprMem	constructor(sink_load_to_gpr_mem, [11], 2)
		13: u8	const_int(0, u8)
		14: Xmm	constructor(x64_pinsrw, [10, 12, 13], 3)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 4)
		16: Xmm	constructor(x64_pshuflw, [15, 13], 5)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 6)
		18: Xmm	constructor(x64_pshufd, [17, 13], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		9:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4570
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	const_prim(I32)
		12: Xmm	constructor(bitcast_gpr_to_xmm, [11, 10], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_vpbroadcastw, [13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		8:	const_prim(true)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4568
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Xmm	constructor(bitcast_gpr_to_xmm, [10, 9], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		13: u8	const_int(0, u8)
		14: Xmm	constructor(x64_pshuflw, [12, 13], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 5)
		16: Xmm	constructor(x64_pshufd, [15, 13], 6)
		17: InstOutput	constructor(output_xmm, [16], 7)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4559
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: Option(SinkableLoad)	extractor(sinkable_load_exact, 9)
		11: SinkableLoad	match_some(10)
		12: XmmMem	constructor(sink_load_to_xmm_mem, [11], 1)
		13: Xmm	constructor(x64_vpbroadcastb, [12], 2)
		14: InstOutput	constructor(output_xmm, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
		8:	const_prim(true)
		10:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4555
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: bool	constructor(use_ssse3, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option(Value)	extractor(splat, 8)
		10: Value	match_some(9)
		11: Option(SinkableLoad)	extractor(sinkable_load_exact, 10)
		12: Xmm	constructor(xmm_uninit_value, [], 1)
		13: SinkableLoad	match_some(11)
		14: GprMem	constructor(sink_load_to_gpr_mem, [13], 2)
		15: u8	const_int(0, u8)
		16: Xmm	constructor(x64_pinsrb, [12, 14, 15], 3)
		17: Type	const_prim(I8X16)
		18: Xmm	constructor(xmm_zero, [17], 4)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 5)
		20: Xmm	constructor(x64_pshufb, [16, 19], 6)
		21: InstOutput	constructor(output_xmm, [20], 7)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		6:	const_prim(true)
		7:	const_prim(true)
		9:	some
		11:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4552
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: bool	constructor(use_avx2, [], 0)
		9: Value	match_some(7)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	const_prim(I32)
		12: Xmm	constructor(bitcast_gpr_to_xmm, [11, 10], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_vpbroadcastb, [13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
		8:	const_prim(true)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4549
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(splat, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	const_prim(I32)
		12: Xmm	constructor(bitcast_gpr_to_xmm, [11, 10], 2)
		13: Type	const_prim(I8X16)
		14: Xmm	constructor(xmm_zero, [13], 3)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 4)
		16: Xmm	constructor(x64_pshufb, [12, 15], 5)
		17: InstOutput	constructor(output_xmm, [16], 6)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		6:	const_prim(true)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4546
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(splat, 6)
		8: Value	match_some(7)
		9: GprMem	constructor(put_in_gpr_mem, [8], 1)
		10: Xmm	constructor(x64_movd_to_xmm, [9], 2)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		12: Xmm	constructor(x64_punpcklbw, [10, 11], 4)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 5)
		14: u8	const_int(0, u8)
		15: Xmm	constructor(x64_pshuflw, [13, 14], 6)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 7)
		17: Xmm	constructor(x64_pshufd, [16, 14], 8)
		18: InstOutput	constructor(output_xmm, [17], 9)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4530
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Option(SinkableLoad)	extractor(sinkable_load, 4)
		6: Type	extractor(value_type, 4)
		7: Option(Type)	extractor(ty_64, 6)
		8: SinkableLoad	match_some(5)
		9: SyntheticAmode	constructor(sink_load, [8], 1)
		10: Xmm	constructor(x64_movsd_load, [9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	some
		7:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4528
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Option(SinkableLoad)	extractor(sinkable_load, 4)
		6: Type	extractor(value_type, 4)
		7: Option(Type)	extractor(ty_32, 6)
		8: SinkableLoad	match_some(5)
		9: SyntheticAmode	constructor(sink_load, [8], 1)
		10: Xmm	constructor(x64_movss_load, [9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	some
		7:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4523
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Gpr	constructor(put_in_gpr, [4], 1)
		6: Type	extractor(value_type, 4)
		7: Xmm	constructor(bitcast_gpr_to_xmm, [6, 5], 2)
		8: InstOutput	constructor(output_xmm, [7], 3)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4518
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: InstOutput	constructor(output_value, [4], 1)
		8: Option(InstOutput)	some(7)
		9: Option(Option(InstOutput))	some(8)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 9
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4509
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Uimm8	match_tuple(4, 1)
		6: Value	match_tuple(4, 0)
		7: Type	extractor(value_type, 6)
		8: XmmMem	constructor(put_in_xmm_mem, [6], 1)
		9: u8	const_int(14, u8)
		10: Xmm	constructor(x64_pshufd, [8, 9], 2)
		11: Gpr	constructor(x64_movq_to_gpr, [10], 3)
		12: InstOutput	constructor(output_gpr, [11], 4)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_int(1)
		7:	const_prim(I64X2)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4507
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Uimm8	match_tuple(4, 1)
		6: Value	match_tuple(4, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Gpr	constructor(x64_movq_to_gpr, [8], 2)
		10: InstOutput	constructor(output_gpr, [9], 3)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
		5:	const_int(0)
		7:	const_prim(I64X2)
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4504
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Uimm8))	extractor(extractlane, 0)
		5: (Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Uimm8	match_tuple(5, 1)
		10: u8	extractor(u8_from_uimm8, 9)
		11: Gpr	constructor(x64_pextrq, [8, 10], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I64X2)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4500
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: XmmMem	constructor(put_in_xmm_mem, [5], 1)
		8: Uimm8	match_tuple(4, 1)
		9: u8	extractor(u8_from_uimm8, 8)
		10: Xmm	constructor(x64_pshufd, [7, 9], 2)
		11: Gpr	constructor(x64_movd_to_gpr, [10], 3)
		12: InstOutput	constructor(output_gpr, [11], 4)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		6:	const_prim(I32X4)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4498
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Uimm8	match_tuple(4, 1)
		6: Value	match_tuple(4, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Gpr	constructor(x64_movd_to_gpr, [8], 2)
		10: InstOutput	constructor(output_gpr, [9], 3)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
		5:	const_int(0)
		7:	const_prim(I32X4)
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4495
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Uimm8))	extractor(extractlane, 0)
		5: (Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Uimm8	match_tuple(5, 1)
		10: u8	extractor(u8_from_uimm8, 9)
		11: Gpr	constructor(x64_pextrd, [8, 10], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I32X4)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4491
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Xmm	constructor(put_in_xmm, [5], 1)
		8: Uimm8	match_tuple(4, 1)
		9: u8	extractor(u8_from_uimm8, 8)
		10: Gpr	constructor(x64_pextrw, [7, 9], 2)
		11: InstOutput	constructor(output_gpr, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I16X8)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4486
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 1)
		8: u8	extractor(u8_from_uimm8, 7)
		9: u8	const_int(1, u8)
		10: u8	constructor(u8_and, [8, 9], 0)
		11: Xmm	constructor(put_in_xmm, [5], 1)
		12: u8	constructor(u8_shr, [8, 9], 0)
		13: Gpr	constructor(x64_pextrw, [11, 12], 2)
		14: InstOutput	constructor(output_gpr, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(I8X16)
		10:	const_int(0)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4479
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 1)
		8: u8	extractor(u8_from_uimm8, 7)
		9: u8	const_int(1, u8)
		10: u8	constructor(u8_and, [8, 9], 0)
		11: Xmm	constructor(put_in_xmm, [5], 1)
		12: u8	constructor(u8_shr, [8, 9], 0)
		13: Gpr	constructor(x64_pextrw, [11, 12], 2)
		14: u8	const_int(8, u8)
		15: Imm8Reg	make_variant(Imm8Reg::Imm8, [14])
		16: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [15], 3)
		17: Type	const_prim(I16)
		18: Gpr	constructor(x64_shr, [17, 13, 16], 4)
		19: InstOutput	constructor(output_gpr, [18], 5)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	const_prim(I8X16)
		10:	const_int(1)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4475
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Uimm8))	extractor(extractlane, 0)
		5: (Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Uimm8	match_tuple(5, 1)
		10: u8	extractor(u8_from_uimm8, 9)
		11: Gpr	constructor(x64_pextrb, [8, 10], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I8X16)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4468
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Uimm8	match_tuple(4, 1)
		6: Value	match_tuple(4, 0)
		7: Type	extractor(value_type, 6)
		8: XmmMem	constructor(put_in_xmm_mem, [6], 1)
		9: u8	const_int(238, u8)
		10: Xmm	constructor(x64_pshufd, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	const_int(1)
		7:	const_prim(F64X2)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4464
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extractlane, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: XmmMem	constructor(put_in_xmm_mem, [5], 1)
		8: Uimm8	match_tuple(4, 1)
		9: u8	extractor(u8_from_uimm8, 8)
		10: Xmm	constructor(x64_pshufd, [7, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(F32X4)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4460
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Uimm8))	extractor(extractlane, 7)
		9: (Value, Uimm8)	match_some(8)
		10: Uimm8	match_tuple(9, 1)
		11: Value	match_tuple(9, 0)
		12: InstOutput	constructor(output_value, [11], 1)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_int(0)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4437
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value))	extractor(x86_pshufb, 0)
		5: (Value, Value)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Xmm	constructor(put_in_xmm, [6], 1)
		8: Value	match_tuple(5, 1)
		9: XmmMem	constructor(put_in_xmm_mem, [8], 2)
		10: Xmm	constructor(x64_pshufb, [7, 9], 3)
		11: InstOutput	constructor(output_xmm, [10], 4)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4431
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(swizzle, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Xmm	constructor(put_in_xmm, [5], 1)
		7: u128	const_int(149457353314294540815286102087678586992, u128)
		8: VCodeConstant	constructor(emit_u128_le_const, [7], 2)
		9: XmmMem	constructor(const_to_xmm_mem, [8], 3)
		10: Xmm	constructor(x64_paddusb, [6, 9], 4)
		11: Value	match_tuple(4, 0)
		12: Xmm	constructor(put_in_xmm, [11], 5)
		13: Reg	constructor(xmm_to_reg, [10], 6)
		14: XmmMem	constructor(xmm_to_reg_mem, [13], 7)
		15: RegMem	constructor(xmm_mem_to_reg_mem, [14], 0)
		16: Xmm	constructor(lower_pshufb, [12, 15], 8)
		17: InstOutput	constructor(output_xmm, [16], 9)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4418
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(VecMask)	extractor(vec_mask_from_immediate, 5)
		7: Value	match_tuple(4, 0)
		8: Xmm	constructor(put_in_xmm, [7], 1)
		9: VecMask	match_some(6)
		10: VCodeConstant	constructor(shuffle_0_15_mask, [9], 2)
		11: RegMem	constructor(const_to_reg_mem, [10], 3)
		12: Xmm	constructor(lower_pshufb, [8, 11], 4)
		13: Value	match_tuple(4, 1)
		14: Xmm	constructor(put_in_xmm, [13], 5)
		15: VCodeConstant	constructor(shuffle_16_31_mask, [9], 6)
		16: RegMem	constructor(const_to_reg_mem, [15], 7)
		17: Xmm	constructor(lower_pshufb, [14, 16], 8)
		18: XmmMem	constructor(xmm_to_xmm_mem, [17], 9)
		19: Xmm	constructor(x64_por, [12, 18], 10)
		20: InstOutput	constructor(output_xmm, [19], 11)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4410
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_avx512vl, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(VecMask)	extractor(vec_mask_from_immediate, 6)
		8: bool	constructor(use_avx512vbmi, [], 0)
		9: VecMask	match_some(7)
		10: VCodeConstant	constructor(perm_from_mask, [9], 1)
		11: Type	const_prim(I8X16)
		12: Xmm	constructor(x64_xmm_load_const, [11, 10], 2)
		13: Value	match_tuple(5, 0)
		14: Xmm	constructor(put_in_xmm, [13], 3)
		15: Value	match_tuple(5, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 4)
		17: Xmm	constructor(x64_vpermi2b, [12, 14, 16], 5)
		18: InstOutput	constructor(output_xmm, [17], 6)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		8:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4403
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_avx512vl, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(VecMask)	extractor(vec_mask_from_immediate, 6)
		8: VecMask	match_some(7)
		9: Option((VCodeConstant, VCodeConstant))	extractor(perm_from_mask_with_zeros, 8)
		10: bool	constructor(use_avx512vbmi, [], 0)
		11: Type	const_prim(I8X16)
		12: (VCodeConstant, VCodeConstant)	match_some(9)
		13: VCodeConstant	match_tuple(12, 0)
		14: Xmm	constructor(x64_xmm_load_const, [11, 13], 1)
		15: Value	match_tuple(5, 0)
		16: Xmm	constructor(put_in_xmm, [15], 2)
		17: Value	match_tuple(5, 1)
		18: XmmMem	constructor(put_in_xmm_mem, [17], 3)
		19: Xmm	constructor(x64_vpermi2b, [14, 16, 18], 4)
		20: VCodeConstant	match_tuple(12, 1)
		21: XmmMem	constructor(const_to_xmm_mem, [20], 5)
		22: Xmm	constructor(x64_andps, [19, 21], 6)
		23: InstOutput	constructor(output_xmm, [22], 7)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		9:	some
		10:	const_prim(true)
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4396
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(VecMask)	extractor(vec_mask_from_immediate, 6)
		8: Value	match_tuple(5, 0)
		9: Value	match_tuple(5, 1)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: VecMask	match_some(7)
		12: VCodeConstant	constructor(shuffle_0_31_mask, [11], 2)
		13: XmmMem	constructor(const_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_pshufb, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
	]
	equals = [
		9 == 8
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4383
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shufps_rev_imm, 5)
		7: Value	match_tuple(4, 1)
		8: Xmm	constructor(put_in_xmm, [7], 1)
		9: Value	match_tuple(4, 0)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 2)
		11: u8	match_some(6)
		12: Xmm	constructor(x64_shufps, [8, 10, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4381
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shufps_imm, 5)
		7: Value	match_tuple(4, 0)
		8: Xmm	constructor(put_in_xmm, [7], 1)
		9: Value	match_tuple(4, 1)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 2)
		11: u8	match_some(6)
		12: Xmm	constructor(x64_shufps, [8, 10, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4367
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(u128)	extractor(u128_from_immediate, 6)
		8: u128	match_some(7)
		9: Value	match_tuple(5, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Type	const_prim(I8X16)
		12: Xmm	constructor(xmm_zero, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_pshufb, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		8:	const_int(0)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4359
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpcklqdq, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(30686901955007814682223719185998020864)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4357
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhqdq, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(41362427191743139026172726477975062792)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4353
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckldq, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(30686901951279430565641561564801794304)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4351
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhdq, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(41362427188014754909590568856778836232)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4347
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpcklwd, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(30686616892700419341528320311204774144)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4345
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhwd, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(41362142129435743685477327603181816072)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4341
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpcklbw, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(30609036675948388650355540050116153344)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4339
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhbw, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(41284561912683712994304547342093195272)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4330
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshufd_rhs_imm, 5)
		7: Value	match_tuple(4, 1)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshufd, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4328
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshufd_lhs_imm, 5)
		7: Value	match_tuple(4, 0)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshufd, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4311
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshufhw_rhs_imm, 5)
		7: Value	match_tuple(4, 1)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshufhw, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4309
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshufhw_lhs_imm, 5)
		7: Value	match_tuple(4, 0)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshufhw, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4307
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshuflw_rhs_imm, 5)
		7: Value	match_tuple(4, 1)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshuflw, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4305
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(pshuflw_lhs_imm, 5)
		7: Value	match_tuple(4, 0)
		8: XmmMem	constructor(put_in_xmm_mem, [7], 1)
		9: u8	match_some(6)
		10: Xmm	constructor(x64_pshuflw, [8, 9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4293
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_ssse3, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(u8)	extractor(palignr_imm_from_immediate, 6)
		8: Value	match_tuple(5, 1)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(5, 0)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: u8	match_some(7)
		13: Xmm	constructor(x64_palignr, [9, 11, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4282
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		5: (Value, Value, Immediate)	match_some(4)
		6: Immediate	match_tuple(5, 2)
		7: Option(u8)	extractor(pblendw_imm, 6)
		8: Value	match_tuple(5, 0)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Value	match_tuple(5, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: u8	match_some(7)
		13: Xmm	constructor(x64_pblendw, [9, 11, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4272
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Constant)	extractor(vconst, 5)
		7: Constant	match_some(6)
		8: Option(u128)	extractor(u128_from_constant, 7)
		9: u128	match_some(8)
		10: Xmm	constructor(xmm_uninit_value, [], 1)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_pxor, [10, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	const_int(0)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4267
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Constant)	extractor(vconst, 5)
		7: Constant	match_some(6)
		8: VCodeConstant	constructor(const_to_vconst, [7], 1)
		9: Type	match_tuple(4, 0)
		10: Xmm	constructor(x64_xmm_load_const, [9, 8], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4262
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(set_pinned_reg, 0)
		4: Value	match_some(3)
		5: Gpr	constructor(put_in_gpr, [4], 1)
		6: SideEffectNoResult	constructor(write_pinned_gpr, [5], 2)
		7: InstOutput	constructor(side_effect, [6], 3)
		8: Option(InstOutput)	some(7)
		9: Option(Option(InstOutput))	some(8)
	]
	constraints = [
		3:	some
	]
	result = 9
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4257
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_pinned_reg, 0)
		4: Gpr	constructor(read_pinned_gpr, [], 1)
		5: InstOutput	constructor(output_gpr, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4252
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(smulhi, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_int_ref_16_to_64, 6)
		8: Gpr	constructor(put_in_gpr, [5], 1)
		9: Value	match_tuple(4, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 2)
		11: Type	match_some(7)
		12: bool	const_prim(true)
		13: ValueRegs	constructor(x64_mul, [11, 12, 8, 10], 3)
		14: usize	const_int(1, usize)
		15: Gpr	constructor(value_regs_get_gpr, [13, 14], 4)
		16: InstOutput	constructor(output_gpr, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4249
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(smulhi, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Gpr	constructor(put_in_gpr, [5], 1)
		8: Value	match_tuple(4, 1)
		9: GprMem	constructor(put_in_gpr_mem, [8], 2)
		10: bool	const_prim(true)
		11: Gpr	constructor(x64_mul8, [10, 7, 9], 3)
		12: u8	const_int(8, u8)
		13: Imm8Gpr	constructor(imm8_to_imm8_gpr, [12], 4)
		14: Type	const_prim(I16)
		15: Gpr	constructor(x64_sar, [14, 11, 13], 5)
		16: InstOutput	constructor(output_gpr, [15], 6)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4244
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(umulhi, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_int_ref_16_to_64, 6)
		8: Gpr	constructor(put_in_gpr, [5], 1)
		9: Value	match_tuple(4, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 2)
		11: Type	match_some(7)
		12: bool	const_prim(false)
		13: ValueRegs	constructor(x64_mul, [11, 12, 8, 10], 3)
		14: usize	const_int(1, usize)
		15: Gpr	constructor(value_regs_get_gpr, [13, 14], 4)
		16: InstOutput	constructor(output_gpr, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4241
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(umulhi, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Gpr	constructor(put_in_gpr, [5], 1)
		8: Value	match_tuple(4, 1)
		9: GprMem	constructor(put_in_gpr_mem, [8], 2)
		10: bool	const_prim(false)
		11: Gpr	constructor(x64_mul8, [10, 7, 9], 3)
		12: u8	const_int(8, u8)
		13: Imm8Gpr	constructor(imm8_to_imm8_gpr, [12], 4)
		14: Type	const_prim(I16)
		15: Gpr	constructor(x64_shr, [14, 11, 13], 5)
		16: InstOutput	constructor(output_gpr, [15], 6)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4230
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(srem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Gpr	constructor(put_in_gpr, [5], 1)
		7: Type	extractor(value_type, 5)
		8: OperandSize	constructor(raw_operand_size_of_type, [7], 2)
		9: Gpr	constructor(x64_sign_extend_data, [6, 8], 3)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 4)
		12: ValueRegs	constructor(x64_checked_srem_seq, [8, 6, 9, 11], 5)
		13: usize	const_int(1, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 6)
		15: InstOutput	constructor(output_reg, [14], 7)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4224
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(srem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Gpr	constructor(put_in_gpr, [5], 1)
		8: OperandSize	make_variant(OperandSize::Size8, [])
		9: Gpr	constructor(x64_sign_extend_data, [7, 8], 2)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 3)
		12: Gpr	constructor(x64_checked_srem_seq8, [9, 11], 4)
		13: u8	const_int(8, u8)
		14: Imm8Reg	make_variant(Imm8Reg::Imm8, [13])
		15: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [14], 5)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_shr, [16, 12, 15], 6)
		18: InstOutput	constructor(output_gpr, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4211
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(srem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option(Imm64)	extractor(iconst, 7)
		9: Value	match_tuple(4, 0)
		10: Type	extractor(value_type, 9)
		11: Imm64	match_some(8)
		12: Option(u64)	constructor(safe_divisor_from_imm64, [10, 11], 0)
		13: Gpr	constructor(put_in_gpr, [9], 1)
		14: OperandSize	constructor(raw_operand_size_of_type, [10], 2)
		15: Gpr	constructor(x64_sign_extend_data, [13, 14], 3)
		16: u64	match_some(12)
		17: Reg	constructor(imm, [10, 16], 4)
		18: GprMem	constructor(reg_to_gpr_mem, [17], 5)
		19: DivSignedness	make_variant(DivSignedness::Signed, [])
		20: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		21: ValueRegs	constructor(x64_div_remainder, [13, 15, 18, 14, 19, 20], 6)
		22: InstOutput	constructor(output, [21], 7)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		12:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4202
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(srem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Value	match_tuple(4, 1)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option(Imm64)	extractor(iconst, 9)
		11: Type	const_prim(I8)
		12: Imm64	match_some(10)
		13: Option(u64)	constructor(safe_divisor_from_imm64, [11, 12], 0)
		14: Gpr	constructor(put_in_gpr, [5], 1)
		15: OperandSize	make_variant(OperandSize::Size8, [])
		16: Gpr	constructor(x64_sign_extend_data, [14, 15], 2)
		17: u64	match_some(13)
		18: Reg	constructor(imm, [11, 17], 3)
		19: GprMem	constructor(reg_to_gpr_mem, [18], 4)
		20: DivSignedness	make_variant(DivSignedness::Signed, [])
		21: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		22: Gpr	constructor(x64_div8, [16, 19, 20, 21], 5)
		23: u8	const_int(8, u8)
		24: Imm8Reg	make_variant(Imm8Reg::Imm8, [23])
		25: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [24], 6)
		26: Type	const_prim(I64)
		27: Gpr	constructor(x64_shr, [26, 22, 25], 7)
		28: InstOutput	constructor(output_gpr, [27], 8)
		29: Option(InstOutput)	some(28)
		30: Option(Option(InstOutput))	some(29)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
		8:	some
		10:	some
		13:	some
	]
	result = 30
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4187
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(urem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Gpr	constructor(put_in_gpr, [5], 1)
		9: Type	const_prim(I64)
		10: u64	const_int(0, u64)
		11: Reg	constructor(imm, [9, 10], 2)
		12: Gpr	constructor(gpr_new, [11], 3)
		13: Value	match_tuple(4, 1)
		14: Gpr	constructor(put_in_gpr, [13], 4)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 5)
		16: Type	match_some(7)
		17: OperandSize	constructor(raw_operand_size_of_type, [16], 6)
		18: DivSignedness	make_variant(DivSignedness::Unsigned, [])
		19: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		20: ValueRegs	constructor(x64_div_remainder, [8, 12, 15, 17, 18, 19], 7)
		21: InstOutput	constructor(output, [20], 8)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4178
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(urem, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I32)
		8: ExtendKind	make_variant(ExtendKind::Zero, [])
		9: Gpr	constructor(extend_to_gpr, [5, 7, 8], 1)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 2)
		12: GprMem	constructor(gpr_to_gpr_mem, [11], 3)
		13: DivSignedness	make_variant(DivSignedness::Unsigned, [])
		14: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		15: Gpr	constructor(x64_div8, [9, 12, 13, 14], 4)
		16: u8	const_int(8, u8)
		17: Imm8Reg	make_variant(Imm8Reg::Imm8, [16])
		18: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [17], 5)
		19: Type	const_prim(I64)
		20: Gpr	constructor(x64_shr, [19, 15, 18], 6)
		21: InstOutput	constructor(output_gpr, [20], 7)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4145
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(sdiv, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Gpr	constructor(put_in_gpr, [5], 1)
		9: Type	match_some(7)
		10: OperandSize	constructor(raw_operand_size_of_type, [9], 2)
		11: Gpr	constructor(x64_sign_extend_data, [8, 10], 3)
		12: Value	match_tuple(4, 1)
		13: Reg	constructor(nonzero_sdiv_divisor, [9, 12], 4)
		14: GprMem	constructor(reg_to_gpr_mem, [13], 5)
		15: DivSignedness	make_variant(DivSignedness::Signed, [])
		16: TrapCode	make_variant(TrapCode::IntegerOverflow, [])
		17: ValueRegs	constructor(x64_div_quotient, [8, 11, 14, 10, 15, 16], 6)
		18: InstOutput	constructor(output, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4139
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(sdiv, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Gpr	constructor(put_in_gpr, [5], 1)
		8: OperandSize	make_variant(OperandSize::Size8, [])
		9: Gpr	constructor(x64_sign_extend_data, [7, 8], 2)
		10: Type	const_prim(I8)
		11: Value	match_tuple(4, 1)
		12: Reg	constructor(nonzero_sdiv_divisor, [10, 11], 3)
		13: GprMem	constructor(reg_to_gpr_mem, [12], 4)
		14: DivSignedness	make_variant(DivSignedness::Signed, [])
		15: TrapCode	make_variant(TrapCode::IntegerOverflow, [])
		16: Gpr	constructor(x64_div8, [9, 13, 14, 15], 5)
		17: InstOutput	constructor(output_gpr, [16], 6)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4129
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(udiv, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Gpr	constructor(put_in_gpr, [5], 1)
		9: Type	const_prim(I64)
		10: u64	const_int(0, u64)
		11: Reg	constructor(imm, [9, 10], 2)
		12: Gpr	constructor(gpr_new, [11], 3)
		13: Value	match_tuple(4, 1)
		14: Gpr	constructor(put_in_gpr, [13], 4)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 5)
		16: Type	match_some(7)
		17: OperandSize	constructor(raw_operand_size_of_type, [16], 6)
		18: DivSignedness	make_variant(DivSignedness::Unsigned, [])
		19: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		20: ValueRegs	constructor(x64_div_quotient, [8, 12, 15, 17, 18, 19], 7)
		21: InstOutput	constructor(output, [20], 8)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4120
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(udiv, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I32)
		8: ExtendKind	make_variant(ExtendKind::Zero, [])
		9: Gpr	constructor(extend_to_gpr, [5, 7, 8], 1)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 2)
		12: GprMem	constructor(gpr_to_gpr_mem, [11], 3)
		13: DivSignedness	make_variant(DivSignedness::Unsigned, [])
		14: TrapCode	make_variant(TrapCode::IntegerDivisionByZero, [])
		15: Gpr	constructor(x64_div8, [9, 12, 13, 14], 4)
		16: InstOutput	constructor(output_gpr, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4106
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((StackSlot, Offset32))	extractor(stack_addr, 0)
		4: (StackSlot, Offset32)	match_some(3)
		5: StackSlot	match_tuple(4, 0)
		6: Offset32	match_tuple(4, 1)
		7: Gpr	constructor(stack_addr_impl, [5, 6], 1)
		8: InstOutput	constructor(output_gpr, [7], 2)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4101
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(trunc, 0)
		4: Value	match_some(3)
		5: RegMem	constructor(put_in_reg_mem, [4], 1)
		6: Type	extractor(value_type, 4)
		7: RoundImm	make_variant(RoundImm::RoundZero, [])
		8: Xmm	constructor(x64_round, [6, 5, 7], 2)
		9: InstOutput	constructor(output_xmm, [8], 3)
		10: Option(InstOutput)	some(9)
		11: Option(Option(InstOutput))	some(10)
	]
	constraints = [
		3:	some
	]
	result = 11
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4096
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(nearest, 0)
		4: Value	match_some(3)
		5: RegMem	constructor(put_in_reg_mem, [4], 1)
		6: Type	extractor(value_type, 4)
		7: RoundImm	make_variant(RoundImm::RoundNearest, [])
		8: Xmm	constructor(x64_round, [6, 5, 7], 2)
		9: InstOutput	constructor(output_xmm, [8], 3)
		10: Option(InstOutput)	some(9)
		11: Option(Option(InstOutput))	some(10)
	]
	constraints = [
		3:	some
	]
	result = 11
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4091
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(floor, 0)
		4: Value	match_some(3)
		5: RegMem	constructor(put_in_reg_mem, [4], 1)
		6: Type	extractor(value_type, 4)
		7: RoundImm	make_variant(RoundImm::RoundDown, [])
		8: Xmm	constructor(x64_round, [6, 5, 7], 2)
		9: InstOutput	constructor(output_xmm, [8], 3)
		10: Option(InstOutput)	some(9)
		11: Option(Option(InstOutput))	some(10)
	]
	constraints = [
		3:	some
	]
	result = 11
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4086
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(ceil, 0)
		4: Value	match_some(3)
		5: RegMem	constructor(put_in_reg_mem, [4], 1)
		6: Type	extractor(value_type, 4)
		7: RoundImm	make_variant(RoundImm::RoundUp, [])
		8: Xmm	constructor(x64_round, [6, 5, 7], 2)
		9: InstOutput	constructor(output_xmm, [8], 3)
		10: Option(InstOutput)	some(9)
		11: Option(Option(InstOutput))	some(10)
	]
	constraints = [
		3:	some
	]
	result = 11
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4026
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fcopysign, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Type	const_prim(F64)
		12: u64	const_int(9223372036854775808, u64)
		13: Reg	constructor(imm, [11, 12], 1)
		14: Xmm	constructor(xmm_new, [13], 2)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 3)
		16: Xmm	constructor(x64_andnpd, [14, 15], 4)
		17: Value	match_tuple(8, 1)
		18: XmmMem	constructor(put_in_xmm_mem, [17], 5)
		19: Xmm	constructor(x64_andpd, [14, 18], 6)
		20: XmmMem	constructor(xmm_to_xmm_mem, [19], 7)
		21: Xmm	constructor(x64_orpd, [16, 20], 8)
		22: InstOutput	constructor(output_xmm, [21], 9)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	const_prim(F64)
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4020
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fcopysign, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Type	const_prim(F32)
		12: u64	const_int(2147483648, u64)
		13: Reg	constructor(imm, [11, 12], 1)
		14: Xmm	constructor(xmm_new, [13], 2)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 3)
		16: Xmm	constructor(x64_andnps, [14, 15], 4)
		17: Value	match_tuple(8, 1)
		18: XmmMem	constructor(put_in_xmm_mem, [17], 5)
		19: Xmm	constructor(x64_andps, [14, 18], 6)
		20: XmmMem	constructor(xmm_to_xmm_mem, [19], 7)
		21: Xmm	constructor(x64_orps, [16, 20], 8)
		22: InstOutput	constructor(output_xmm, [21], 9)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	const_prim(F32)
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4014
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((MemFlags, Value))	extractor(bitcast, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(is_xmm_type, 7)
		9: (MemFlags, Value)	match_some(6)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(is_xmm_type, 11)
		13: InstOutput	constructor(output_value, [10], 1)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		12:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4007
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(is_gpr_type, 11)
		13: Type	match_some(12)
		14: bool	constructor(is_ref_type, [13], 0)
		15: Type	match_some(6)
		16: bool	constructor(is_ref_type, [15], 0)
		17: Gpr	constructor(put_in_gpr, [10], 1)
		18: Gpr	constructor(copy_gpr, [15, 17], 2)
		19: InstOutput	constructor(output_gpr, [18], 3)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		12:	some
		14:	const_prim(false)
		16:	const_prim(true)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 4002
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(is_gpr_type, 11)
		13: Type	match_some(12)
		14: bool	constructor(is_ref_type, [13], 0)
		15: Type	match_some(6)
		16: bool	constructor(is_ref_type, [15], 0)
		17: Gpr	constructor(put_in_gpr, [10], 1)
		18: Gpr	constructor(copy_gpr, [15, 17], 2)
		19: InstOutput	constructor(output_gpr, [18], 3)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		12:	some
		14:	const_prim(true)
		16:	const_prim(false)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3995
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(is_gpr_type, 11)
		13: InstOutput	constructor(output_value, [10], 1)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		12:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3991
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(bitcast, 6)
		8: (MemFlags, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Type	extractor(value_type, 9)
		11: Gpr	constructor(put_in_gpr, [9], 1)
		12: Type	const_prim(I64)
		13: Xmm	constructor(bitcast_gpr_to_xmm, [12, 11], 2)
		14: InstOutput	constructor(output_xmm, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	const_prim(I64)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3988
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(bitcast, 6)
		8: (MemFlags, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Type	const_prim(F64)
		13: Gpr	constructor(bitcast_xmm_to_gpr, [12, 11], 2)
		14: InstOutput	constructor(output_gpr, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
		10:	const_prim(F64)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3985
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(bitcast, 6)
		8: (MemFlags, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Type	extractor(value_type, 9)
		11: Gpr	constructor(put_in_gpr, [9], 1)
		12: Type	const_prim(I32)
		13: Xmm	constructor(bitcast_gpr_to_xmm, [12, 11], 2)
		14: InstOutput	constructor(output_xmm, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	const_prim(I32)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3982
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(bitcast, 6)
		8: (MemFlags, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Type	const_prim(F32)
		13: Gpr	constructor(bitcast_xmm_to_gpr, [12, 11], 2)
		14: InstOutput	constructor(output_gpr, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I32)
		7:	some
		10:	const_prim(F32)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3945
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(unarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Xmm	constructor(unarrow_i32x4_lanes_to_low_u16_lanes, [11], 2)
		13: Value	match_tuple(8, 1)
		14: Xmm	constructor(put_in_xmm, [13], 3)
		15: Xmm	constructor(unarrow_i32x4_lanes_to_low_u16_lanes, [14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_punpcklqdq, [12, 16], 6)
		18: InstOutput	constructor(output_xmm, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		10:	const_prim(I32X4)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3935
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(unarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Type	extractor(value_type, 10)
		12: Xmm	constructor(put_in_xmm, [10], 1)
		13: Value	match_tuple(9, 1)
		14: XmmMem	constructor(put_in_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_packusdw, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
		11:	const_prim(I32X4)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3932
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(unarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Value	match_tuple(8, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_packuswb, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
		10:	const_prim(I16X8)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3926
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(snarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Type, Inst))	extractor(has_type, 11)
		13: (Type, Inst)	match_some(12)
		14: Type	match_tuple(13, 0)
		15: Value	match_tuple(8, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Constant)	extractor(vconst, 17)
		19: Constant	match_some(18)
		20: Option(u128)	extractor(u128_from_constant, 19)
		21: u128	match_some(20)
		22: Inst	match_tuple(13, 1)
		23: Option(Value)	extractor(x86_cvtt2dq, 22)
		24: Value	match_some(23)
		25: XmmMem	constructor(put_in_xmm_mem, [24], 1)
		26: Xmm	constructor(x64_cvttpd2dq, [25], 2)
		27: InstOutput	constructor(output_xmm, [26], 3)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		10:	some
		12:	some
		14:	const_prim(I64X2)
		16:	some
		18:	some
		20:	some
		21:	const_int(0)
		23:	some
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3902
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(snarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Type, Inst))	extractor(has_type, 11)
		13: (Type, Inst)	match_some(12)
		14: Type	match_tuple(13, 0)
		15: Inst	match_tuple(13, 1)
		16: Option(Value)	extractor(fcvt_to_sint_sat, 15)
		17: Value	match_tuple(8, 1)
		18: Option(Inst)	extractor(def_inst, 17)
		19: Inst	match_some(18)
		20: Option(Constant)	extractor(vconst, 19)
		21: Constant	match_some(20)
		22: Option(u128)	extractor(u128_from_constant, 21)
		23: u128	match_some(22)
		24: Value	match_some(16)
		25: Xmm	constructor(put_in_xmm, [24], 1)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 2)
		27: FcmpImm	make_variant(FcmpImm::Equal, [])
		28: Xmm	constructor(x64_cmppd, [25, 26, 27], 3)
		29: u128	const_int(87562894222253961879829747836030812160, u128)
		30: VCodeConstant	constructor(emit_u128_le_const, [29], 4)
		31: XmmMem	constructor(const_to_xmm_mem, [30], 5)
		32: Xmm	constructor(x64_andps, [28, 31], 6)
		33: XmmMem	constructor(xmm_to_xmm_mem, [32], 7)
		34: Xmm	constructor(x64_minpd, [25, 33], 8)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 9)
		36: Xmm	constructor(x64_cvttpd2dq, [35], 10)
		37: InstOutput	constructor(output_xmm, [36], 11)
		38: Option(InstOutput)	some(37)
		39: Option(Option(InstOutput))	some(38)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		10:	some
		12:	some
		14:	const_prim(I64X2)
		16:	some
		18:	some
		20:	some
		22:	some
		23:	const_int(0)
	]
	result = 39
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3893
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(snarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Value	match_tuple(8, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_packssdw, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		10:	const_prim(I32X4)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3890
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(snarrow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Type	extractor(value_type, 9)
		11: Xmm	constructor(put_in_xmm, [9], 1)
		12: Value	match_tuple(8, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_packsswb, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
		10:	const_prim(I16X8)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3885
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uwiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: Type	const_prim(F32X4)
		12: Xmm	constructor(xmm_zero, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_unpckhps, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
		9:	const_prim(I32X4)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3883
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uwiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: Type	const_prim(I8X16)
		12: Xmm	constructor(xmm_zero, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_punpckhwd, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		9:	const_prim(I16X8)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3881
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uwiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: Type	const_prim(I8X16)
		12: Xmm	constructor(xmm_zero, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_punpckhbw, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		9:	const_prim(I8X16)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3866
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(uwiden_low, 5)
		7: Value	match_some(6)
		8: Xmm	constructor(put_in_xmm, [7], 1)
		9: Type	match_tuple(4, 0)
		10: Xmm	constructor(lower_uwiden_low, [9, 8], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3862
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uwiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovzxdq, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I32X4)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3859
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uwiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovzxwd, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I16X8)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3856
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uwiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovzxbw, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I8X16)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3848
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(swiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		11: u8	const_int(14, u8)
		12: Xmm	constructor(x64_pshufd, [10, 11], 2)
		13: Type	const_prim(I32X4)
		14: Xmm	constructor(xmm_zero, [13], 3)
		15: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		16: Xmm	constructor(x64_pcmpgtd, [14, 15], 5)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 6)
		18: Xmm	constructor(x64_punpckldq, [12, 17], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
		9:	const_prim(I32X4)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3843
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(swiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhwd, [10, 11], 3)
		13: u32	const_int(16, u32)
		14: XmmMemImm	constructor(xmi_imm, [13], 4)
		15: Xmm	constructor(x64_psrad, [12, 14], 5)
		16: InstOutput	constructor(output_xmm, [15], 6)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		9:	const_prim(I16X8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3840
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(swiden_high, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_punpckhbw, [10, 11], 3)
		13: u32	const_int(8, u32)
		14: XmmMemImm	constructor(xmi_imm, [13], 4)
		15: Xmm	constructor(x64_psraw, [12, 14], 5)
		16: InstOutput	constructor(output_xmm, [15], 6)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		9:	const_prim(I8X16)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3834
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_high, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: u8	const_int(238, u8)
		13: Xmm	constructor(x64_pshufd, [11, 12], 2)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pmovsxdq, [14], 4)
		16: InstOutput	constructor(output_xmm, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I32X4)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3829
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: bool	constructor(use_ssse3, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option(Value)	extractor(swiden_high, 8)
		10: Value	match_some(9)
		11: Type	extractor(value_type, 10)
		12: Xmm	constructor(put_in_xmm, [10], 1)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 2)
		14: u8	const_int(8, u8)
		15: Xmm	constructor(x64_palignr, [12, 13, 14], 3)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 4)
		17: Xmm	constructor(x64_pmovsxwd, [16], 5)
		18: InstOutput	constructor(output_xmm, [17], 6)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		7:	const_prim(true)
		9:	some
		11:	const_prim(I16X8)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3824
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: bool	constructor(use_ssse3, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option(Value)	extractor(swiden_high, 8)
		10: Value	match_some(9)
		11: Type	extractor(value_type, 10)
		12: Xmm	constructor(put_in_xmm, [10], 1)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 2)
		14: u8	const_int(8, u8)
		15: Xmm	constructor(x64_palignr, [12, 13, 14], 3)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 4)
		17: Xmm	constructor(x64_pmovsxbw, [16], 5)
		18: InstOutput	constructor(output_xmm, [17], 6)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		7:	const_prim(true)
		9:	some
		11:	const_prim(I8X16)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3801
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(swiden_low, 5)
		7: Value	match_some(6)
		8: Xmm	constructor(put_in_xmm, [7], 1)
		9: Type	match_tuple(4, 0)
		10: Xmm	constructor(lower_swiden_low, [9, 8], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3797
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovsxdq, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I32X4)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3794
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovsxwd, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I16X8)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3791
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_low, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		12: Xmm	constructor(x64_pmovsxbw, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
		10:	const_prim(I8X16)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3782
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option((Value, Value))	extractor(imul, 13)
		15: (Value, Value)	match_some(14)
		16: Value	match_tuple(15, 0)
		17: Option(Inst)	extractor(def_inst, 16)
		18: Inst	match_some(17)
		19: Option(Value)	extractor(swiden_low, 18)
		20: Value	match_tuple(15, 1)
		21: Option(Inst)	extractor(def_inst, 20)
		22: Inst	match_some(21)
		23: Option(Value)	extractor(swiden_low, 22)
		24: Inst	match_some(12)
		25: Option((Value, Value))	extractor(imul, 24)
		26: (Value, Value)	match_some(25)
		27: Value	match_tuple(26, 0)
		28: Option(Inst)	extractor(def_inst, 27)
		29: Inst	match_some(28)
		30: Option(Value)	extractor(swiden_high, 29)
		31: Value	match_tuple(26, 1)
		32: Option(Inst)	extractor(def_inst, 31)
		33: Inst	match_some(32)
		34: Option(Value)	extractor(swiden_high, 33)
		35: Value	match_some(19)
		36: Value	match_some(30)
		37: Value	match_some(23)
		38: Value	match_some(34)
		39: Xmm	constructor(put_in_xmm, [35], 1)
		40: XmmMem	constructor(put_in_xmm_mem, [37], 2)
		41: Xmm	constructor(x64_pmaddwd, [39, 40], 3)
		42: InstOutput	constructor(output_xmm, [41], 4)
		43: Option(InstOutput)	some(42)
		44: Option(Option(InstOutput))	some(43)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		10:	some
		12:	some
		14:	some
		17:	some
		19:	some
		21:	some
		23:	some
		25:	some
		28:	some
		30:	some
		32:	some
		34:	some
	]
	equals = [
		36 == 35
		38 == 37
	]
	result = 44
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3768
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: u128	const_int(-170138587272425278588607549579869519872, u128)
		21: VCodeConstant	constructor(emit_u128_le_const, [20], 1)
		22: XmmMem	constructor(const_to_xmm_mem, [21], 2)
		23: Xmm	constructor(put_in_xmm, [15], 3)
		24: Xmm	constructor(x64_pxor, [23, 22], 4)
		25: u128	const_int(5192376087906286159508272029171713, u128)
		26: VCodeConstant	constructor(emit_u128_le_const, [25], 5)
		27: XmmMem	constructor(const_to_xmm_mem, [26], 6)
		28: Xmm	constructor(x64_pmaddwd, [24, 27], 7)
		29: u128	const_int(5192296859743753448426600480702464, u128)
		30: VCodeConstant	constructor(emit_u128_le_const, [29], 8)
		31: XmmMem	constructor(const_to_xmm_mem, [30], 9)
		32: Xmm	constructor(x64_paddd, [28, 31], 10)
		33: InstOutput	constructor(output_xmm, [32], 11)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		10:	some
		12:	some
		14:	some
		16:	const_prim(I16X8)
		18:	some
	]
	equals = [
		19 == 15
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3759
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd_pairwise, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Value	match_tuple(9, 1)
		13: Option(Inst)	extractor(def_inst, 12)
		14: Inst	match_some(11)
		15: Option(Value)	extractor(uwiden_low, 14)
		16: Value	match_some(15)
		17: Type	extractor(value_type, 16)
		18: Inst	match_some(13)
		19: Option(Value)	extractor(uwiden_high, 18)
		20: Value	match_some(19)
		21: u128	const_int(1334440654591915542993625911497130241, u128)
		22: VCodeConstant	constructor(emit_u128_le_const, [21], 1)
		23: XmmMem	constructor(const_to_xmm_mem, [22], 2)
		24: Xmm	constructor(put_in_xmm, [16], 3)
		25: Xmm	constructor(x64_pmaddubsw, [24, 23], 4)
		26: InstOutput	constructor(output_xmm, [25], 5)
		27: Option(InstOutput)	some(26)
		28: Option(Option(InstOutput))	some(27)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
		11:	some
		13:	some
		15:	some
		17:	const_prim(I8X16)
		19:	some
	]
	equals = [
		20 == 16
	]
	result = 28
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3751
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_some(12)
		14: Type	extractor(value_type, 13)
		15: Value	match_tuple(8, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_high, 17)
		19: Value	match_some(18)
		20: u128	const_int(5192376087906286159508272029171713, u128)
		21: VCodeConstant	constructor(emit_u128_le_const, [20], 1)
		22: XmmMem	constructor(const_to_xmm_mem, [21], 2)
		23: Xmm	constructor(put_in_xmm, [13], 3)
		24: Xmm	constructor(x64_pmaddwd, [23, 22], 4)
		25: InstOutput	constructor(output_xmm, [24], 5)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		10:	some
		12:	some
		14:	const_prim(I16X8)
		16:	some
		18:	some
	]
	equals = [
		19 == 13
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3741
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd_pairwise, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(swiden_low, 12)
		14: Value	match_some(13)
		15: Type	extractor(value_type, 14)
		16: Value	match_tuple(9, 1)
		17: Option(Inst)	extractor(def_inst, 16)
		18: Inst	match_some(17)
		19: Option(Value)	extractor(swiden_high, 18)
		20: Value	match_some(19)
		21: u128	const_int(1334440654591915542993625911497130241, u128)
		22: VCodeConstant	constructor(emit_u128_le_const, [21], 1)
		23: Type	const_prim(I8X16)
		24: Xmm	constructor(x64_xmm_load_const, [23, 22], 2)
		25: XmmMem	constructor(put_in_xmm_mem, [14], 3)
		26: Xmm	constructor(x64_pmaddubsw, [24, 25], 4)
		27: InstOutput	constructor(output_xmm, [26], 5)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
		11:	some
		13:	some
		15:	const_prim(I8X16)
		17:	some
		19:	some
	]
	equals = [
		20 == 14
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3729
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: u8	const_int(136, u8)
		15: Xmm	constructor(x64_shufps, [10, 13, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [12], 5)
		17: u8	const_int(221, u8)
		18: Xmm	constructor(x64_shufps, [10, 16, 17], 6)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 7)
		20: Xmm	constructor(x64_paddd, [15, 19], 8)
		21: InstOutput	constructor(output_xmm, [20], 9)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3725
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd_pairwise, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_phaddd, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3699
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		14: u8	const_int(232, u8)
		15: Xmm	constructor(x64_pshuflw, [13, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_pshufhw, [16, 14], 6)
		18: XmmMem	constructor(xmm_to_xmm_mem, [17], 7)
		19: Xmm	constructor(x64_pshufd, [18, 14], 8)
		20: XmmMem	constructor(xmm_to_xmm_mem, [12], 9)
		21: Xmm	constructor(x64_pshuflw, [20, 14], 10)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 11)
		23: Xmm	constructor(x64_pshufhw, [22, 14], 12)
		24: XmmMem	constructor(xmm_to_xmm_mem, [23], 13)
		25: Xmm	constructor(x64_pshufd, [24, 14], 14)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 15)
		27: Xmm	constructor(x64_punpcklqdq, [19, 26], 16)
		28: u32	const_int(16, u32)
		29: XmmMemImm	constructor(xmi_imm, [28], 17)
		30: Xmm	constructor(x64_psrad, [10, 29], 18)
		31: XmmMemImm	constructor(xmi_imm, [28], 19)
		32: Xmm	constructor(x64_psrad, [12, 31], 20)
		33: XmmMem	constructor(xmm_to_xmm_mem, [32], 21)
		34: Xmm	constructor(x64_packssdw, [30, 33], 22)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 23)
		36: Xmm	constructor(x64_paddw, [27, 35], 24)
		37: InstOutput	constructor(output_xmm, [36], 25)
		38: Option(InstOutput)	some(37)
		39: Option(Option(InstOutput))	some(38)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 39
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3695
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd_pairwise, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_phaddw, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3679
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: u128	const_int(1324055902416102970674609367438786815, u128)
		9: VCodeConstant	constructor(emit_u128_le_const, [8], 1)
		10: XmmMem	constructor(const_to_xmm_mem, [9], 2)
		11: Xmm	constructor(x64_movdqu_load, [10], 3)
		12: (Value, Value)	match_some(7)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [11], 5)
		16: Xmm	constructor(x64_pand, [14, 15], 6)
		17: Value	match_tuple(12, 1)
		18: Xmm	constructor(put_in_xmm, [17], 7)
		19: XmmMem	constructor(xmm_to_xmm_mem, [11], 8)
		20: Xmm	constructor(x64_pand, [18, 19], 9)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 10)
		22: Xmm	constructor(x64_packuswb, [16, 21], 11)
		23: Xmm	constructor(put_in_xmm, [13], 12)
		24: u32	const_int(8, u32)
		25: XmmMemImm	constructor(xmi_imm, [24], 13)
		26: Xmm	constructor(x64_psrlw, [23, 25], 14)
		27: Xmm	constructor(put_in_xmm, [17], 15)
		28: XmmMemImm	constructor(xmi_imm, [24], 16)
		29: Xmm	constructor(x64_psrlw, [27, 28], 17)
		30: XmmMem	constructor(xmm_to_xmm_mem, [29], 18)
		31: Xmm	constructor(x64_packuswb, [26, 30], 19)
		32: XmmMem	constructor(xmm_to_xmm_mem, [31], 20)
		33: Xmm	constructor(x64_paddb, [22, 32], 21)
		34: InstOutput	constructor(output_xmm, [33], 22)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3674
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(x86_cvtt2dq, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		11: Xmm	constructor(x64_cvttps2dq, [10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		9:	const_prim(F32X4)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3627
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_uint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: Type	const_prim(F32X4)
		12: Xmm	constructor(xmm_zero, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_maxps, [10, 13], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [12], 5)
		16: Xmm	constructor(x64_pcmpeqd, [12, 15], 6)
		17: u32	const_int(1, u32)
		18: XmmMemImm	constructor(xmi_imm, [17], 7)
		19: Xmm	constructor(x64_psrld, [16, 18], 8)
		20: XmmMem	constructor(xmm_to_xmm_mem, [19], 9)
		21: Xmm	constructor(x64_cvtdq2ps, [20], 10)
		22: XmmMem	constructor(xmm_to_xmm_mem, [14], 11)
		23: Xmm	constructor(x64_cvttps2dq, [22], 12)
		24: XmmMem	constructor(xmm_to_xmm_mem, [21], 13)
		25: Xmm	constructor(x64_subps, [14, 24], 14)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 15)
		27: FcmpImm	make_variant(FcmpImm::LessThanOrEqual, [])
		28: Xmm	constructor(x64_cmpps, [21, 26, 27], 16)
		29: XmmMem	constructor(xmm_to_xmm_mem, [25], 17)
		30: Xmm	constructor(x64_cvttps2dq, [29], 18)
		31: XmmMem	constructor(xmm_to_xmm_mem, [28], 19)
		32: Xmm	constructor(x64_pxor, [30, 31], 20)
		33: Type	const_prim(I32X4)
		34: Xmm	constructor(xmm_zero, [33], 21)
		35: Xmm	constructor(lower_vec_smax, [33, 32, 34], 22)
		36: XmmMem	constructor(xmm_to_xmm_mem, [23], 23)
		37: Xmm	constructor(x64_paddd, [35, 36], 24)
		38: InstOutput	constructor(output_xmm, [37], 25)
		39: Option(InstOutput)	some(38)
		40: Option(Option(InstOutput))	some(39)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		9:	const_prim(F32X4)
	]
	result = 40
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3556
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_sint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Xmm	constructor(put_in_xmm, [8], 1)
		11: XmmMem	constructor(xmm_to_xmm_mem, [10], 2)
		12: FcmpImm	make_variant(FcmpImm::Equal, [])
		13: Xmm	constructor(x64_cmpps, [10, 11, 12], 3)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 4)
		15: Xmm	constructor(x64_andps, [10, 14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 6)
		17: Xmm	constructor(x64_pxor, [13, 16], 7)
		18: XmmMem	constructor(xmm_to_xmm_mem, [15], 8)
		19: Xmm	constructor(x64_cvttps2dq, [18], 9)
		20: XmmMem	constructor(xmm_to_xmm_mem, [17], 10)
		21: Xmm	constructor(x64_pand, [19, 20], 11)
		22: u32	const_int(31, u32)
		23: XmmMemImm	constructor(xmi_imm, [22], 12)
		24: Xmm	constructor(x64_psrad, [21, 23], 13)
		25: XmmMem	constructor(xmm_to_xmm_mem, [19], 14)
		26: Xmm	constructor(x64_pxor, [24, 25], 15)
		27: InstOutput	constructor(output_xmm, [26], 16)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		9:	const_prim(F32X4)
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3552
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(fcvt_to_sint_sat, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	extractor(ty_scalar_float, 8)
		10: Type	match_tuple(4, 0)
		11: bool	const_prim(true)
		12: Gpr	constructor(cvt_float_to_sint_seq, [10, 7, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3549
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(fcvt_to_sint, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	extractor(ty_scalar_float, 8)
		10: Type	match_tuple(4, 0)
		11: bool	const_prim(false)
		12: Gpr	constructor(cvt_float_to_sint_seq, [10, 7, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3546
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(fcvt_to_uint_sat, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	extractor(ty_scalar_float, 8)
		10: Type	match_tuple(4, 0)
		11: bool	const_prim(true)
		12: Gpr	constructor(cvt_float_to_uint_seq, [10, 7, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3543
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(fcvt_to_uint, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	extractor(ty_scalar_float, 8)
		10: Type	match_tuple(4, 0)
		11: bool	const_prim(false)
		12: Gpr	constructor(cvt_float_to_uint_seq, [10, 7, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3519
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: u32	const_int(16, u32)
		11: XmmMemImm	constructor(xmi_imm, [10], 2)
		12: Xmm	constructor(x64_pslld, [9, 11], 3)
		13: XmmMemImm	constructor(xmi_imm, [10], 4)
		14: Xmm	constructor(x64_psrld, [12, 13], 5)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 6)
		16: Xmm	constructor(x64_psubd, [9, 15], 7)
		17: XmmMem	constructor(xmm_to_xmm_mem, [14], 8)
		18: Xmm	constructor(x64_cvtdq2ps, [17], 9)
		19: u32	const_int(1, u32)
		20: XmmMemImm	constructor(xmi_imm, [19], 10)
		21: Xmm	constructor(x64_psrld, [16, 20], 11)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 12)
		23: Xmm	constructor(x64_cvtdq2ps, [22], 13)
		24: XmmMem	constructor(xmm_to_xmm_mem, [23], 14)
		25: Xmm	constructor(x64_addps, [23, 24], 15)
		26: XmmMem	constructor(xmm_to_xmm_mem, [18], 16)
		27: Xmm	constructor(x64_addps, [25, 26], 17)
		28: InstOutput	constructor(output_xmm, [27], 18)
		29: Option(InstOutput)	some(28)
		30: Option(Option(InstOutput))	some(29)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 30
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3491
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_avx512vl, [], 0)
		7: bool	constructor(use_avx512f, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option(Value)	extractor(fcvt_from_uint, 8)
		10: Value	match_some(9)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 1)
		12: Xmm	constructor(x64_vcvtudq2ps, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		6:	const_prim(true)
		7:	const_prim(true)
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3483
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option(Value)	extractor(uwiden_low, 10)
		12: Value	match_some(11)
		13: Type	extractor(value_type, 12)
		14: u128	const_int(4841369600550502400, u128)
		15: VCodeConstant	constructor(emit_u128_le_const, [14], 1)
		16: XmmMem	constructor(const_to_xmm_mem, [15], 2)
		17: Xmm	constructor(put_in_xmm, [12], 3)
		18: Xmm	constructor(x64_unpcklps, [17, 16], 4)
		19: u128	const_int(89307505966799035215565906462008934400, u128)
		20: VCodeConstant	constructor(emit_u128_le_const, [19], 5)
		21: XmmMem	constructor(const_to_xmm_mem, [20], 6)
		22: Xmm	constructor(x64_subpd, [18, 21], 7)
		23: InstOutput	constructor(output_xmm, [22], 8)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		9:	some
		11:	some
		13:	const_prim(I32X4)
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3468
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: u128	const_int(79228162495817593524129366015, u128)
		11: VCodeConstant	constructor(emit_u128_le_const, [10], 1)
		12: XmmMem	constructor(const_to_xmm_mem, [11], 2)
		13: u128	const_int(89307505966799035215565906462008934400, u128)
		14: VCodeConstant	constructor(emit_u128_le_const, [13], 3)
		15: XmmMem	constructor(const_to_xmm_mem, [14], 4)
		16: u128	const_int(91965961958368866961517635770645479424, u128)
		17: VCodeConstant	constructor(emit_u128_le_const, [16], 5)
		18: XmmMem	constructor(const_to_xmm_mem, [17], 6)
		19: u128	const_int(91965961958388209774631469837441826816, u128)
		20: VCodeConstant	constructor(emit_u128_le_const, [19], 7)
		21: XmmMem	constructor(const_to_xmm_mem, [20], 8)
		22: Xmm	constructor(put_in_xmm, [8], 9)
		23: Xmm	constructor(x64_pand, [22, 12], 10)
		24: Xmm	constructor(x64_por, [23, 15], 11)
		25: Xmm	constructor(put_in_xmm, [8], 12)
		26: u32	const_int(32, u32)
		27: XmmMemImm	constructor(xmi_imm, [26], 13)
		28: Xmm	constructor(x64_psrlq, [25, 27], 14)
		29: Xmm	constructor(x64_por, [28, 18], 15)
		30: Xmm	constructor(x64_subpd, [29, 21], 16)
		31: XmmMem	constructor(xmm_to_xmm_mem, [30], 17)
		32: Xmm	constructor(x64_addpd, [24, 31], 18)
		33: InstOutput	constructor(output_xmm, [32], 19)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		9:	const_prim(I64X2)
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3437
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(fcvt_from_uint, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Gpr	constructor(put_in_gpr, [7], 1)
		10: Type	match_tuple(4, 0)
		11: Xmm	constructor(cvt_u64_to_float_seq, [10, 9], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_prim(I64)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3434
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: Type	match_some(10)
		12: Option(Type)	extractor(ty_int, 11)
		13: Type	const_prim(F64X2)
		14: Xmm	constructor(xmm_zero, [13], 1)
		15: Type	const_prim(I64)
		16: ExtendKind	make_variant(ExtendKind::Zero, [])
		17: Gpr	constructor(extend_to_gpr, [8, 15, 16], 2)
		18: GprMem	constructor(gpr_to_gpr_mem, [17], 3)
		19: Xmm	constructor(x64_cvtsi2sd, [15, 14, 18], 4)
		20: InstOutput	constructor(output_xmm, [19], 5)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
		12:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3431
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: Type	match_some(10)
		12: Option(Type)	extractor(ty_int, 11)
		13: Type	const_prim(F32X4)
		14: Xmm	constructor(xmm_zero, [13], 1)
		15: Type	const_prim(I64)
		16: ExtendKind	make_variant(ExtendKind::Zero, [])
		17: Gpr	constructor(extend_to_gpr, [8, 15, 16], 2)
		18: GprMem	constructor(gpr_to_gpr_mem, [17], 3)
		19: Xmm	constructor(x64_cvtsi2ss, [15, 14, 18], 4)
		20: InstOutput	constructor(output_xmm, [19], 5)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
		12:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3426
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option(Value)	extractor(swiden_low, 10)
		12: Value	match_some(11)
		13: Type	extractor(value_type, 12)
		14: XmmMem	constructor(put_in_xmm_mem, [12], 1)
		15: Xmm	constructor(x64_cvtdq2pd, [14], 2)
		16: InstOutput	constructor(output_xmm, [15], 3)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		9:	some
		11:	some
		13:	const_prim(I32X4)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3417
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(fcvt_from_sint, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Xmm	constructor(put_in_xmm, [4], 1)
		7: Type	const_prim(F64X2)
		8: Xmm	constructor(xmm_zero, [7], 2)
		9: Gpr	constructor(x64_movq_to_gpr, [6], 3)
		10: GprMem	constructor(gpr_to_gpr_mem, [9], 4)
		11: Type	const_prim(I64)
		12: Xmm	constructor(x64_cvtsi2sd, [11, 8, 10], 5)
		13: XmmMem	constructor(xmm_to_xmm_mem, [6], 6)
		14: u8	const_int(238, u8)
		15: Xmm	constructor(x64_pshufd, [13, 14], 7)
		16: Gpr	constructor(x64_movq_to_gpr, [15], 8)
		17: GprMem	constructor(gpr_to_gpr_mem, [16], 9)
		18: Xmm	constructor(x64_cvtsi2sd, [11, 8, 17], 10)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 11)
		20: Xmm	constructor(x64_unpcklpd, [12, 19], 12)
		21: InstOutput	constructor(output_xmm, [20], 13)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3411
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(fcvt_from_sint, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: XmmMem	constructor(put_in_xmm_mem, [4], 1)
		7: Xmm	constructor(x64_cvtdq2ps, [6], 2)
		8: InstOutput	constructor(output_xmm, [7], 3)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3408
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(ty_int, 9)
		11: Type	match_some(10)
		12: Option(Type)	extractor(fits_in_64, 11)
		13: Type	const_prim(F64X2)
		14: Xmm	constructor(xmm_zero, [13], 1)
		15: GprMem	constructor(put_in_gpr_mem, [8], 2)
		16: Type	match_some(12)
		17: Xmm	constructor(x64_cvtsi2sd, [16, 14, 15], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
		12:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3405
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Type	const_prim(F64X2)
		11: Xmm	constructor(xmm_zero, [10], 1)
		12: Type	const_prim(I32)
		13: ExtendKind	make_variant(ExtendKind::Sign, [])
		14: Gpr	constructor(extend_to_gpr, [8, 12, 13], 2)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 3)
		16: Xmm	constructor(x64_cvtsi2sd, [12, 11, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		9:	const_prim(I16)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3402
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Type	const_prim(F64X2)
		11: Xmm	constructor(xmm_zero, [10], 1)
		12: Type	const_prim(I32)
		13: ExtendKind	make_variant(ExtendKind::Sign, [])
		14: Gpr	constructor(extend_to_gpr, [8, 12, 13], 2)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 3)
		16: Xmm	constructor(x64_cvtsi2sd, [12, 11, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		9:	const_prim(I8)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3399
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(ty_int, 9)
		11: Type	match_some(10)
		12: Option(Type)	extractor(fits_in_64, 11)
		13: Type	const_prim(F32X4)
		14: Xmm	constructor(xmm_zero, [13], 1)
		15: GprMem	constructor(put_in_gpr_mem, [8], 2)
		16: Type	match_some(12)
		17: Xmm	constructor(x64_cvtsi2ss, [16, 14, 15], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
		12:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3396
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Type	const_prim(F32X4)
		11: Xmm	constructor(xmm_zero, [10], 1)
		12: Type	const_prim(I32)
		13: ExtendKind	make_variant(ExtendKind::Sign, [])
		14: Gpr	constructor(extend_to_gpr, [8, 12, 13], 2)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 3)
		16: Xmm	constructor(x64_cvtsi2ss, [12, 11, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		9:	const_prim(I16)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3393
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Type	const_prim(F32X4)
		11: Xmm	constructor(xmm_zero, [10], 1)
		12: Type	const_prim(I32)
		13: ExtendKind	make_variant(ExtendKind::Sign, [])
		14: Gpr	constructor(extend_to_gpr, [8, 12, 13], 2)
		15: GprMem	constructor(gpr_to_gpr_mem, [14], 3)
		16: Xmm	constructor(x64_cvtsi2ss, [12, 11, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		9:	const_prim(I8)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3370
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select_spectre_guard, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: ValueRegs	constructor(put_in_regs, [8], 1)
		11: CC	make_variant(CC::Z, [])
		12: IcmpCondResult	constructor(cmp_zero_i128, [11, 10], 2)
		13: Value	match_tuple(7, 1)
		14: Value	match_tuple(7, 2)
		15: ValueRegs	constructor(select_icmp, [12, 13, 14], 3)
		16: InstOutput	constructor(output, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		9:	const_prim(I128)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3365
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select_spectre_guard, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_64, 9)
		11: Type	match_some(10)
		12: OperandSize	constructor(raw_operand_size_of_type, [11], 1)
		13: Gpr	constructor(put_in_gpr, [8], 2)
		14: GprMemImm	constructor(gpr_to_gpr_mem_imm, [13], 3)
		15: ProducesFlags	constructor(x64_test, [12, 13, 14], 4)
		16: Type	match_tuple(4, 0)
		17: CC	make_variant(CC::NZ, [])
		18: Value	match_tuple(7, 1)
		19: Value	match_tuple(7, 2)
		20: ConsumesFlags	constructor(cmove_from_values, [16, 17, 18, 19], 5)
		21: ValueRegs	constructor(with_flags, [15, 20], 6)
		22: InstOutput	constructor(output, [21], 7)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		10:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3362
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Value))	extractor(select_spectre_guard, 0)
		4: (Value, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((IntCC, Value, Value))	extractor(icmp, 7)
		9: (IntCC, Value, Value)	match_some(8)
		10: IntCC	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Value	match_tuple(9, 2)
		13: IcmpCondResult	constructor(emit_cmp, [10, 11, 12], 1)
		14: Value	match_tuple(4, 1)
		15: Value	match_tuple(4, 2)
		16: ValueRegs	constructor(select_icmp, [13, 14, 15], 2)
		17: InstOutput	constructor(output, [16], 3)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3298
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_return_address, 0)
		4: Reg	constructor(x64_rbp, [], 1)
		5: i32	const_int(8, i32)
		6: MemFlags	constructor(mem_flags_trusted, [], 0)
		7: Amode	make_variant(Amode::ImmReg, [5, 4, 6])
		8: SyntheticAmode	constructor(amode_to_synthetic_amode, [7], 2)
		9: Type	const_prim(I64)
		10: ExtKind	make_variant(ExtKind::None, [])
		11: Reg	constructor(x64_load, [9, 8, 10], 3)
		12: InstOutput	constructor(output_reg, [11], 4)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3295
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_stack_pointer, 0)
		4: Reg	constructor(x64_rsp, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3292
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_frame_pointer, 0)
		4: Reg	constructor(x64_rbp, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3287
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((SigRef, Value, ValueSlice))	extractor(return_call_indirect, 0)
		4: (SigRef, Value, ValueSlice)	match_some(3)
		5: SigRef	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: ValueSlice	match_tuple(4, 2)
		8: InstOutput	constructor(gen_return_call_indirect, [5, 6, 7], 1)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3284
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FuncRef, ValueSlice))	extractor(return_call, 0)
		4: (FuncRef, ValueSlice)	match_some(3)
		5: FuncRef	match_tuple(4, 0)
		6: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 5)
		7: SigRef	match_tuple(6, 0)
		8: ExternalName	match_tuple(6, 1)
		9: RelocDistance	match_tuple(6, 2)
		10: ValueSlice	match_tuple(4, 1)
		11: InstOutput	constructor(gen_return_call, [7, 8, 9, 10], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3279
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((SigRef, Value, ValueSlice))	extractor(call_indirect, 0)
		4: (SigRef, Value, ValueSlice)	match_some(3)
		5: SigRef	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: ValueSlice	match_tuple(4, 2)
		8: InstOutput	constructor(gen_call_indirect, [5, 6, 7], 1)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3276
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FuncRef, ValueSlice))	extractor(call, 0)
		4: (FuncRef, ValueSlice)	match_some(3)
		5: FuncRef	match_tuple(4, 0)
		6: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 5)
		7: SigRef	match_tuple(6, 0)
		8: ExternalName	match_tuple(6, 1)
		9: RelocDistance	match_tuple(6, 2)
		10: ValueSlice	match_tuple(4, 1)
		11: InstOutput	constructor(gen_call, [7, 8, 9, 10], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3270
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: MachAtomicRmwOp	constructor(atomic_rmw_op_to_mach_atomic_rmw_op, [11], 1)
		13: Offset32	constructor(zero_offset, [], 2)
		14: MemFlags	match_tuple(10, 0)
		15: Value	match_tuple(10, 2)
		16: Amode	constructor(to_amode, [14, 15, 13], 3)
		17: SyntheticAmode	constructor(amode_to_synthetic_amode, [16], 4)
		18: Value	match_tuple(10, 3)
		19: Gpr	constructor(put_in_gpr, [18], 5)
		20: Type	match_some(6)
		21: Gpr	constructor(x64_atomic_rmw_seq, [20, 12, 17, 19], 6)
		22: InstOutput	constructor(output_gpr, [21], 7)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		7:	some
		9:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3254
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, Value, Value, Value))	extractor(atomic_cas, 8)
		10: (MemFlags, Value, Value, Value)	match_some(9)
		11: Value	match_tuple(10, 2)
		12: Gpr	constructor(put_in_gpr, [11], 1)
		13: Value	match_tuple(10, 3)
		14: Gpr	constructor(put_in_gpr, [13], 2)
		15: Offset32	constructor(zero_offset, [], 3)
		16: MemFlags	match_tuple(10, 0)
		17: Value	match_tuple(10, 1)
		18: Amode	constructor(to_amode, [16, 17, 15], 4)
		19: SyntheticAmode	constructor(amode_to_synthetic_amode, [18], 5)
		20: Type	match_some(6)
		21: Gpr	constructor(x64_cmpxchg, [20, 12, 14, 19], 6)
		22: InstOutput	constructor(output_gpr, [21], 7)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		7:	some
		9:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3245
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value))	extractor(atomic_store, 0)
		4: (MemFlags, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Option(Type)	extractor(ty_int, 6)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	match_tuple(4, 0)
		11: Value	match_tuple(4, 2)
		12: Amode	constructor(to_amode, [10, 11, 9], 2)
		13: SyntheticAmode	constructor(amode_to_synthetic_amode, [12], 3)
		14: Gpr	constructor(put_in_gpr, [5], 4)
		15: Type	match_some(7)
		16: SideEffectNoResult	constructor(x64_movrm, [15, 13, 14], 5)
		17: SideEffectNoResult	constructor(x64_mfence, [], 6)
		18: SideEffectNoResult	constructor(side_effect_concat, [16, 17], 7)
		19: InstOutput	constructor(side_effect, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		7:	some
		8:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3237
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(atomic_load, 7)
		9: Option(Type)	extractor(ty_int, 5)
		10: Type	match_some(6)
		11: u16	constructor(ty_bits_u16, [10], 0)
		12: u16	const_int(64, u16)
		13: ExtMode	constructor(ext_mode, [11, 12], 1)
		14: Offset32	constructor(zero_offset, [], 2)
		15: (MemFlags, Value)	match_some(8)
		16: MemFlags	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Amode	constructor(to_amode, [16, 17, 14], 3)
		19: GprMem	constructor(amode_to_gpr_mem, [18], 4)
		20: Gpr	constructor(x64_movzx, [13, 19], 5)
		21: InstOutput	constructor(output_gpr, [20], 6)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3235
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(atomic_load, 6)
		8: Offset32	constructor(zero_offset, [], 1)
		9: (MemFlags, Value)	match_some(7)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Amode	constructor(to_amode, [10, 11, 8], 2)
		13: Reg	constructor(x64_mov, [12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3223
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(GlobalValue)	extractor(symbol_value, 0)
		4: GlobalValue	match_some(3)
		5: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 4)
		6: (ExternalName, RelocDistance, i64)	match_some(5)
		7: ExternalName	match_tuple(6, 0)
		8: i64	match_tuple(6, 2)
		9: RelocDistance	match_tuple(6, 1)
		10: Reg	constructor(load_ext_name, [7, 8, 9], 1)
		11: InstOutput	constructor(output_reg, [10], 2)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3218
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(FuncRef)	extractor(func_addr, 0)
		4: FuncRef	match_some(3)
		5: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 4)
		6: ExternalName	match_tuple(5, 1)
		7: i64	const_int(0, i64)
		8: RelocDistance	match_tuple(5, 2)
		9: Reg	constructor(load_ext_name, [6, 7, 8], 1)
		10: InstOutput	constructor(output_reg, [9], 2)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3213
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(fence, 0)
		4: SideEffectNoResult	constructor(x64_mfence, [], 1)
		5: InstOutput	constructor(side_effect, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3198
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(bxor, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 0)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_xor_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3184
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(bxor, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 0)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 1)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_xor_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3170
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(bor, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 0)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_or_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3156
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(bor, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 0)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 1)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_or_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3142
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(band, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 0)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_and_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3128
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(band, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 0)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 1)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_and_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3114
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(isub, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 0)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 1)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_sub_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3100
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(iadd, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 0)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_add_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3086
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(ty_32_or_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option((Value, Value))	extractor(iadd, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 0)
		16: Option(SinkableLoad)	extractor(sinkable_load, 15)
		17: Option(Inst)	extractor(def_inst, 15)
		18: Inst	match_some(17)
		19: Option((MemFlags, Value, Offset32))	extractor(load, 18)
		20: MemFlags	match_tuple(4, 0)
		21: (MemFlags, Value, Offset32)	match_some(19)
		22: MemFlags	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Value	match_tuple(4, 2)
		25: Offset32	match_tuple(21, 2)
		26: Offset32	match_tuple(4, 3)
		27: SinkableLoad	match_some(16)
		28: RegMemImm	constructor(sink_load_to_reg_mem_imm, [27], 1)
		29: Amode	constructor(to_amode, [20, 23, 25], 2)
		30: Value	match_tuple(14, 1)
		31: Gpr	constructor(put_in_gpr, [30], 3)
		32: Type	match_some(11)
		33: SideEffectNoResult	constructor(x64_add_mem, [32, 29, 31], 4)
		34: InstOutput	constructor(side_effect, [33], 5)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		16:	some
		17:	some
		19:	some
	]
	equals = [
		22 == 20
		24 == 23
		26 == 25
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3075
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		5: (MemFlags, Value, Value, Offset32)	match_some(4)
		6: Value	match_tuple(5, 1)
		7: Option(Inst)	extractor(def_inst, 6)
		8: Inst	match_some(7)
		9: Option((Type, Inst))	extractor(has_type, 8)
		10: (Type, Inst)	match_some(9)
		11: Type	match_tuple(10, 0)
		12: Inst	match_tuple(10, 1)
		13: Option((Value, Uimm8))	extractor(extractlane, 12)
		14: MemFlags	match_tuple(5, 0)
		15: Value	match_tuple(5, 2)
		16: Offset32	match_tuple(5, 3)
		17: Amode	constructor(to_amode, [14, 15, 16], 1)
		18: SyntheticAmode	constructor(amode_to_synthetic_amode, [17], 2)
		19: (Value, Uimm8)	match_some(13)
		20: Value	match_tuple(19, 0)
		21: Xmm	constructor(put_in_xmm, [20], 3)
		22: Uimm8	match_tuple(19, 1)
		23: u8	extractor(u8_from_uimm8, 22)
		24: SideEffectNoResult	constructor(x64_pextrq_store, [18, 21, 23], 4)
		25: InstOutput	constructor(side_effect, [24], 5)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		9:	some
		11:	const_prim(I64)
		13:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3068
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		5: (MemFlags, Value, Value, Offset32)	match_some(4)
		6: Value	match_tuple(5, 1)
		7: Option(Inst)	extractor(def_inst, 6)
		8: Inst	match_some(7)
		9: Option((Type, Inst))	extractor(has_type, 8)
		10: (Type, Inst)	match_some(9)
		11: Type	match_tuple(10, 0)
		12: Inst	match_tuple(10, 1)
		13: Option((Value, Uimm8))	extractor(extractlane, 12)
		14: MemFlags	match_tuple(5, 0)
		15: Value	match_tuple(5, 2)
		16: Offset32	match_tuple(5, 3)
		17: Amode	constructor(to_amode, [14, 15, 16], 1)
		18: SyntheticAmode	constructor(amode_to_synthetic_amode, [17], 2)
		19: (Value, Uimm8)	match_some(13)
		20: Value	match_tuple(19, 0)
		21: Xmm	constructor(put_in_xmm, [20], 3)
		22: Uimm8	match_tuple(19, 1)
		23: u8	extractor(u8_from_uimm8, 22)
		24: SideEffectNoResult	constructor(x64_pextrd_store, [18, 21, 23], 4)
		25: InstOutput	constructor(side_effect, [24], 5)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		9:	some
		11:	const_prim(I32)
		13:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3061
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		5: (MemFlags, Value, Value, Offset32)	match_some(4)
		6: Value	match_tuple(5, 1)
		7: Option(Inst)	extractor(def_inst, 6)
		8: Inst	match_some(7)
		9: Option((Type, Inst))	extractor(has_type, 8)
		10: (Type, Inst)	match_some(9)
		11: Type	match_tuple(10, 0)
		12: Inst	match_tuple(10, 1)
		13: Option((Value, Uimm8))	extractor(extractlane, 12)
		14: MemFlags	match_tuple(5, 0)
		15: Value	match_tuple(5, 2)
		16: Offset32	match_tuple(5, 3)
		17: Amode	constructor(to_amode, [14, 15, 16], 1)
		18: SyntheticAmode	constructor(amode_to_synthetic_amode, [17], 2)
		19: (Value, Uimm8)	match_some(13)
		20: Value	match_tuple(19, 0)
		21: Xmm	constructor(put_in_xmm, [20], 3)
		22: Uimm8	match_tuple(19, 1)
		23: u8	extractor(u8_from_uimm8, 22)
		24: SideEffectNoResult	constructor(x64_pextrw_store, [18, 21, 23], 4)
		25: InstOutput	constructor(side_effect, [24], 5)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		9:	some
		11:	const_prim(I16)
		13:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3054
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		5: (MemFlags, Value, Value, Offset32)	match_some(4)
		6: Value	match_tuple(5, 1)
		7: Option(Inst)	extractor(def_inst, 6)
		8: Inst	match_some(7)
		9: Option((Type, Inst))	extractor(has_type, 8)
		10: (Type, Inst)	match_some(9)
		11: Type	match_tuple(10, 0)
		12: Inst	match_tuple(10, 1)
		13: Option((Value, Uimm8))	extractor(extractlane, 12)
		14: MemFlags	match_tuple(5, 0)
		15: Value	match_tuple(5, 2)
		16: Offset32	match_tuple(5, 3)
		17: Amode	constructor(to_amode, [14, 15, 16], 1)
		18: SyntheticAmode	constructor(amode_to_synthetic_amode, [17], 2)
		19: (Value, Uimm8)	match_some(13)
		20: Value	match_tuple(19, 0)
		21: Xmm	constructor(put_in_xmm, [20], 3)
		22: Uimm8	match_tuple(19, 1)
		23: u8	extractor(u8_from_uimm8, 22)
		24: SideEffectNoResult	constructor(x64_pextrb_store, [18, 21, 23], 4)
		25: InstOutput	constructor(side_effect, [24], 5)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	some
		9:	some
		11:	const_prim(I8)
		13:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3048
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Inst	match_tuple(9, 1)
		12: Option((Value, Uimm8))	extractor(extractlane, 11)
		13: (Value, Uimm8)	match_some(12)
		14: Uimm8	match_tuple(13, 1)
		15: u8	extractor(u8_from_uimm8, 14)
		16: MemFlags	match_tuple(4, 0)
		17: Value	match_tuple(4, 2)
		18: Offset32	match_tuple(4, 3)
		19: Amode	constructor(to_amode, [16, 17, 18], 1)
		20: SyntheticAmode	constructor(amode_to_synthetic_amode, [19], 2)
		21: Value	match_tuple(13, 0)
		22: Xmm	constructor(put_in_xmm, [21], 3)
		23: SideEffectNoResult	constructor(x64_movsd_store, [20, 22], 4)
		24: InstOutput	constructor(side_effect, [23], 5)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(F64)
		12:	some
		15:	const_int(0)
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3042
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Inst	match_tuple(9, 1)
		12: Option((Value, Uimm8))	extractor(extractlane, 11)
		13: (Value, Uimm8)	match_some(12)
		14: Uimm8	match_tuple(13, 1)
		15: u8	extractor(u8_from_uimm8, 14)
		16: MemFlags	match_tuple(4, 0)
		17: Value	match_tuple(4, 2)
		18: Offset32	match_tuple(4, 3)
		19: Amode	constructor(to_amode, [16, 17, 18], 1)
		20: SyntheticAmode	constructor(amode_to_synthetic_amode, [19], 2)
		21: Value	match_tuple(13, 0)
		22: Xmm	constructor(put_in_xmm, [21], 3)
		23: SideEffectNoResult	constructor(x64_movss_store, [20, 22], 4)
		24: InstOutput	constructor(side_effect, [23], 5)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(F32)
		12:	some
		15:	const_int(0)
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3023
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: ValueRegs	constructor(put_in_regs, [5], 1)
		8: usize	const_int(0, usize)
		9: Gpr	constructor(value_regs_get_gpr, [7, 8], 2)
		10: usize	const_int(1, usize)
		11: Gpr	constructor(value_regs_get_gpr, [7, 10], 3)
		12: MemFlags	match_tuple(4, 0)
		13: Value	match_tuple(4, 2)
		14: Offset32	match_tuple(4, 3)
		15: Amode	constructor(to_amode, [12, 13, 14], 4)
		16: i32	const_int(8, i32)
		17: Amode	constructor(amode_offset, [15, 16], 5)
		18: SyntheticAmode	constructor(amode_to_synthetic_amode, [15], 6)
		19: Type	const_prim(I64)
		20: SideEffectNoResult	constructor(x64_movrm, [19, 18, 9], 7)
		21: SyntheticAmode	constructor(amode_to_synthetic_amode, [17], 8)
		22: SideEffectNoResult	constructor(x64_movrm, [19, 21, 11], 9)
		23: SideEffectNoResult	constructor(side_effect_concat, [20, 22], 10)
		24: InstOutput	constructor(side_effect, [23], 11)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3015
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_vec128_int, 6)
		8: MemFlags	match_tuple(4, 0)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: Amode	constructor(to_amode, [8, 9, 10], 1)
		12: SyntheticAmode	constructor(amode_to_synthetic_amode, [11], 2)
		13: Xmm	constructor(put_in_xmm, [5], 3)
		14: SideEffectNoResult	constructor(x64_movdqu_store, [12, 13], 4)
		15: InstOutput	constructor(side_effect, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 3007
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: MemFlags	match_tuple(4, 0)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: Amode	constructor(to_amode, [7, 8, 9], 1)
		11: SyntheticAmode	constructor(amode_to_synthetic_amode, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: SideEffectNoResult	constructor(x64_movupd_store, [11, 12], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(F64X2)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2999
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: MemFlags	match_tuple(4, 0)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: Amode	constructor(to_amode, [7, 8, 9], 1)
		11: SyntheticAmode	constructor(amode_to_synthetic_amode, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: SideEffectNoResult	constructor(x64_movups_store, [11, 12], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(F32X4)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2991
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: MemFlags	match_tuple(4, 0)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: Amode	constructor(to_amode, [7, 8, 9], 1)
		11: SyntheticAmode	constructor(amode_to_synthetic_amode, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: SideEffectNoResult	constructor(x64_movsd_store, [11, 12], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(F64)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2983
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: MemFlags	match_tuple(4, 0)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: Amode	constructor(to_amode, [7, 8, 9], 1)
		11: SyntheticAmode	constructor(amode_to_synthetic_amode, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: SideEffectNoResult	constructor(x64_movss_store, [11, 12], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(F32)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2978
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Option(Inst)	extractor(def_inst, 5)
		7: Inst	match_some(6)
		8: Option((Type, Inst))	extractor(has_type, 7)
		9: (Type, Inst)	match_some(8)
		10: Type	match_tuple(9, 0)
		11: Option(Type)	extractor(fits_in_64, 10)
		12: Inst	match_tuple(9, 1)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Imm64	match_some(13)
		15: Option(i32)	extractor(simm32, 14)
		16: MemFlags	match_tuple(4, 0)
		17: Value	match_tuple(4, 2)
		18: Offset32	match_tuple(4, 3)
		19: Amode	constructor(to_amode, [16, 17, 18], 1)
		20: SyntheticAmode	constructor(amode_to_synthetic_amode, [19], 2)
		21: Type	match_some(11)
		22: i32	match_some(15)
		23: SideEffectNoResult	constructor(x64_movimm_m, [21, 20, 22], 3)
		24: InstOutput	constructor(side_effect, [23], 4)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		15:	some
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2973
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore32, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: MemFlags	match_tuple(4, 0)
		6: Value	match_tuple(4, 2)
		7: Offset32	match_tuple(4, 3)
		8: Amode	constructor(to_amode, [5, 6, 7], 1)
		9: SyntheticAmode	constructor(amode_to_synthetic_amode, [8], 2)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 3)
		12: Type	const_prim(I32)
		13: SideEffectNoResult	constructor(x64_movrm, [12, 9, 11], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2970
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore16, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: MemFlags	match_tuple(4, 0)
		6: Value	match_tuple(4, 2)
		7: Offset32	match_tuple(4, 3)
		8: Amode	constructor(to_amode, [5, 6, 7], 1)
		9: SyntheticAmode	constructor(amode_to_synthetic_amode, [8], 2)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 3)
		12: Type	const_prim(I16)
		13: SideEffectNoResult	constructor(x64_movrm, [12, 9, 11], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2967
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore8, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: MemFlags	match_tuple(4, 0)
		6: Value	match_tuple(4, 2)
		7: Offset32	match_tuple(4, 3)
		8: Amode	constructor(to_amode, [5, 6, 7], 1)
		9: SyntheticAmode	constructor(amode_to_synthetic_amode, [8], 2)
		10: Value	match_tuple(4, 1)
		11: Gpr	constructor(put_in_gpr, [10], 3)
		12: Type	const_prim(I8)
		13: SideEffectNoResult	constructor(x64_movrm, [12, 9, 11], 4)
		14: InstOutput	constructor(side_effect, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2959
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(is_gpr_type, 6)
		8: MemFlags	match_tuple(4, 0)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: Amode	constructor(to_amode, [8, 9, 10], 1)
		12: SyntheticAmode	constructor(amode_to_synthetic_amode, [11], 2)
		13: Gpr	constructor(put_in_gpr, [5], 3)
		14: Type	match_some(7)
		15: SideEffectNoResult	constructor(x64_movrm, [14, 12, 13], 4)
		16: InstOutput	constructor(side_effect, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2953
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(uload32x2, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I64X2)
		16: Xmm	constructor(lower_uwiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2951
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(sload32x2, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I64X2)
		16: Xmm	constructor(lower_swiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2949
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(uload16x4, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I32X4)
		16: Xmm	constructor(lower_uwiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2947
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(sload16x4, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I32X4)
		16: Xmm	constructor(lower_swiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2945
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(uload8x8, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I16X8)
		16: Xmm	constructor(lower_uwiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2943
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(sload8x8, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: GprMem	constructor(amode_to_gpr_mem, [12], 2)
		14: Xmm	constructor(x64_movq_to_xmm, [13], 3)
		15: Type	const_prim(I16X8)
		16: Xmm	constructor(lower_swiden_low, [15, 14], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2939
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload32x2, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovzxdq, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2936
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload32x2, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovsxdq, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2933
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload16x4, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovzxwd, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2930
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload16x4, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovsxwd, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2927
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload8x8, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovzxbw, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2924
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload8x8, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_pmovsxbw, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2914
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: i32	const_int(8, i32)
		14: Amode	constructor(amode_offset, [12, 13], 2)
		15: Reg	constructor(x64_mov, [12], 3)
		16: Reg	constructor(x64_mov, [14], 4)
		17: ValueRegs	constructor(value_regs, [15, 16], 5)
		18: InstOutput	constructor(output, [17], 6)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2910
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(load, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: XmmMem	constructor(amode_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_movdqu_load, [14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2908
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: SyntheticAmode	constructor(amode_to_synthetic_amode, [12], 2)
		14: Xmm	constructor(x64_movupd_load, [13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2906
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: SyntheticAmode	constructor(amode_to_synthetic_amode, [12], 2)
		14: Xmm	constructor(x64_movups_load, [13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2904
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: SyntheticAmode	constructor(amode_to_synthetic_amode, [12], 2)
		14: Xmm	constructor(x64_movsd_load, [13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2902
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: MemFlags	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Offset32	match_tuple(8, 2)
		12: Amode	constructor(to_amode, [9, 10, 11], 1)
		13: SyntheticAmode	constructor(amode_to_synthetic_amode, [12], 2)
		14: Xmm	constructor(x64_movss_load, [13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2895
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload32, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::LQ, [])
		16: Gpr	constructor(x64_movsx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2893
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload32, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::LQ, [])
		16: Gpr	constructor(x64_movzx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2891
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload16, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::WQ, [])
		16: Gpr	constructor(x64_movsx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2889
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload16, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::WQ, [])
		16: Gpr	constructor(x64_movzx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2887
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(sload8, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::BQ, [])
		16: Gpr	constructor(x64_movsx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2885
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(is_gpr_type, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(uload8, 7)
		9: (MemFlags, Value, Offset32)	match_some(8)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: GprMem	constructor(amode_to_gpr_mem, [13], 2)
		15: ExtMode	make_variant(ExtMode::BQ, [])
		16: Gpr	constructor(x64_movzx, [15, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2880
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((MemFlags, Value, Offset32))	extractor(load, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_int_ref_64, 7)
		9: (MemFlags, Value, Offset32)	match_some(6)
		10: MemFlags	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Offset32	match_tuple(9, 2)
		13: Amode	constructor(to_amode, [10, 11, 12], 1)
		14: Reg	constructor(x64_mov, [13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2876
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Option(Type)	extractor(is_gpr_type, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, Value, Offset32))	extractor(load, 8)
		10: Type	match_some(6)
		11: u16	constructor(ty_bits_u16, [10], 0)
		12: u16	const_int(64, u16)
		13: ExtMode	constructor(ext_mode, [11, 12], 1)
		14: (MemFlags, Value, Offset32)	match_some(9)
		15: MemFlags	match_tuple(14, 0)
		16: Value	match_tuple(14, 1)
		17: Offset32	match_tuple(14, 2)
		18: Amode	constructor(to_amode, [15, 16, 17], 2)
		19: GprMem	constructor(amode_to_gpr_mem, [18], 3)
		20: Gpr	constructor(x64_movzx, [13, 19], 4)
		21: InstOutput	constructor(output_gpr, [20], 5)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		7:	some
		9:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2838
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(fma, 5)
		7: bool	constructor(use_fma, [], 0)
		8: Type	match_tuple(4, 0)
		9: (Value, Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Value	match_tuple(9, 2)
		13: Xmm	constructor(fmadd, [8, 10, 11, 12], 1)
		14: InstOutput	constructor(output_xmm, [13], 2)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_prim(true)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2822
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(fma, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Value	match_tuple(8, 2)
		14: Xmm	constructor(put_in_xmm, [13], 3)
		15: Reg	constructor(xmm_to_reg, [10], 4)
		16: Reg	constructor(xmm_to_reg, [12], 5)
		17: Reg	constructor(xmm_to_reg, [14], 6)
		18: LibCall	make_variant(LibCall::FmaF64, [])
		19: Reg	constructor(libcall_3, [18, 15, 16, 17], 7)
		20: Xmm	constructor(xmm_new, [19], 8)
		21: XmmMem	constructor(xmm_to_xmm_mem, [10], 9)
		22: u8	const_int(238, u8)
		23: Xmm	constructor(x64_pshufd, [21, 22], 10)
		24: Reg	constructor(xmm_to_reg, [23], 11)
		25: XmmMem	constructor(xmm_to_xmm_mem, [12], 12)
		26: Xmm	constructor(x64_pshufd, [25, 22], 13)
		27: Reg	constructor(xmm_to_reg, [26], 14)
		28: XmmMem	constructor(xmm_to_xmm_mem, [14], 15)
		29: Xmm	constructor(x64_pshufd, [28, 22], 16)
		30: Reg	constructor(xmm_to_reg, [29], 17)
		31: Reg	constructor(libcall_3, [18, 24, 27, 30], 18)
		32: Xmm	constructor(xmm_new, [31], 19)
		33: XmmMem	constructor(xmm_to_xmm_mem, [32], 20)
		34: Xmm	constructor(x64_movlhps, [20, 33], 21)
		35: InstOutput	constructor(output_xmm, [34], 22)
		36: Option(InstOutput)	some(35)
		37: Option(Option(InstOutput))	some(36)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 37
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2798
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(fma, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Value	match_tuple(8, 2)
		14: Xmm	constructor(put_in_xmm, [13], 3)
		15: Reg	constructor(xmm_to_reg, [10], 4)
		16: Reg	constructor(xmm_to_reg, [12], 5)
		17: Reg	constructor(xmm_to_reg, [14], 6)
		18: LibCall	make_variant(LibCall::FmaF32, [])
		19: Reg	constructor(libcall_3, [18, 15, 16, 17], 7)
		20: Xmm	constructor(xmm_new, [19], 8)
		21: XmmMem	constructor(xmm_to_xmm_mem, [10], 9)
		22: u8	const_int(1, u8)
		23: Xmm	constructor(x64_pshufd, [21, 22], 10)
		24: Reg	constructor(xmm_to_reg, [23], 11)
		25: XmmMem	constructor(xmm_to_xmm_mem, [12], 12)
		26: Xmm	constructor(x64_pshufd, [25, 22], 13)
		27: Reg	constructor(xmm_to_reg, [26], 14)
		28: XmmMem	constructor(xmm_to_xmm_mem, [14], 15)
		29: Xmm	constructor(x64_pshufd, [28, 22], 16)
		30: Reg	constructor(xmm_to_reg, [29], 17)
		31: Reg	constructor(libcall_3, [18, 24, 27, 30], 18)
		32: Xmm	constructor(xmm_new, [31], 19)
		33: XmmMem	constructor(xmm_to_xmm_mem, [10], 20)
		34: u8	const_int(2, u8)
		35: Xmm	constructor(x64_pshufd, [33, 34], 21)
		36: Reg	constructor(xmm_to_reg, [35], 22)
		37: XmmMem	constructor(xmm_to_xmm_mem, [12], 23)
		38: Xmm	constructor(x64_pshufd, [37, 34], 24)
		39: Reg	constructor(xmm_to_reg, [38], 25)
		40: XmmMem	constructor(xmm_to_xmm_mem, [14], 26)
		41: Xmm	constructor(x64_pshufd, [40, 34], 27)
		42: Reg	constructor(xmm_to_reg, [41], 28)
		43: Reg	constructor(libcall_3, [18, 36, 39, 42], 29)
		44: Xmm	constructor(xmm_new, [43], 30)
		45: XmmMem	constructor(xmm_to_xmm_mem, [10], 31)
		46: u8	const_int(3, u8)
		47: Xmm	constructor(x64_pshufd, [45, 46], 32)
		48: Reg	constructor(xmm_to_reg, [47], 33)
		49: XmmMem	constructor(xmm_to_xmm_mem, [12], 34)
		50: Xmm	constructor(x64_pshufd, [49, 46], 35)
		51: Reg	constructor(xmm_to_reg, [50], 36)
		52: XmmMem	constructor(xmm_to_xmm_mem, [14], 37)
		53: Xmm	constructor(x64_pshufd, [52, 46], 38)
		54: Reg	constructor(xmm_to_reg, [53], 39)
		55: Reg	constructor(libcall_3, [18, 48, 51, 54], 40)
		56: Xmm	constructor(xmm_new, [55], 41)
		57: Xmm	constructor(f32x4_insertlane, [20, 32, 22], 42)
		58: Xmm	constructor(f32x4_insertlane, [57, 44, 34], 43)
		59: Xmm	constructor(f32x4_insertlane, [58, 56, 46], 44)
		60: InstOutput	constructor(output_xmm, [59], 45)
		61: Option(InstOutput)	some(60)
		62: Option(Option(InstOutput))	some(61)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 62
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2795
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(fma, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Value	match_tuple(8, 2)
		14: Reg	constructor(put_in_reg, [13], 3)
		15: LibCall	make_variant(LibCall::FmaF64, [])
		16: Reg	constructor(libcall_3, [15, 10, 12, 14], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2793
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(fma, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Value	match_tuple(8, 2)
		14: Reg	constructor(put_in_reg, [13], 3)
		15: LibCall	make_variant(LibCall::FmaF32, [])
		16: Reg	constructor(libcall_3, [15, 10, 12, 14], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2744
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmax, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_maxpd, [10, 12], 3)
		14: Xmm	constructor(put_in_xmm, [11], 4)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 5)
		16: Xmm	constructor(x64_maxpd, [14, 15], 6)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		18: Xmm	constructor(x64_xorpd, [13, 17], 8)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 9)
		20: Xmm	constructor(x64_orpd, [13, 19], 10)
		21: XmmMem	constructor(xmm_to_xmm_mem, [18], 11)
		22: Xmm	constructor(x64_subpd, [20, 21], 12)
		23: XmmMem	constructor(xmm_to_xmm_mem, [20], 13)
		24: FcmpImm	make_variant(FcmpImm::Unordered, [])
		25: Xmm	constructor(x64_cmppd, [20, 23, 24], 14)
		26: u32	const_int(13, u32)
		27: XmmMemImm	constructor(xmi_imm, [26], 15)
		28: Xmm	constructor(x64_psrlq, [25, 27], 16)
		29: XmmMem	constructor(xmm_to_xmm_mem, [22], 17)
		30: Xmm	constructor(x64_andnpd, [28, 29], 18)
		31: InstOutput	constructor(output_xmm, [30], 19)
		32: Option(InstOutput)	some(31)
		33: Option(Option(InstOutput))	some(32)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 33
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2701
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmax, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_maxps, [10, 12], 3)
		14: Xmm	constructor(put_in_xmm, [11], 4)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 5)
		16: Xmm	constructor(x64_maxps, [14, 15], 6)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		18: Xmm	constructor(x64_xorps, [13, 17], 8)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 9)
		20: Xmm	constructor(x64_orps, [13, 19], 10)
		21: XmmMem	constructor(xmm_to_xmm_mem, [18], 11)
		22: Xmm	constructor(x64_subps, [20, 21], 12)
		23: XmmMem	constructor(xmm_to_xmm_mem, [20], 13)
		24: FcmpImm	make_variant(FcmpImm::Unordered, [])
		25: Xmm	constructor(x64_cmpps, [20, 23, 24], 14)
		26: u32	const_int(10, u32)
		27: XmmMemImm	constructor(xmi_imm, [26], 15)
		28: Xmm	constructor(x64_psrld, [25, 27], 16)
		29: XmmMem	constructor(xmm_to_xmm_mem, [22], 17)
		30: Xmm	constructor(x64_andnps, [28, 29], 18)
		31: InstOutput	constructor(output_xmm, [30], 19)
		32: Option(InstOutput)	some(31)
		33: Option(Option(InstOutput))	some(32)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 33
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2695
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmax, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Type	const_prim(F64)
		14: bool	const_prim(false)
		15: Xmm	constructor(xmm_min_max_seq, [13, 14, 10, 12], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2693
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmax, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Type	const_prim(F32)
		14: bool	const_prim(false)
		15: Xmm	constructor(xmm_min_max_seq, [13, 14, 10, 12], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2681
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmin, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_minpd, [10, 12], 3)
		14: Xmm	constructor(put_in_xmm, [11], 4)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 5)
		16: Xmm	constructor(x64_minpd, [14, 15], 6)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		18: Xmm	constructor(x64_orpd, [13, 17], 8)
		19: XmmMem	constructor(xmm_to_xmm_mem, [16], 9)
		20: FcmpImm	make_variant(FcmpImm::Unordered, [])
		21: Xmm	constructor(x64_cmppd, [13, 19, 20], 10)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 11)
		23: Xmm	constructor(x64_orpd, [18, 22], 12)
		24: u32	const_int(13, u32)
		25: XmmMemImm	constructor(xmi_imm, [24], 13)
		26: Xmm	constructor(x64_psrlq, [21, 25], 14)
		27: XmmMem	constructor(xmm_to_xmm_mem, [23], 15)
		28: Xmm	constructor(x64_andnpd, [26, 27], 16)
		29: InstOutput	constructor(output_xmm, [28], 17)
		30: Option(InstOutput)	some(29)
		31: Option(Option(InstOutput))	some(30)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 31
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2638
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmin, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_minps, [10, 12], 3)
		14: Xmm	constructor(put_in_xmm, [11], 4)
		15: XmmMem	constructor(put_in_xmm_mem, [9], 5)
		16: Xmm	constructor(x64_minps, [14, 15], 6)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		18: Xmm	constructor(x64_orps, [13, 17], 8)
		19: XmmMem	constructor(xmm_to_xmm_mem, [16], 9)
		20: FcmpImm	make_variant(FcmpImm::Unordered, [])
		21: Xmm	constructor(x64_cmpps, [18, 19, 20], 10)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 11)
		23: Xmm	constructor(x64_orps, [18, 22], 12)
		24: u32	const_int(10, u32)
		25: XmmMemImm	constructor(xmi_imm, [24], 13)
		26: Xmm	constructor(x64_psrld, [21, 25], 14)
		27: XmmMem	constructor(xmm_to_xmm_mem, [23], 15)
		28: Xmm	constructor(x64_andnps, [26, 27], 16)
		29: InstOutput	constructor(output_xmm, [28], 17)
		30: Option(InstOutput)	some(29)
		31: Option(Option(InstOutput))	some(30)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 31
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2623
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmin, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Type	const_prim(F64)
		14: bool	const_prim(true)
		15: Xmm	constructor(xmm_min_max_seq, [13, 14, 10, 12], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2621
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmin, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: Type	const_prim(F32)
		14: bool	const_prim(true)
		15: Xmm	constructor(xmm_min_max_seq, [13, 14, 10, 12], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2616
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fvdemote, 6)
		8: Value	match_some(7)
		9: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		10: Xmm	constructor(x64_cvtpd2ps, [9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2612
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fdemote, 6)
		8: Type	const_prim(F32X4)
		9: Xmm	constructor(xmm_zero, [8], 1)
		10: Value	match_some(7)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_cvtsd2ss, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2608
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fvpromote_low, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: XmmMem	constructor(xmm_to_xmm_mem, [9], 2)
		11: Xmm	constructor(x64_cvtps2pd, [10], 3)
		12: InstOutput	constructor(output_xmm, [11], 4)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2604
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fpromote, 6)
		8: Type	const_prim(F64X2)
		9: Xmm	constructor(xmm_zero, [8], 1)
		10: Value	match_some(7)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_cvtss2sd, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2600
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sqrt, 6)
		8: Value	match_some(7)
		9: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		10: Xmm	constructor(x64_sqrtpd, [9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2598
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sqrt, 6)
		8: Value	match_some(7)
		9: XmmMem	constructor(put_in_xmm_mem, [8], 1)
		10: Xmm	constructor(x64_sqrtps, [9], 2)
		11: InstOutput	constructor(output_xmm, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2596
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sqrt, 6)
		8: Type	const_prim(F64X2)
		9: Xmm	constructor(xmm_zero, [8], 1)
		10: Value	match_some(7)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_sqrtsd, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2594
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sqrt, 6)
		8: Type	const_prim(F32X4)
		9: Xmm	constructor(xmm_zero, [8], 1)
		10: Value	match_some(7)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_sqrtss, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2590
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fdiv, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_divpd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2588
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fdiv, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_divps, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2586
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fdiv, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_divsd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2584
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fdiv, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_divss, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2579
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_mulpd, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2577
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_mulps, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2575
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_mulsd, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2573
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_mulss, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2568
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_mulpd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2566
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_mulps, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2564
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_mulsd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2562
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fmul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_mulss, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2557
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fsub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_subpd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2555
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fsub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_subps, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2553
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fsub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_subsd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2551
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fsub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_subss, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2546
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_addpd, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2544
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_addps, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2542
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_addsd, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2540
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 1)
		13: SinkableLoad	match_some(10)
		14: XmmMem	constructor(sink_load_to_xmm_mem, [13], 2)
		15: Xmm	constructor(x64_addss, [12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2535
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_addpd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2533
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_addps, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2531
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_addsd, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2529
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(fadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_addss, [10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2523
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(x86_pmaddubsw, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 0)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_pmaddubsw, [11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		6:	const_prim(true)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2518
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(debugtrap, 0)
		4: SideEffectNoResult	constructor(x64_hlt, [], 1)
		5: InstOutput	constructor(side_effect, [4], 2)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2513
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ireduce, 7)
		9: Value	match_some(8)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2507
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(ireduce, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Type	extractor(value_type, 8)
		10: InstOutput	constructor(output_value, [8], 1)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
		6:	some
	]
	equals = [
		9 == 7
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2501
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(sextend, 7)
		9: Value	match_some(8)
		10: Type	const_prim(I32)
		11: ExtendKind	make_variant(ExtendKind::Sign, [])
		12: Gpr	constructor(extend_to_gpr, [9, 10, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2496
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sextend, 6)
		8: Value	match_some(7)
		9: Type	const_prim(I64)
		10: ExtendKind	make_variant(ExtendKind::Sign, [])
		11: Gpr	constructor(extend_to_gpr, [8, 9, 10], 1)
		12: InstOutput	constructor(output_gpr, [11], 2)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2490
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sextend, 6)
		8: Value	match_some(7)
		9: Type	const_prim(I64)
		10: ExtendKind	make_variant(ExtendKind::Sign, [])
		11: Gpr	constructor(extend_to_gpr, [8, 9, 10], 1)
		12: u8	const_int(63, u8)
		13: Imm8Reg	make_variant(Imm8Reg::Imm8, [12])
		14: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [13], 2)
		15: Gpr	constructor(x64_sar, [9, 11, 14], 3)
		16: Reg	constructor(gpr_to_reg, [11], 4)
		17: Reg	constructor(gpr_to_reg, [15], 5)
		18: ValueRegs	constructor(value_regs, [16, 17], 6)
		19: InstOutput	constructor(output, [18], 7)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2481
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(uextend, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(fits_in_32, 7)
		9: Value	match_some(6)
		10: Type	const_prim(I32)
		11: ExtendKind	make_variant(ExtendKind::Zero, [])
		12: Gpr	constructor(extend_to_gpr, [9, 10, 11], 1)
		13: InstOutput	constructor(output_gpr, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2476
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uextend, 6)
		8: Value	match_some(7)
		9: Type	const_prim(I64)
		10: ExtendKind	make_variant(ExtendKind::Zero, [])
		11: Gpr	constructor(extend_to_gpr, [8, 9, 10], 1)
		12: InstOutput	constructor(output_gpr, [11], 2)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2472
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uextend, 6)
		8: Value	match_some(7)
		9: Type	const_prim(I64)
		10: ExtendKind	make_variant(ExtendKind::Zero, [])
		11: Gpr	constructor(extend_to_gpr, [8, 9, 10], 1)
		12: Reg	constructor(gpr_to_reg, [11], 2)
		13: u64	const_int(0, u64)
		14: Reg	constructor(imm, [9, 13], 3)
		15: ValueRegs	constructor(value_regs, [12, 14], 4)
		16: InstOutput	constructor(output, [15], 5)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2463
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(is_invalid, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Gpr	constructor(put_in_gpr, [4], 1)
		7: OperandSize	make_variant(OperandSize::Size64, [])
		8: u32	const_int(4294967295, u32)
		9: ProducesFlags	constructor(x64_cmp_imm, [7, 6, 8], 2)
		10: CC	make_variant(CC::Z, [])
		11: ConsumesFlags	constructor(x64_setcc, [10], 3)
		12: ValueRegs	constructor(with_flags, [9, 11], 4)
		13: InstOutput	constructor(output, [12], 5)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(R64)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2455
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(is_null, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Gpr	constructor(put_in_gpr, [4], 1)
		7: OperandSize	make_variant(OperandSize::Size64, [])
		8: u32	const_int(0, u32)
		9: ProducesFlags	constructor(x64_cmp_imm, [7, 6, 8], 2)
		10: CC	make_variant(CC::Z, [])
		11: ConsumesFlags	constructor(x64_setcc, [10], 3)
		12: ValueRegs	constructor(with_flags, [9, 11], 4)
		13: InstOutput	constructor(output, [12], 5)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(R64)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2447
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(1, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: Type	const_prim(I64)
		13: Gpr	constructor(x64_bswap, [12, 11], 3)
		14: Reg	constructor(gpr_to_reg, [13], 4)
		15: ValueRegs	constructor(put_in_regs, [8], 5)
		16: usize	const_int(0, usize)
		17: Gpr	constructor(value_regs_get_gpr, [15, 16], 6)
		18: Gpr	constructor(x64_bswap, [12, 17], 7)
		19: Reg	constructor(gpr_to_reg, [18], 8)
		20: ValueRegs	constructor(value_regs, [14, 19], 9)
		21: InstOutput	constructor(output, [20], 10)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2444
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I64)
		11: Gpr	constructor(x64_bswap, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2441
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Gpr	constructor(x64_bswap, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I32)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2438
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: u8	const_int(8, u8)
		11: Imm8Reg	make_variant(Imm8Reg::Imm8, [10])
		12: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [11], 2)
		13: Type	const_prim(I16)
		14: Gpr	constructor(x64_rotl, [13, 9, 12], 3)
		15: InstOutput	constructor(output_gpr, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2371
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(1, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: Type	const_prim(I64)
		13: Gpr	constructor(do_bitrev64, [12, 11], 3)
		14: Reg	constructor(gpr_to_reg, [13], 4)
		15: ValueRegs	constructor(put_in_regs, [8], 5)
		16: usize	const_int(0, usize)
		17: Gpr	constructor(value_regs_get_gpr, [15, 16], 6)
		18: Gpr	constructor(do_bitrev64, [12, 17], 7)
		19: Reg	constructor(gpr_to_reg, [18], 8)
		20: ValueRegs	constructor(value_regs, [14, 19], 9)
		21: InstOutput	constructor(output, [20], 10)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2368
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I64)
		11: Gpr	constructor(do_bitrev64, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2365
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Gpr	constructor(do_bitrev32, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I32)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2362
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Gpr	constructor(do_bitrev16, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I16)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2359
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Value	match_some(7)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: Type	const_prim(I32)
		11: Gpr	constructor(do_bitrev8, [10, 9], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2345
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: u128	const_int(158798437896437949616241483468158498679, u128)
		9: VCodeConstant	constructor(emit_u128_le_const, [8], 1)
		10: XmmMem	constructor(const_to_xmm_mem, [9], 2)
		11: Value	match_some(7)
		12: Xmm	constructor(put_in_xmm, [11], 3)
		13: u32	const_int(1, u32)
		14: XmmMemImm	constructor(xmi_imm, [13], 4)
		15: Xmm	constructor(x64_psrlq, [12, 14], 5)
		16: Xmm	constructor(x64_pand, [15, 10], 6)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		18: Xmm	constructor(x64_psubb, [12, 17], 8)
		19: XmmMemImm	constructor(xmi_imm, [13], 9)
		20: Xmm	constructor(x64_psrlq, [16, 19], 10)
		21: Xmm	constructor(x64_pand, [20, 10], 11)
		22: XmmMem	constructor(xmm_to_xmm_mem, [21], 12)
		23: Xmm	constructor(x64_psubb, [18, 22], 13)
		24: XmmMemImm	constructor(xmi_imm, [13], 14)
		25: Xmm	constructor(x64_psrlq, [21, 24], 15)
		26: Xmm	constructor(x64_pand, [25, 10], 16)
		27: XmmMem	constructor(xmm_to_xmm_mem, [26], 17)
		28: Xmm	constructor(x64_psubb, [23, 27], 18)
		29: u32	const_int(4, u32)
		30: XmmMemImm	constructor(xmi_imm, [29], 19)
		31: Xmm	constructor(x64_psrlw, [28, 30], 20)
		32: XmmMem	constructor(xmm_to_xmm_mem, [31], 21)
		33: Xmm	constructor(x64_paddb, [28, 32], 22)
		34: u128	const_int(20016609818878733144904388672456953615, u128)
		35: VCodeConstant	constructor(emit_u128_le_const, [34], 23)
		36: XmmMem	constructor(const_to_xmm_mem, [35], 24)
		37: Xmm	constructor(x64_pand, [33, 36], 25)
		38: InstOutput	constructor(output_xmm, [37], 26)
		39: Option(InstOutput)	some(38)
		40: Option(Option(InstOutput))	some(39)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 40
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2329
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_ssse3, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: u128	const_int(20016609818878733144904388672456953615, u128)
		10: VCodeConstant	constructor(emit_u128_le_const, [9], 1)
		11: XmmMem	constructor(const_to_xmm_mem, [10], 2)
		12: Value	match_some(8)
		13: Xmm	constructor(put_in_xmm, [12], 3)
		14: Type	const_prim(I8X16)
		15: Xmm	constructor(sse_and, [14, 13, 11], 4)
		16: Xmm	constructor(put_in_xmm, [12], 5)
		17: u32	const_int(4, u32)
		18: XmmMemImm	constructor(xmi_imm, [17], 6)
		19: Xmm	constructor(x64_psrlw, [16, 18], 7)
		20: Xmm	constructor(sse_and, [14, 19, 11], 8)
		21: u128	const_int(5332549880331286302540478971893580032, u128)
		22: VCodeConstant	constructor(emit_u128_le_const, [21], 9)
		23: Xmm	constructor(x64_xmm_load_const, [14, 22], 10)
		24: XmmMem	constructor(xmm_to_xmm_mem, [15], 11)
		25: Xmm	constructor(x64_pshufb, [23, 24], 12)
		26: XmmMem	constructor(xmm_to_xmm_mem, [20], 13)
		27: Xmm	constructor(x64_pshufb, [23, 26], 14)
		28: XmmMem	constructor(xmm_to_xmm_mem, [27], 15)
		29: Xmm	constructor(x64_paddb, [25, 28], 16)
		30: InstOutput	constructor(output_xmm, [29], 17)
		31: Option(InstOutput)	some(30)
		32: Option(Option(InstOutput))	some(31)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		6:	const_prim(true)
		8:	some
	]
	result = 32
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2303
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_avx512vl, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: bool	constructor(use_avx512bitalg, [], 0)
		10: Value	match_some(8)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 1)
		12: Xmm	constructor(x64_vpopcntb, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		6:	const_prim(true)
		8:	some
		9:	const_prim(true)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2230
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(0, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: Type	const_prim(I64)
		13: Gpr	constructor(do_popcnt, [12, 11], 3)
		14: ValueRegs	constructor(put_in_regs, [8], 4)
		15: usize	const_int(1, usize)
		16: Gpr	constructor(value_regs_get_gpr, [14, 15], 5)
		17: Gpr	constructor(do_popcnt, [12, 16], 6)
		18: GprMemImm	constructor(gpr_to_gpr_mem_imm, [17], 7)
		19: Gpr	constructor(x64_add, [12, 13, 18], 8)
		20: Reg	constructor(gpr_to_reg, [19], 9)
		21: u64	const_int(0, u64)
		22: Reg	constructor(imm, [12, 21], 10)
		23: ValueRegs	constructor(value_regs, [20, 22], 11)
		24: InstOutput	constructor(output, [23], 12)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2225
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_8_or_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: Value	match_some(8)
		10: Type	const_prim(I32)
		11: ExtendKind	make_variant(ExtendKind::Zero, [])
		12: Gpr	constructor(extend_to_gpr, [9, 10, 11], 1)
		13: Gpr	constructor(do_popcnt, [10, 12], 2)
		14: InstOutput	constructor(output_gpr, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2220
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	match_some(6)
		12: Gpr	constructor(do_popcnt, [11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2214
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: bool	constructor(use_popcnt, [], 0)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: Type	const_prim(I64)
		14: Gpr	constructor(x64_popcnt, [13, 12], 3)
		15: ValueRegs	constructor(put_in_regs, [9], 4)
		16: usize	const_int(1, usize)
		17: Gpr	constructor(value_regs_get_gpr, [15, 16], 5)
		18: Gpr	constructor(x64_popcnt, [13, 17], 6)
		19: GprMemImm	constructor(gpr_to_gpr_mem_imm, [18], 7)
		20: Gpr	constructor(x64_add, [13, 14, 19], 8)
		21: Reg	constructor(gpr_to_reg, [20], 9)
		22: u64	const_int(0, u64)
		23: Reg	constructor(imm, [13, 22], 10)
		24: ValueRegs	constructor(value_regs, [21, 23], 11)
		25: InstOutput	constructor(output, [24], 12)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
		8:	const_prim(true)
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2210
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_8_or_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: bool	constructor(use_popcnt, [], 0)
		10: Value	match_some(8)
		11: Type	const_prim(I32)
		12: ExtendKind	make_variant(ExtendKind::Zero, [])
		13: Gpr	constructor(extend_to_gpr, [10, 11, 12], 1)
		14: Gpr	constructor(x64_popcnt, [11, 13], 2)
		15: InstOutput	constructor(output_gpr, [14], 3)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	const_prim(true)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2206
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(popcnt, 7)
		9: bool	constructor(use_popcnt, [], 0)
		10: Value	match_some(8)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Type	match_some(6)
		13: Gpr	constructor(x64_popcnt, [12, 11], 2)
		14: InstOutput	constructor(output_gpr, [13], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	const_prim(true)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2180
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ctz, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(0, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: Type	const_prim(I64)
		13: Gpr	constructor(do_ctz, [12, 12, 11], 3)
		14: ValueRegs	constructor(put_in_regs, [8], 4)
		15: usize	const_int(1, usize)
		16: Gpr	constructor(value_regs_get_gpr, [14, 15], 5)
		17: Gpr	constructor(do_ctz, [12, 12, 16], 6)
		18: u32	const_int(64, u32)
		19: RegMemImm	make_variant(RegMemImm::Imm, [18])
		20: GprMemImm	constructor(gpr_mem_imm_new, [19], 7)
		21: Gpr	constructor(x64_add, [12, 17, 20], 8)
		22: OperandSize	make_variant(OperandSize::Size64, [])
		23: ProducesFlags	constructor(x64_cmp_imm, [22, 13, 18], 9)
		24: GprMem	constructor(gpr_to_gpr_mem, [21], 10)
		25: CC	make_variant(CC::Z, [])
		26: ConsumesFlags	constructor(cmove, [12, 25, 24, 13], 11)
		27: Reg	constructor(with_flags_reg, [23, 26], 12)
		28: Gpr	constructor(gpr_new, [27], 13)
		29: Reg	constructor(gpr_to_reg, [28], 14)
		30: u64	const_int(0, u64)
		31: Reg	constructor(imm, [12, 30], 15)
		32: ValueRegs	constructor(value_regs, [29, 31], 16)
		33: InstOutput	constructor(output, [32], 17)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2175
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_8_or_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ctz, 7)
		9: Value	match_some(8)
		10: Type	const_prim(I32)
		11: ExtendKind	make_variant(ExtendKind::Zero, [])
		12: Gpr	constructor(extend_to_gpr, [9, 10, 11], 1)
		13: u32	const_int(1, u32)
		14: Type	match_some(6)
		15: u8	constructor(ty_bits, [14], 0)
		16: u32	constructor(u8_as_u32, [15], 0)
		17: u32	constructor(u32_shl, [13, 16], 0)
		18: RegMemImm	make_variant(RegMemImm::Imm, [17])
		19: GprMemImm	constructor(gpr_mem_imm_new, [18], 2)
		20: Gpr	constructor(x64_or, [10, 12, 19], 3)
		21: Gpr	constructor(do_ctz, [10, 14, 20], 4)
		22: InstOutput	constructor(output_gpr, [21], 5)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2172
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ctz, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	match_some(6)
		12: Gpr	constructor(do_ctz, [11, 11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2141
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(clz, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(1, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: Type	const_prim(I64)
		13: Gpr	constructor(do_clz, [12, 12, 11], 3)
		14: ValueRegs	constructor(put_in_regs, [8], 4)
		15: usize	const_int(0, usize)
		16: Gpr	constructor(value_regs_get_gpr, [14, 15], 5)
		17: Gpr	constructor(do_clz, [12, 12, 16], 6)
		18: u32	const_int(64, u32)
		19: RegMemImm	make_variant(RegMemImm::Imm, [18])
		20: GprMemImm	constructor(gpr_mem_imm_new, [19], 7)
		21: Gpr	constructor(x64_add, [12, 17, 20], 8)
		22: OperandSize	make_variant(OperandSize::Size64, [])
		23: ProducesFlags	constructor(x64_cmp_imm, [22, 13, 18], 9)
		24: GprMem	constructor(gpr_to_gpr_mem, [13], 10)
		25: CC	make_variant(CC::NZ, [])
		26: ConsumesFlags	constructor(cmove, [12, 25, 24, 21], 11)
		27: Reg	constructor(with_flags_reg, [23, 26], 12)
		28: Gpr	constructor(gpr_new, [27], 13)
		29: Reg	constructor(gpr_to_reg, [28], 14)
		30: u64	const_int(0, u64)
		31: Reg	constructor(imm, [12, 30], 15)
		32: ValueRegs	constructor(value_regs, [29, 31], 16)
		33: InstOutput	constructor(output, [32], 17)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2135
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(clz, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_8_or_16, 7)
		9: Value	match_some(6)
		10: Type	const_prim(I64)
		11: ExtendKind	make_variant(ExtendKind::Zero, [])
		12: Gpr	constructor(extend_to_gpr, [9, 10, 11], 1)
		13: Gpr	constructor(do_clz, [10, 10, 12], 2)
		14: u32	const_int(64, u32)
		15: Type	match_some(8)
		16: u8	constructor(ty_bits, [15], 0)
		17: u32	constructor(u8_as_u32, [16], 0)
		18: u32	constructor(u32_sub, [14, 17], 0)
		19: RegMemImm	make_variant(RegMemImm::Imm, [18])
		20: GprMemImm	constructor(gpr_mem_imm_new, [19], 3)
		21: Gpr	constructor(x64_sub, [10, 13, 20], 4)
		22: InstOutput	constructor(output_gpr, [21], 5)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2132
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(clz, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	match_some(6)
		12: Gpr	constructor(do_clz, [11, 11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2127
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(select, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Value)	extractor(maybe_uextend, 9)
		11: Value	match_some(10)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option((FloatCC, Value, Value))	extractor(fcmp, 13)
		15: (FloatCC, Value, Value)	match_some(14)
		16: FloatCC	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Value	match_tuple(8, 2)
		19: Value	match_tuple(15, 2)
		20: Value	match_tuple(8, 1)
		21: Xmm	constructor(put_in_xmm, [19], 1)
		22: XmmMem	constructor(put_in_xmm_mem, [17], 2)
		23: Xmm	constructor(x64_maxsd, [21, 22], 3)
		24: InstOutput	constructor(output_xmm, [23], 4)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
		12:	some
		14:	some
		16:	variant(FloatCC::LessThan)
	]
	equals = [
		18 == 17
		20 == 19
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2125
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(select, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Value)	extractor(maybe_uextend, 9)
		11: Value	match_some(10)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option((FloatCC, Value, Value))	extractor(fcmp, 13)
		15: (FloatCC, Value, Value)	match_some(14)
		16: FloatCC	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Value	match_tuple(8, 2)
		19: Value	match_tuple(15, 2)
		20: Value	match_tuple(8, 1)
		21: Xmm	constructor(put_in_xmm, [19], 1)
		22: XmmMem	constructor(put_in_xmm_mem, [17], 2)
		23: Xmm	constructor(x64_maxss, [21, 22], 3)
		24: InstOutput	constructor(output_xmm, [23], 4)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
		12:	some
		14:	some
		16:	variant(FloatCC::LessThan)
	]
	equals = [
		18 == 17
		20 == 19
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2123
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(select, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Value)	extractor(maybe_uextend, 9)
		11: Value	match_some(10)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option((FloatCC, Value, Value))	extractor(fcmp, 13)
		15: (FloatCC, Value, Value)	match_some(14)
		16: FloatCC	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Value	match_tuple(8, 1)
		19: Value	match_tuple(15, 2)
		20: Value	match_tuple(8, 2)
		21: Xmm	constructor(put_in_xmm, [17], 1)
		22: XmmMem	constructor(put_in_xmm_mem, [19], 2)
		23: Xmm	constructor(x64_minsd, [21, 22], 3)
		24: InstOutput	constructor(output_xmm, [23], 4)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
		10:	some
		12:	some
		14:	some
		16:	variant(FloatCC::LessThan)
	]
	equals = [
		18 == 17
		20 == 19
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2121
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(select, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Value)	extractor(maybe_uextend, 9)
		11: Value	match_some(10)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option((FloatCC, Value, Value))	extractor(fcmp, 13)
		15: (FloatCC, Value, Value)	match_some(14)
		16: FloatCC	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Value	match_tuple(8, 1)
		19: Value	match_tuple(15, 2)
		20: Value	match_tuple(8, 2)
		21: Xmm	constructor(put_in_xmm, [17], 1)
		22: XmmMem	constructor(put_in_xmm_mem, [19], 2)
		23: Xmm	constructor(x64_minss, [21, 22], 3)
		24: InstOutput	constructor(output_xmm, [23], 4)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
		10:	some
		12:	some
		14:	some
		16:	variant(FloatCC::LessThan)
	]
	equals = [
		18 == 17
		20 == 19
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2110
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: ValueRegs	constructor(put_in_regs, [8], 1)
		11: CC	make_variant(CC::Z, [])
		12: IcmpCondResult	constructor(cmp_zero_i128, [11, 10], 2)
		13: Value	match_tuple(7, 1)
		14: Value	match_tuple(7, 2)
		15: ValueRegs	constructor(select_icmp, [12, 13, 14], 3)
		16: InstOutput	constructor(output, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		9:	const_prim(I128)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2103
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_64, 9)
		11: Type	match_some(10)
		12: OperandSize	constructor(raw_operand_size_of_type, [11], 1)
		13: Gpr	constructor(put_in_gpr, [8], 2)
		14: GprMemImm	constructor(gpr_to_gpr_mem_imm, [13], 3)
		15: ProducesFlags	constructor(x64_test, [12, 13, 14], 4)
		16: Type	match_tuple(4, 0)
		17: CC	make_variant(CC::NZ, [])
		18: Value	match_tuple(7, 1)
		19: Value	match_tuple(7, 2)
		20: ConsumesFlags	constructor(cmove_from_values, [16, 17, 18, 19], 5)
		21: ValueRegs	constructor(with_flags, [15, 20], 6)
		22: InstOutput	constructor(output, [21], 7)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		10:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2097
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((IntCC, Value, Value))	extractor(icmp, 12)
		14: (IntCC, Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Type	extractor(value_type, 15)
		17: Option(Type)	extractor(fits_in_64, 16)
		18: IntCC	match_tuple(14, 0)
		19: Value	match_tuple(14, 2)
		20: IcmpCondResult	constructor(emit_cmp, [18, 15, 19], 1)
		21: Type	match_tuple(4, 0)
		22: Value	match_tuple(7, 1)
		23: Value	match_tuple(7, 2)
		24: InstOutput	constructor(lower_select_icmp, [21, 20, 22, 23], 2)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
		11:	some
		13:	some
		17:	some
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2083
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((FloatCC, Value, Value))	extractor(fcmp, 12)
		14: (FloatCC, Value, Value)	match_some(13)
		15: FloatCC	match_tuple(14, 0)
		16: FloatCC	make_variant(FloatCC::NotEqual, [])
		17: Value	match_tuple(14, 1)
		18: Value	match_tuple(14, 2)
		19: FcmpCondResult	constructor(emit_fcmp, [16, 17, 18], 1)
		20: Type	match_tuple(4, 0)
		21: Value	match_tuple(7, 2)
		22: Value	match_tuple(7, 1)
		23: InstOutput	constructor(lower_select_fcmp, [20, 19, 21, 22], 2)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
		11:	some
		13:	some
		15:	variant(FloatCC::Equal)
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2081
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((FloatCC, Value, Value))	extractor(fcmp, 12)
		14: (FloatCC, Value, Value)	match_some(13)
		15: FloatCC	match_tuple(14, 0)
		16: Value	match_tuple(14, 1)
		17: Value	match_tuple(14, 2)
		18: FcmpCondResult	constructor(emit_fcmp, [15, 16, 17], 1)
		19: Type	match_tuple(4, 0)
		20: Value	match_tuple(7, 1)
		21: Value	match_tuple(7, 2)
		22: InstOutput	constructor(lower_select_fcmp, [19, 18, 20, 21], 2)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
		11:	some
		13:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2063
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::UnorderedOrGreaterThanOrEqual, [])
		14: Xmm	constructor(x64_cmpp, [12, 10, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::UnorderedOrLessThanOrEqual)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2061
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::UnorderedOrGreaterThan, [])
		14: Xmm	constructor(x64_cmpp, [12, 10, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::UnorderedOrLessThan)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2059
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::LessThanOrEqual, [])
		14: Xmm	constructor(x64_cmpp, [12, 10, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::GreaterThanOrEqual)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2057
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::LessThan, [])
		14: Xmm	constructor(x64_cmpp, [12, 10, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::GreaterThan)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2051
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::UnorderedOrGreaterThanOrEqual, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::UnorderedOrGreaterThanOrEqual)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2049
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::UnorderedOrGreaterThan, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::UnorderedOrGreaterThan)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2047
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::Unordered, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::Unordered)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2045
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::Ordered, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::Ordered)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2043
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::LessThanOrEqual, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::LessThanOrEqual)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2041
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::LessThan, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::LessThan)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2039
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::NotEqual, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::NotEqual)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2037
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: FloatCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: FcmpImm	make_variant(FcmpImm::Equal, [])
		14: Xmm	constructor(x64_cmpp, [12, 9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	variant(FloatCC::Equal)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2030
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((FloatCC, Value, Value))	extractor(fcmp, 0)
		4: (FloatCC, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_scalar_float, 6)
		8: FloatCC	match_tuple(4, 0)
		9: Value	match_tuple(4, 2)
		10: FcmpCondResult	constructor(emit_fcmp, [8, 5, 9], 1)
		11: ValueRegs	constructor(lower_fcmp_bool, [10], 2)
		12: InstOutput	constructor(output, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 2002
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: Xmm	constructor(flip_high_bit_mask, [9], 1)
		11: Xmm	constructor(put_in_xmm, [6], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		13: Xmm	constructor(x64_pxor, [11, 12], 4)
		14: Value	match_tuple(4, 2)
		15: Xmm	constructor(put_in_xmm, [14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [10], 6)
		17: Xmm	constructor(x64_pxor, [15, 16], 7)
		18: XmmMem	constructor(xmm_to_xmm_mem, [17], 8)
		19: Xmm	constructor(x64_pcmpgt, [9, 13, 18], 9)
		20: Xmm	constructor(vector_all_ones, [], 10)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 11)
		22: Xmm	constructor(x64_pxor, [19, 21], 12)
		23: InstOutput	constructor(output_xmm, [22], 13)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedLessThanOrEqual)
		8:	some
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1994
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(4, 2)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 2)
		11: Xmm	constructor(x64_psubusw, [8, 10], 3)
		12: Type	const_prim(I8X16)
		13: Xmm	constructor(xmm_zero, [12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_pcmpeqw, [11, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedLessThanOrEqual)
		7:	const_prim(I16X8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1987
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pminu, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Xmm	constructor(put_in_xmm, [6], 2)
		13: Value	match_tuple(4, 2)
		14: XmmMem	constructor(put_in_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pminu, [9, 12, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 11, 16], 6)
		18: InstOutput	constructor(output_xmm, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedLessThanOrEqual)
		8:	some
		10:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1976
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: Xmm	constructor(flip_high_bit_mask, [9], 1)
		11: Xmm	constructor(put_in_xmm, [6], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		13: Xmm	constructor(x64_pxor, [11, 12], 4)
		14: Value	match_tuple(4, 2)
		15: Xmm	constructor(put_in_xmm, [14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [10], 6)
		17: Xmm	constructor(x64_pxor, [15, 16], 7)
		18: XmmMem	constructor(xmm_to_xmm_mem, [13], 8)
		19: Xmm	constructor(x64_pcmpgt, [9, 17, 18], 9)
		20: Xmm	constructor(vector_all_ones, [], 10)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 11)
		22: Xmm	constructor(x64_pxor, [19, 21], 12)
		23: InstOutput	constructor(output_xmm, [22], 13)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedGreaterThanOrEqual)
		8:	some
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1970
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Value	match_tuple(4, 2)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		11: Xmm	constructor(x64_psubusw, [9, 10], 3)
		12: Type	const_prim(I16X8)
		13: Xmm	constructor(xmm_zero, [12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_pcmpeqw, [11, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedGreaterThanOrEqual)
		7:	const_prim(I16X8)
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1964
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmaxu, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Xmm	constructor(put_in_xmm, [6], 2)
		13: Value	match_tuple(4, 2)
		14: XmmMem	constructor(put_in_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pmaxu, [9, 12, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 11, 16], 6)
		18: InstOutput	constructor(output_xmm, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedGreaterThanOrEqual)
		8:	some
		10:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1959
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpgt, [12, 9, 11], 3)
		14: Xmm	constructor(vector_all_ones, [], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 5)
		16: Xmm	constructor(x64_pxor, [13, 15], 6)
		17: InstOutput	constructor(output_xmm, [16], 7)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedLessThanOrEqual)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1954
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmins, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Xmm	constructor(put_in_xmm, [6], 2)
		13: Value	match_tuple(4, 2)
		14: XmmMem	constructor(put_in_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pmins, [9, 12, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 11, 16], 6)
		18: InstOutput	constructor(output_xmm, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedLessThanOrEqual)
		8:	some
		10:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1948
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpgt, [12, 10, 11], 3)
		14: Xmm	constructor(vector_all_ones, [], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 5)
		16: Xmm	constructor(x64_pxor, [13, 15], 6)
		17: InstOutput	constructor(output_xmm, [16], 7)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedGreaterThanOrEqual)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1942
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmaxs, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Xmm	constructor(put_in_xmm, [6], 2)
		13: Value	match_tuple(4, 2)
		14: XmmMem	constructor(put_in_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pmaxs, [9, 12, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 11, 16], 6)
		18: InstOutput	constructor(output_xmm, [17], 7)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedGreaterThanOrEqual)
		8:	some
		10:	const_prim(true)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1933
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: Xmm	constructor(flip_high_bit_mask, [9], 1)
		11: Xmm	constructor(put_in_xmm, [6], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		13: Xmm	constructor(x64_pxor, [11, 12], 4)
		14: Value	match_tuple(4, 2)
		15: Xmm	constructor(put_in_xmm, [14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [10], 6)
		17: Xmm	constructor(x64_pxor, [15, 16], 7)
		18: XmmMem	constructor(xmm_to_xmm_mem, [13], 8)
		19: Xmm	constructor(x64_pcmpgt, [9, 17, 18], 9)
		20: InstOutput	constructor(output_xmm, [19], 10)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedLessThan)
		8:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1922
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pminu, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Value	match_tuple(4, 2)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pminu, [9, 11, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 15, 16], 6)
		18: Xmm	constructor(vector_all_ones, [], 7)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 8)
		20: Xmm	constructor(x64_pxor, [17, 19], 9)
		21: InstOutput	constructor(output_xmm, [20], 10)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedLessThan)
		8:	some
		10:	const_prim(true)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1914
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: Xmm	constructor(flip_high_bit_mask, [9], 1)
		11: Xmm	constructor(put_in_xmm, [6], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		13: Xmm	constructor(x64_pxor, [11, 12], 4)
		14: Value	match_tuple(4, 2)
		15: Xmm	constructor(put_in_xmm, [14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [10], 6)
		17: Xmm	constructor(x64_pxor, [15, 16], 7)
		18: XmmMem	constructor(xmm_to_xmm_mem, [17], 8)
		19: Xmm	constructor(x64_pcmpgt, [9, 13, 18], 9)
		20: InstOutput	constructor(output_xmm, [19], 10)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedGreaterThan)
		8:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1904
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmaxu, [9], 0)
		11: Xmm	constructor(put_in_xmm, [6], 1)
		12: Value	match_tuple(4, 2)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 3)
		15: Xmm	constructor(x64_pmaxu, [9, 11, 14], 4)
		16: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		17: Xmm	constructor(x64_pcmpeq, [9, 15, 16], 6)
		18: Xmm	constructor(vector_all_ones, [], 7)
		19: XmmMem	constructor(xmm_to_xmm_mem, [18], 8)
		20: Xmm	constructor(x64_pxor, [17, 19], 9)
		21: InstOutput	constructor(output_xmm, [20], 10)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::UnsignedGreaterThan)
		8:	some
		10:	const_prim(true)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1897
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Value	match_tuple(4, 2)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: XmmMem	constructor(put_in_xmm_mem, [6], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpgt, [12, 10, 11], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedLessThan)
		8:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1892
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpgt, [12, 9, 11], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::SignedGreaterThan)
		8:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1885
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpeq, [12, 9, 11], 3)
		14: Xmm	constructor(vector_all_ones, [], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 5)
		16: Xmm	constructor(x64_pxor, [13, 15], 6)
		17: InstOutput	constructor(output_xmm, [16], 7)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::NotEqual)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1880
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Type	extractor(value_type, 6)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Xmm	constructor(put_in_xmm, [6], 1)
		10: Value	match_tuple(4, 2)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Type	match_some(8)
		13: Xmm	constructor(x64_pcmpeq, [12, 9, 11], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	variant(IntCC::Equal)
		8:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1872
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Type	extractor(value_type, 10)
		12: Value	match_tuple(8, 2)
		13: Option(u64)	extractor(u64_from_iconst, 12)
		14: u64	match_some(13)
		15: Gpr	constructor(put_in_gpr, [10], 1)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_not, [16, 15], 2)
		18: u8	const_int(31, u8)
		19: Imm8Reg	make_variant(Imm8Reg::Imm8, [18])
		20: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [19], 3)
		21: Type	const_prim(I32)
		22: Gpr	constructor(x64_shr, [21, 17, 20], 4)
		23: InstOutput	constructor(output_gpr, [22], 5)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedGreaterThanOrEqual)
		11:	const_prim(I32)
		13:	some
		14:	const_int(0)
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1868
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Option(u64)	extractor(u64_from_iconst, 10)
		12: u64	match_some(11)
		13: Value	match_tuple(8, 2)
		14: Type	extractor(value_type, 13)
		15: Gpr	constructor(put_in_gpr, [13], 1)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_not, [16, 15], 2)
		18: u8	const_int(31, u8)
		19: Imm8Reg	make_variant(Imm8Reg::Imm8, [18])
		20: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [19], 3)
		21: Type	const_prim(I32)
		22: Gpr	constructor(x64_shr, [21, 17, 20], 4)
		23: InstOutput	constructor(output_gpr, [22], 5)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedLessThanOrEqual)
		11:	some
		12:	const_int(0)
		14:	const_prim(I32)
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1864
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Option(u64)	extractor(u64_from_iconst, 10)
		12: u64	match_some(11)
		13: Value	match_tuple(8, 2)
		14: Type	extractor(value_type, 13)
		15: Gpr	constructor(put_in_gpr, [13], 1)
		16: u8	const_int(31, u8)
		17: Imm8Reg	make_variant(Imm8Reg::Imm8, [16])
		18: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [17], 2)
		19: Type	const_prim(I32)
		20: Gpr	constructor(x64_shr, [19, 15, 18], 3)
		21: InstOutput	constructor(output_gpr, [20], 4)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedGreaterThan)
		11:	some
		12:	const_int(0)
		14:	const_prim(I32)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1860
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Type	extractor(value_type, 10)
		12: Value	match_tuple(8, 2)
		13: Option(u64)	extractor(u64_from_iconst, 12)
		14: u64	match_some(13)
		15: Gpr	constructor(put_in_gpr, [10], 1)
		16: u8	const_int(31, u8)
		17: Imm8Reg	make_variant(Imm8Reg::Imm8, [16])
		18: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [17], 2)
		19: Type	const_prim(I32)
		20: Gpr	constructor(x64_shr, [19, 15, 18], 3)
		21: InstOutput	constructor(output_gpr, [20], 4)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedLessThan)
		11:	const_prim(I32)
		13:	some
		14:	const_int(0)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1856
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Type	extractor(value_type, 10)
		12: Value	match_tuple(8, 2)
		13: Option(u64)	extractor(u64_from_iconst, 12)
		14: u64	match_some(13)
		15: Gpr	constructor(put_in_gpr, [10], 1)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_not, [16, 15], 2)
		18: u8	const_int(63, u8)
		19: Imm8Reg	make_variant(Imm8Reg::Imm8, [18])
		20: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [19], 3)
		21: Gpr	constructor(x64_shr, [16, 17, 20], 4)
		22: InstOutput	constructor(output_gpr, [21], 5)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedGreaterThanOrEqual)
		11:	const_prim(I64)
		13:	some
		14:	const_int(0)
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1852
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Option(u64)	extractor(u64_from_iconst, 10)
		12: u64	match_some(11)
		13: Value	match_tuple(8, 2)
		14: Type	extractor(value_type, 13)
		15: Gpr	constructor(put_in_gpr, [13], 1)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_not, [16, 15], 2)
		18: u8	const_int(63, u8)
		19: Imm8Reg	make_variant(Imm8Reg::Imm8, [18])
		20: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [19], 3)
		21: Gpr	constructor(x64_shr, [16, 17, 20], 4)
		22: InstOutput	constructor(output_gpr, [21], 5)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedLessThanOrEqual)
		11:	some
		12:	const_int(0)
		14:	const_prim(I64)
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1848
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Option(u64)	extractor(u64_from_iconst, 10)
		12: u64	match_some(11)
		13: Value	match_tuple(8, 2)
		14: Type	extractor(value_type, 13)
		15: Gpr	constructor(put_in_gpr, [13], 1)
		16: u8	const_int(63, u8)
		17: Imm8Reg	make_variant(Imm8Reg::Imm8, [16])
		18: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [17], 2)
		19: Type	const_prim(I64)
		20: Gpr	constructor(x64_shr, [19, 15, 18], 3)
		21: InstOutput	constructor(output_gpr, [20], 4)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedGreaterThan)
		11:	some
		12:	const_int(0)
		14:	const_prim(I64)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1844
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((IntCC, Value, Value))	extractor(icmp, 6)
		8: (IntCC, Value, Value)	match_some(7)
		9: IntCC	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: Type	extractor(value_type, 10)
		12: Value	match_tuple(8, 2)
		13: Option(u64)	extractor(u64_from_iconst, 12)
		14: u64	match_some(13)
		15: Gpr	constructor(put_in_gpr, [10], 1)
		16: u8	const_int(63, u8)
		17: Imm8Reg	make_variant(Imm8Reg::Imm8, [16])
		18: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [17], 2)
		19: Type	const_prim(I64)
		20: Gpr	constructor(x64_shr, [19, 15, 18], 3)
		21: InstOutput	constructor(output_gpr, [20], 4)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		9:	variant(IntCC::SignedLessThan)
		11:	const_prim(I64)
		13:	some
		14:	const_int(0)
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1840
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: IntCC	match_tuple(4, 0)
		8: Value	match_tuple(4, 2)
		9: IcmpCondResult	constructor(emit_cmp, [7, 5, 8], 1)
		10: ValueRegs	constructor(lower_icmp_bool, [9], 2)
		11: InstOutput	constructor(output, [10], 3)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1837
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: IntCC	match_tuple(4, 0)
		9: Value	match_tuple(4, 2)
		10: IcmpCondResult	constructor(emit_cmp, [8, 5, 9], 1)
		11: ValueRegs	constructor(lower_icmp_bool, [10], 2)
		12: InstOutput	constructor(output, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1832
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(ValueSlice)	extractor(return, 0)
		4: ValueSlice	match_some(3)
		5: InstOutput	constructor(lower_return, [4], 1)
		6: Option(InstOutput)	some(5)
		7: Option(Option(InstOutput))	some(6)
	]
	constraints = [
		3:	some
	]
	result = 7
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1826
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(TrapCode)	extractor(resumable_trap, 0)
		4: TrapCode	match_some(3)
		5: SideEffectNoResult	constructor(x64_ud2, [4], 1)
		6: InstOutput	constructor(side_effect, [5], 2)
		7: Option(InstOutput)	some(6)
		8: Option(Option(InstOutput))	some(7)
	]
	constraints = [
		3:	some
	]
	result = 8
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1818
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, TrapCode))	extractor(uadd_overflow_trap, 7)
		9: (Value, Value, TrapCode)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Type	match_some(6)
		17: ProducesFlags	constructor(x64_add_with_flags_paired, [16, 13, 15], 3)
		18: CC	make_variant(CC::B, [])
		19: TrapCode	match_tuple(9, 2)
		20: ConsumesFlags	constructor(trap_if, [18, 19], 4)
		21: ValueRegs	constructor(with_flags, [17, 20], 5)
		22: InstOutput	constructor(output, [21], 6)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1812
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, TrapCode))	extractor(uadd_overflow_trap, 7)
		9: (Value, Value, TrapCode)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(GprMemImm)	extractor(simm32_from_value, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: Type	match_some(6)
		15: GprMemImm	match_some(11)
		16: ProducesFlags	constructor(x64_add_with_flags_paired, [14, 13, 15], 2)
		17: CC	make_variant(CC::B, [])
		18: TrapCode	match_tuple(9, 2)
		19: ConsumesFlags	constructor(trap_if, [17, 18], 3)
		20: ValueRegs	constructor(with_flags, [16, 19], 4)
		21: InstOutput	constructor(output, [20], 5)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1804
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, TrapCode))	extractor(uadd_overflow_trap, 7)
		9: (Value, Value, TrapCode)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Type	match_some(6)
		15: ProducesFlags	constructor(x64_add_with_flags_paired, [14, 11, 13], 3)
		16: CC	make_variant(CC::B, [])
		17: TrapCode	match_tuple(9, 2)
		18: ConsumesFlags	constructor(trap_if, [16, 17], 4)
		19: ValueRegs	constructor(with_flags, [15, 18], 5)
		20: InstOutput	constructor(output, [19], 6)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1799
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(TrapCode)	extractor(trap, 0)
		4: TrapCode	match_some(3)
		5: SideEffectNoResult	constructor(x64_ud2, [4], 1)
		6: InstOutput	constructor(side_effect, [5], 2)
		7: Option(InstOutput)	some(6)
		8: Option(Option(InstOutput))	some(7)
	]
	constraints = [
		3:	some
	]
	result = 8
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1784
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: Type	match_some(8)
		15: Xmm	constructor(flip_high_bit_mask, [14], 3)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 4)
		17: Xmm	constructor(x64_pxor, [11, 16], 5)
		18: XmmMem	constructor(xmm_to_xmm_mem, [15], 6)
		19: Xmm	constructor(x64_pxor, [13, 18], 7)
		20: XmmMem	constructor(xmm_to_xmm_mem, [17], 8)
		21: Xmm	constructor(x64_pcmpgt, [14, 19, 20], 9)
		22: XmmMem	constructor(xmm_to_xmm_mem, [11], 10)
		23: Xmm	constructor(x64_pand, [21, 22], 11)
		24: XmmMem	constructor(xmm_to_xmm_mem, [13], 12)
		25: Xmm	constructor(x64_pandn, [21, 24], 13)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 14)
		27: Xmm	constructor(x64_por, [23, 26], 15)
		28: InstOutput	constructor(output_xmm, [27], 16)
		29: Option(InstOutput)	some(28)
		30: Option(Option(InstOutput))	some(29)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 30
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1779
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umin, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: XmmMem	constructor(put_in_xmm_mem, [11], 2)
		13: Xmm	constructor(x64_psubusw, [10, 12], 3)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 4)
		15: Xmm	constructor(x64_psubw, [10, 14], 5)
		16: InstOutput	constructor(output_xmm, [15], 6)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1773
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pminu, [9], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Xmm	constructor(put_in_xmm, [12], 1)
		14: Value	match_tuple(11, 1)
		15: XmmMem	constructor(put_in_xmm_mem, [14], 2)
		16: Xmm	constructor(x64_pminu, [9, 13, 15], 3)
		17: InstOutput	constructor(output_xmm, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(true)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1750
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umax, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: Type	match_some(8)
		15: Xmm	constructor(flip_high_bit_mask, [14], 3)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 4)
		17: Xmm	constructor(x64_pxor, [11, 16], 5)
		18: XmmMem	constructor(xmm_to_xmm_mem, [15], 6)
		19: Xmm	constructor(x64_pxor, [13, 18], 7)
		20: XmmMem	constructor(xmm_to_xmm_mem, [19], 8)
		21: Xmm	constructor(x64_pcmpgt, [14, 17, 20], 9)
		22: XmmMem	constructor(xmm_to_xmm_mem, [11], 10)
		23: Xmm	constructor(x64_pand, [21, 22], 11)
		24: XmmMem	constructor(xmm_to_xmm_mem, [13], 12)
		25: Xmm	constructor(x64_pandn, [21, 24], 13)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 14)
		27: Xmm	constructor(x64_por, [23, 26], 15)
		28: InstOutput	constructor(output_xmm, [27], 16)
		29: Option(InstOutput)	some(28)
		30: Option(Option(InstOutput))	some(29)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 30
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1743
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umax, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		14: Xmm	constructor(x64_psubusw, [12, 13], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [14], 5)
		16: Xmm	constructor(x64_paddw, [10, 15], 6)
		17: InstOutput	constructor(output_xmm, [16], 7)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1737
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umax, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmaxu, [9], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Xmm	constructor(put_in_xmm, [12], 1)
		14: Value	match_tuple(11, 1)
		15: XmmMem	constructor(put_in_xmm_mem, [14], 2)
		16: Xmm	constructor(x64_pmaxu, [9, 13, 15], 3)
		17: InstOutput	constructor(output_xmm, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(true)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1725
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(smin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		15: Type	match_some(8)
		16: Xmm	constructor(x64_pcmpgt, [15, 13, 14], 4)
		17: XmmMem	constructor(xmm_to_xmm_mem, [11], 5)
		18: Xmm	constructor(x64_pand, [16, 17], 6)
		19: XmmMem	constructor(xmm_to_xmm_mem, [13], 7)
		20: Xmm	constructor(x64_pandn, [16, 19], 8)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 9)
		22: Xmm	constructor(x64_por, [18, 21], 10)
		23: InstOutput	constructor(output_xmm, [22], 11)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1721
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(smin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: Type	match_some(8)
		10: bool	constructor(has_pmins, [9], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Xmm	constructor(put_in_xmm, [12], 1)
		14: Value	match_tuple(11, 1)
		15: XmmMem	constructor(put_in_xmm_mem, [14], 2)
		16: Xmm	constructor(x64_pmins, [9, 13, 15], 3)
		17: InstOutput	constructor(output_xmm, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_prim(true)
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1701
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(smax, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec128, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: Type	match_some(8)
		15: Xmm	constructor(lower_vec_smax, [14, 11, 13], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1674
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(smax, 7)
		9: Type	match_some(6)
		10: CC	make_variant(CC::NL, [])
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: ValueRegs	constructor(cmp_and_choose, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output, [14], 2)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1671
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(smin, 7)
		9: Type	match_some(6)
		10: CC	make_variant(CC::L, [])
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: ValueRegs	constructor(cmp_and_choose, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output, [14], 2)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1668
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(umax, 7)
		9: Type	match_some(6)
		10: CC	make_variant(CC::NB, [])
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: ValueRegs	constructor(cmp_and_choose, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output, [14], 2)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1665
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(umin, 7)
		9: Type	match_some(6)
		10: CC	make_variant(CC::B, [])
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: ValueRegs	constructor(cmp_and_choose, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output, [14], 2)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1646
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: Value	match_tuple(4, 1)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 2)
		12: Xmm	constructor(x64_movlhps, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(F64X2)
		8:	const_int(1)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1638
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: Value	match_tuple(4, 1)
		11: Xmm	constructor(put_in_xmm, [10], 2)
		12: Xmm	constructor(x64_movsd_regmove, [9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(F64X2)
		8:	const_int(0)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1593
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Xmm	constructor(put_in_xmm, [5], 1)
		8: Value	match_tuple(4, 1)
		9: Xmm	constructor(put_in_xmm, [8], 2)
		10: Uimm8	match_tuple(4, 2)
		11: u8	extractor(u8_from_uimm8, 10)
		12: Xmm	constructor(f32x4_insertlane, [7, 9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(F32X4)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1590
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Value	match_tuple(5, 1)
		9: Option(SinkableLoad)	extractor(sinkable_load, 8)
		10: Xmm	constructor(put_in_xmm, [6], 1)
		11: SinkableLoad	match_some(9)
		12: XmmMem	constructor(sink_load_to_xmm_mem, [11], 2)
		13: Uimm8	match_tuple(5, 2)
		14: u8	extractor(u8_from_uimm8, 13)
		15: u8	constructor(sse_insertps_lane_imm, [14], 3)
		16: Xmm	constructor(x64_insertps, [10, 12, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(F32X4)
		9:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1584
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Uimm8	match_tuple(5, 2)
		7: u8	extractor(u8_from_uimm8, 6)
		8: Value	match_tuple(5, 0)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option((Type, Inst))	extractor(has_type, 10)
		12: (Type, Inst)	match_some(11)
		13: Type	match_tuple(12, 0)
		14: Inst	match_tuple(12, 1)
		15: Option(Value)	extractor(splat, 14)
		16: Value	match_some(15)
		17: Gpr	constructor(put_in_gpr, [16], 1)
		18: Type	const_prim(I64)
		19: Xmm	constructor(bitcast_gpr_to_xmm, [18, 17], 2)
		20: Value	match_tuple(5, 1)
		21: GprMem	constructor(put_in_gpr_mem, [20], 3)
		22: u8	const_int(1, u8)
		23: Xmm	constructor(x64_pinsrq, [19, 21, 22], 4)
		24: InstOutput	constructor(output_xmm, [23], 5)
		25: Option(InstOutput)	some(24)
		26: Option(Option(InstOutput))	some(25)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_int(1)
		9:	some
		11:	some
		13:	const_prim(I64X2)
		15:	some
	]
	result = 26
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1578
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: Value	match_tuple(4, 1)
		11: GprMem	constructor(put_in_gpr_mem, [10], 2)
		12: Xmm	constructor(x64_movq_to_xmm, [11], 3)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		14: Xmm	constructor(x64_punpcklqdq, [9, 13], 5)
		15: InstOutput	constructor(output_xmm, [14], 6)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	const_prim(I64X2)
		8:	const_int(1)
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1576
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: Value	match_tuple(4, 1)
		11: GprMem	constructor(put_in_gpr_mem, [10], 2)
		12: Xmm	constructor(x64_movq_to_xmm, [11], 3)
		13: Xmm	constructor(x64_movsd_regmove, [9, 12], 4)
		14: InstOutput	constructor(output_xmm, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(I64X2)
		8:	const_int(0)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1573
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(5, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 2)
		11: Uimm8	match_tuple(5, 2)
		12: u8	extractor(u8_from_uimm8, 11)
		13: Xmm	constructor(x64_pinsrq, [8, 10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I64X2)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1567
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Value	match_tuple(4, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 1)
		11: Xmm	constructor(x64_movd_to_xmm, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		14: u8	const_int(228, u8)
		15: Xmm	constructor(x64_shufps, [11, 13, 14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 6)
		17: u8	const_int(36, u8)
		18: Xmm	constructor(x64_shufps, [12, 16, 17], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	const_prim(I32X4)
		8:	const_int(3)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1560
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Value	match_tuple(4, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 1)
		11: Xmm	constructor(x64_movd_to_xmm, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		14: u8	const_int(48, u8)
		15: Xmm	constructor(x64_shufps, [11, 13, 14], 5)
		16: XmmMem	constructor(xmm_to_xmm_mem, [15], 6)
		17: u8	const_int(132, u8)
		18: Xmm	constructor(x64_shufps, [12, 16, 17], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	const_prim(I32X4)
		8:	const_int(2)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1553
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Value	match_tuple(4, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 1)
		11: Xmm	constructor(x64_movd_to_xmm, [10], 2)
		12: Xmm	constructor(put_in_xmm, [5], 3)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		14: Xmm	constructor(x64_punpcklqdq, [11, 13], 5)
		15: XmmMem	constructor(xmm_to_xmm_mem, [12], 6)
		16: u8	const_int(226, u8)
		17: Xmm	constructor(x64_shufps, [14, 15, 16], 7)
		18: InstOutput	constructor(output_xmm, [17], 8)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	const_prim(I32X4)
		8:	const_int(1)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1548
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Uimm8	match_tuple(4, 2)
		8: u8	extractor(u8_from_uimm8, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: Value	match_tuple(4, 1)
		11: GprMem	constructor(put_in_gpr_mem, [10], 2)
		12: Xmm	constructor(x64_movd_to_xmm, [11], 3)
		13: Xmm	constructor(x64_movss_regmove, [9, 12], 4)
		14: InstOutput	constructor(output_xmm, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	const_prim(I32X4)
		8:	const_int(0)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1544
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(5, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 2)
		11: Uimm8	match_tuple(5, 2)
		12: u8	extractor(u8_from_uimm8, 11)
		13: Xmm	constructor(x64_pinsrd, [8, 10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I32X4)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1540
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Value	match_tuple(4, 1)
		8: Option(SinkableLoad)	extractor(sinkable_load_exact, 7)
		9: Xmm	constructor(put_in_xmm, [5], 1)
		10: SinkableLoad	match_some(8)
		11: GprMem	constructor(sink_load_to_gpr_mem, [10], 2)
		12: Uimm8	match_tuple(4, 2)
		13: u8	extractor(u8_from_uimm8, 12)
		14: Xmm	constructor(x64_pinsrw, [9, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	const_prim(I16X8)
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1538
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Xmm	constructor(put_in_xmm, [5], 1)
		8: Value	match_tuple(4, 1)
		9: GprMem	constructor(put_in_gpr_mem, [8], 2)
		10: Uimm8	match_tuple(4, 2)
		11: u8	extractor(u8_from_uimm8, 10)
		12: Xmm	constructor(x64_pinsrw, [7, 9, 11], 3)
		13: InstOutput	constructor(output_xmm, [12], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(I16X8)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1520
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 0)
		6: Type	extractor(value_type, 5)
		7: Xmm	constructor(put_in_xmm, [5], 1)
		8: Uimm8	match_tuple(4, 2)
		9: u8	extractor(u8_from_uimm8, 8)
		10: VCodeConstant	constructor(insert_i8x16_lane_hole, [9], 2)
		11: XmmMem	constructor(const_to_xmm_mem, [10], 3)
		12: Xmm	constructor(x64_pand, [7, 11], 4)
		13: Value	match_tuple(4, 1)
		14: GprMem	constructor(put_in_gpr_mem, [13], 5)
		15: ExtMode	make_variant(ExtMode::BL, [])
		16: Gpr	constructor(x64_movzx, [15, 14], 6)
		17: u8	const_int(3, u8)
		18: u8	constructor(u8_and, [9, 17], 0)
		19: u8	constructor(u8_shl, [18, 17], 0)
		20: Imm8Reg	make_variant(Imm8Reg::Imm8, [19])
		21: Imm8Gpr	constructor(imm8_reg_to_imm8_gpr, [20], 7)
		22: Type	const_prim(I32)
		23: Gpr	constructor(x64_shl, [22, 16, 21], 8)
		24: GprMem	constructor(gpr_to_gpr_mem, [23], 9)
		25: Xmm	constructor(x64_movd_to_xmm, [24], 10)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 11)
		27: u8	const_int(2, u8)
		28: u8	constructor(u8_shr, [9, 27], 0)
		29: u8	constructor(insert_i8x16_lane_pshufd_imm, [28], 12)
		30: Xmm	constructor(x64_pshufd, [26, 29], 13)
		31: XmmMem	constructor(xmm_to_xmm_mem, [30], 14)
		32: Xmm	constructor(x64_por, [12, 31], 15)
		33: InstOutput	constructor(output_xmm, [32], 16)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		6:	const_prim(I8X16)
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1492
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Value	match_tuple(5, 1)
		9: Option(SinkableLoad)	extractor(sinkable_load_exact, 8)
		10: Xmm	constructor(put_in_xmm, [6], 1)
		11: SinkableLoad	match_some(9)
		12: GprMem	constructor(sink_load_to_gpr_mem, [11], 2)
		13: Uimm8	match_tuple(5, 2)
		14: u8	extractor(u8_from_uimm8, 13)
		15: Xmm	constructor(x64_pinsrb, [10, 12, 14], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I8X16)
		9:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1489
	]
	bindings = [
		0: Inst	argument(0)
		3: bool	constructor(use_sse41, [], 0)
		4: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		5: (Value, Value, Uimm8)	match_some(4)
		6: Value	match_tuple(5, 0)
		7: Type	extractor(value_type, 6)
		8: Xmm	constructor(put_in_xmm, [6], 1)
		9: Value	match_tuple(5, 1)
		10: GprMem	constructor(put_in_gpr_mem, [9], 2)
		11: Uimm8	match_tuple(5, 2)
		12: u8	extractor(u8_from_uimm8, 11)
		13: Xmm	constructor(x64_pinsrb, [8, 10, 12], 3)
		14: InstOutput	constructor(output_xmm, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	const_prim(true)
		4:	some
		7:	const_prim(I8X16)
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1482
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(x86_blendv, 7)
		9: (Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 2)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Value	match_tuple(9, 0)
		15: Xmm	constructor(put_in_xmm, [14], 3)
		16: Xmm	constructor(x64_blendvpd, [11, 13, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1477
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(x86_blendv, 7)
		9: (Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 2)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Value	match_tuple(9, 0)
		15: Xmm	constructor(put_in_xmm, [14], 3)
		16: Xmm	constructor(x64_blendvps, [11, 13, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		6:	const_prim(true)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1472
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(x86_blendv, 7)
		9: (Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 2)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Value	match_tuple(9, 0)
		15: Xmm	constructor(put_in_xmm, [14], 3)
		16: Xmm	constructor(x64_pblendvb, [11, 13, 15], 4)
		17: InstOutput	constructor(output_xmm, [16], 5)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		6:	const_prim(true)
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1464
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(bitselect, 7)
		9: (Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Type	match_some(6)
		15: Xmm	constructor(sse_and, [14, 11, 13], 3)
		16: Xmm	constructor(put_in_xmm, [10], 4)
		17: Xmm	constructor(vector_all_ones, [], 5)
		18: XmmMem	constructor(xmm_to_xmm_mem, [17], 6)
		19: Xmm	constructor(x64_xor_vector, [14, 16, 18], 7)
		20: Value	match_tuple(9, 2)
		21: XmmMem	constructor(put_in_xmm_mem, [20], 8)
		22: Xmm	constructor(sse_and, [14, 19, 21], 9)
		23: XmmMem	constructor(xmm_to_xmm_mem, [22], 10)
		24: Xmm	constructor(sse_or, [14, 15, 23], 11)
		25: InstOutput	constructor(output_xmm, [24], 12)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1459
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(bitselect, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_int_ref_scalar_64, 7)
		9: (Value, Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Type	match_some(8)
		15: Gpr	constructor(x64_and, [14, 11, 13], 3)
		16: Gpr	constructor(put_in_gpr, [10], 4)
		17: Gpr	constructor(x64_not, [14, 16], 5)
		18: Value	match_tuple(9, 2)
		19: GprMemImm	constructor(put_in_gpr_mem_imm, [18], 6)
		20: Gpr	constructor(x64_and, [14, 17, 19], 7)
		21: GprMemImm	constructor(gpr_to_gpr_mem_imm, [20], 8)
		22: Gpr	constructor(x64_or, [14, 15, 21], 9)
		23: InstOutput	constructor(output_gpr, [22], 10)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1454
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(bitselect, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(and_i128, [10, 12], 3)
		14: ValueRegs	constructor(i128_not, [9], 4)
		15: Value	match_tuple(8, 2)
		16: ValueRegs	constructor(put_in_regs, [15], 5)
		17: ValueRegs	constructor(and_i128, [14, 16], 6)
		18: ValueRegs	constructor(or_i128, [13, 17], 7)
		19: InstOutput	constructor(output, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1449
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(bitselect, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((MemFlags, Value))	extractor(bitcast, 11)
		13: (MemFlags, Value)	match_some(12)
		14: Value	match_tuple(13, 1)
		15: Option(Inst)	extractor(def_inst, 14)
		16: Inst	match_some(15)
		17: Option((FloatCC, Value, Value))	extractor(fcmp, 16)
		18: (FloatCC, Value, Value)	match_some(17)
		19: FloatCC	match_tuple(18, 0)
		20: Value	match_tuple(18, 1)
		21: Value	match_tuple(8, 2)
		22: Value	match_tuple(18, 2)
		23: Value	match_tuple(8, 1)
		24: Xmm	constructor(put_in_xmm, [22], 1)
		25: XmmMem	constructor(put_in_xmm_mem, [20], 2)
		26: Xmm	constructor(x64_maxpd, [24, 25], 3)
		27: InstOutput	constructor(output_xmm, [26], 4)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		10:	some
		12:	some
		15:	some
		17:	some
		19:	variant(FloatCC::LessThan)
	]
	equals = [
		21 == 20
		23 == 22
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1447
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(bitselect, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((MemFlags, Value))	extractor(bitcast, 11)
		13: (MemFlags, Value)	match_some(12)
		14: Value	match_tuple(13, 1)
		15: Option(Inst)	extractor(def_inst, 14)
		16: Inst	match_some(15)
		17: Option((FloatCC, Value, Value))	extractor(fcmp, 16)
		18: (FloatCC, Value, Value)	match_some(17)
		19: FloatCC	match_tuple(18, 0)
		20: Value	match_tuple(18, 1)
		21: Value	match_tuple(8, 2)
		22: Value	match_tuple(18, 2)
		23: Value	match_tuple(8, 1)
		24: Xmm	constructor(put_in_xmm, [22], 1)
		25: XmmMem	constructor(put_in_xmm_mem, [20], 2)
		26: Xmm	constructor(x64_maxps, [24, 25], 3)
		27: InstOutput	constructor(output_xmm, [26], 4)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
		10:	some
		12:	some
		15:	some
		17:	some
		19:	variant(FloatCC::LessThan)
	]
	equals = [
		21 == 20
		23 == 22
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1444
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(bitselect, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((MemFlags, Value))	extractor(bitcast, 11)
		13: (MemFlags, Value)	match_some(12)
		14: Value	match_tuple(13, 1)
		15: Option(Inst)	extractor(def_inst, 14)
		16: Inst	match_some(15)
		17: Option((FloatCC, Value, Value))	extractor(fcmp, 16)
		18: (FloatCC, Value, Value)	match_some(17)
		19: FloatCC	match_tuple(18, 0)
		20: Value	match_tuple(18, 1)
		21: Value	match_tuple(8, 1)
		22: Value	match_tuple(18, 2)
		23: Value	match_tuple(8, 2)
		24: Xmm	constructor(put_in_xmm, [20], 1)
		25: XmmMem	constructor(put_in_xmm_mem, [22], 2)
		26: Xmm	constructor(x64_minpd, [24, 25], 3)
		27: InstOutput	constructor(output_xmm, [26], 4)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
		10:	some
		12:	some
		15:	some
		17:	some
		19:	variant(FloatCC::LessThan)
	]
	equals = [
		21 == 20
		23 == 22
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1442
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value, Value))	extractor(bitselect, 6)
		8: (Value, Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((MemFlags, Value))	extractor(bitcast, 11)
		13: (MemFlags, Value)	match_some(12)
		14: Value	match_tuple(13, 1)
		15: Option(Inst)	extractor(def_inst, 14)
		16: Inst	match_some(15)
		17: Option((FloatCC, Value, Value))	extractor(fcmp, 16)
		18: (FloatCC, Value, Value)	match_some(17)
		19: FloatCC	match_tuple(18, 0)
		20: Value	match_tuple(18, 1)
		21: Value	match_tuple(8, 1)
		22: Value	match_tuple(18, 2)
		23: Value	match_tuple(8, 2)
		24: Xmm	constructor(put_in_xmm, [20], 1)
		25: XmmMem	constructor(put_in_xmm_mem, [22], 2)
		26: Xmm	constructor(x64_minps, [24, 25], 3)
		27: InstOutput	constructor(output_xmm, [26], 4)
		28: Option(InstOutput)	some(27)
		29: Option(Option(InstOutput))	some(28)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
		10:	some
		12:	some
		15:	some
		17:	some
		19:	variant(FloatCC::LessThan)
	]
	equals = [
		21 == 20
		23 == 22
	]
	result = 29
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1420
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: bool	constructor(use_sse41, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value, Value))	extractor(bitselect, 8)
		10: (Value, Value, Value)	match_some(9)
		11: Value	match_tuple(10, 0)
		12: Option(bool)	constructor(all_ones_or_all_zeros, [11], 0)
		13: Value	match_tuple(10, 2)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(10, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(put_in_xmm, [11], 3)
		18: Xmm	constructor(x64_pblendvb, [14, 16, 17], 4)
		19: InstOutput	constructor(output_xmm, [18], 5)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_prim(true)
		9:	some
		12:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1406
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(bitselect, 7)
		9: (Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Xmm	constructor(put_in_xmm, [12], 2)
		14: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		15: Xmm	constructor(sse_and, [5, 13, 14], 4)
		16: Value	match_tuple(9, 2)
		17: XmmMem	constructor(put_in_xmm_mem, [16], 5)
		18: Xmm	constructor(sse_and_not, [5, 11, 17], 6)
		19: XmmMem	constructor(xmm_to_xmm_mem, [15], 7)
		20: Xmm	constructor(sse_or, [5, 18, 19], 8)
		21: InstOutput	constructor(output_xmm, [20], 9)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1401
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Xmm	constructor(vector_all_ones, [], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		13: Xmm	constructor(x64_xor_vector, [5, 10, 12], 4)
		14: InstOutput	constructor(output_xmm, [13], 5)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1396
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Xmm	constructor(vector_all_ones, [], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [11], 3)
		13: Type	match_some(6)
		14: Xmm	constructor(x64_xor_vector, [13, 10, 12], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1391
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bnot, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(i128_not, [8], 1)
		10: InstOutput	constructor(output, [9], 2)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1376
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Gpr	constructor(x64_not, [5, 10], 2)
		12: InstOutput	constructor(output_gpr, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1369
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(bmask, 5)
		7: Value	match_some(6)
		8: ValueRegs	constructor(put_in_regs, [7], 1)
		9: Type	match_tuple(4, 0)
		10: Type	extractor(value_type, 7)
		11: ValueRegs	constructor(lower_bmask, [9, 10, 8], 2)
		12: InstOutput	constructor(output, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1324
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fneg, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Xmm	constructor(vector_all_ones, [], 2)
		11: u32	const_int(63, u32)
		12: XmmMemImm	constructor(xmi_imm, [11], 3)
		13: Xmm	constructor(x64_psllq, [10, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_xorpd, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1320
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fneg, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Xmm	constructor(vector_all_ones, [], 2)
		11: u32	const_int(31, u32)
		12: XmmMemImm	constructor(xmi_imm, [11], 3)
		13: Xmm	constructor(x64_pslld, [10, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_xorps, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1317
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fneg, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(F64)
		11: u64	const_int(9223372036854775808, u64)
		12: Reg	constructor(imm, [10, 11], 2)
		13: XmmMem	constructor(reg_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_xorpd, [9, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1314
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fneg, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(F32)
		11: u64	const_int(2147483648, u64)
		12: Reg	constructor(imm, [10, 11], 2)
		13: XmmMem	constructor(reg_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_xorps, [9, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1308
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Xmm	constructor(vector_all_ones, [], 2)
		11: u32	const_int(1, u32)
		12: XmmMemImm	constructor(xmi_imm, [11], 3)
		13: Xmm	constructor(x64_psrlq, [10, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_andpd, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1303
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Xmm	constructor(vector_all_ones, [], 2)
		11: u32	const_int(1, u32)
		12: XmmMemImm	constructor(xmi_imm, [11], 3)
		13: Xmm	constructor(x64_psrld, [10, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_andps, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(F32X4)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1299
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(F64)
		11: u64	const_int(9223372036854775807, u64)
		12: Reg	constructor(imm, [10, 11], 2)
		13: XmmMem	constructor(reg_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_andpd, [9, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1296
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(F32)
		11: u64	const_int(2147483647, u64)
		12: Reg	constructor(imm, [10, 11], 2)
		13: XmmMem	constructor(reg_to_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_andps, [9, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1274
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(0, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: usize	const_int(1, usize)
		13: Gpr	constructor(value_regs_get_gpr, [9, 12], 3)
		14: Type	const_prim(I64)
		15: ProducesFlags	constructor(x64_neg_paired, [14, 11], 4)
		16: u64	const_int(0, u64)
		17: Reg	constructor(imm, [14, 16], 5)
		18: GprMemImm	constructor(reg_to_gpr_mem_imm, [17], 6)
		19: ConsumesFlags	constructor(x64_adc_paired, [14, 13, 18], 7)
		20: ValueRegs	constructor(with_flags, [15, 19], 8)
		21: Reg	constructor(value_regs_get, [20, 12], 9)
		22: Gpr	constructor(gpr_new, [21], 10)
		23: ProducesFlags	constructor(x64_neg_paired, [14, 22], 11)
		24: ProducesFlags	constructor(produces_flags_ignore, [23], 12)
		25: GprMem	constructor(gpr_to_gpr_mem, [11], 13)
		26: Reg	constructor(value_regs_get, [20, 10], 14)
		27: Gpr	constructor(gpr_new, [26], 15)
		28: CC	make_variant(CC::S, [])
		29: ConsumesFlags	constructor(cmove, [14, 28, 25, 27], 16)
		30: GprMem	constructor(gpr_to_gpr_mem, [13], 17)
		31: Reg	constructor(produces_flags_get_reg, [23], 18)
		32: Gpr	constructor(gpr_new, [31], 19)
		33: ConsumesFlags	constructor(cmove, [14, 28, 30, 32], 20)
		34: ConsumesFlags	constructor(consumes_flags_concat, [29, 33], 21)
		35: ValueRegs	constructor(with_flags, [24, 34], 22)
		36: InstOutput	constructor(output, [35], 23)
		37: Option(InstOutput)	some(36)
		38: Option(Option(InstOutput))	some(37)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 38
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1261
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(iabs, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	match_some(6)
		12: ProducesFlags	constructor(x64_neg_paired, [11, 10], 2)
		13: Reg	constructor(produces_flags_get_reg, [12], 3)
		14: Gpr	constructor(gpr_new, [13], 4)
		15: GprMem	constructor(gpr_to_gpr_mem, [10], 5)
		16: CC	make_variant(CC::S, [])
		17: ConsumesFlags	constructor(cmove, [11, 16, 15, 14], 6)
		18: ProducesFlags	constructor(produces_flags_ignore, [12], 7)
		19: Reg	constructor(with_flags_reg, [18, 17], 8)
		20: InstOutput	constructor(output_reg, [19], 9)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1252
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: u32	const_int(31, u32)
		11: RegMemImm	make_variant(RegMemImm::Imm, [10])
		12: XmmMemImm	constructor(xmm_mem_imm_new, [11], 2)
		13: Xmm	constructor(x64_psrad, [9, 12], 3)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 4)
		15: u8	const_int(245, u8)
		16: Xmm	constructor(x64_pshufd, [14, 15], 5)
		17: XmmMem	constructor(xmm_to_xmm_mem, [16], 6)
		18: Xmm	constructor(x64_pxor, [9, 17], 7)
		19: XmmMem	constructor(xmm_to_xmm_mem, [16], 8)
		20: Xmm	constructor(x64_psubq, [18, 19], 9)
		21: InstOutput	constructor(output_xmm, [20], 10)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1243
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_sse41, [], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(iabs, 7)
		9: Value	match_some(8)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Type	const_prim(I64X2)
		12: u64	const_int(0, u64)
		13: Reg	constructor(imm, [11, 12], 2)
		14: Xmm	constructor(xmm_new, [13], 3)
		15: XmmMem	constructor(xmm_to_xmm_mem, [10], 4)
		16: Xmm	constructor(x64_psubq, [14, 15], 5)
		17: XmmMem	constructor(xmm_to_xmm_mem, [10], 6)
		18: Xmm	constructor(x64_blendvpd, [16, 17, 16], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		8:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1234
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: bool	constructor(use_avx512vl, [], 0)
		7: bool	constructor(use_avx512f, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option(Value)	extractor(iabs, 8)
		10: Value	match_some(9)
		11: XmmMem	constructor(put_in_xmm_mem, [10], 1)
		12: Xmm	constructor(x64_vpabsq, [11], 2)
		13: InstOutput	constructor(output_xmm, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		6:	const_prim(true)
		7:	const_prim(true)
		9:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1225
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: u32	const_int(31, u32)
		11: XmmMemImm	constructor(xmi_imm, [10], 2)
		12: Xmm	constructor(x64_psrad, [9, 11], 3)
		13: XmmMem	constructor(xmm_to_xmm_mem, [12], 4)
		14: Xmm	constructor(x64_pxor, [9, 13], 5)
		15: XmmMem	constructor(xmm_to_xmm_mem, [12], 6)
		16: Xmm	constructor(x64_psubd, [14, 15], 7)
		17: InstOutput	constructor(output_xmm, [16], 8)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1215
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: bool	constructor(use_ssse3, [], 0)
		9: Value	match_some(7)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		11: Xmm	constructor(x64_pabsd, [10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
		8:	const_prim(true)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1208
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(I16X8)
		11: Xmm	constructor(xmm_zero, [10], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [9], 3)
		13: Xmm	constructor(x64_psubw, [11, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_pmaxsw, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1204
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: bool	constructor(use_ssse3, [], 0)
		9: Value	match_some(7)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		11: Xmm	constructor(x64_pabsw, [10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
		8:	const_prim(true)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1197
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Value	match_some(7)
		9: Xmm	constructor(put_in_xmm, [8], 1)
		10: Type	const_prim(I8X16)
		11: Xmm	constructor(xmm_zero, [10], 2)
		12: XmmMem	constructor(xmm_to_xmm_mem, [9], 3)
		13: Xmm	constructor(x64_psubb, [11, 12], 4)
		14: XmmMem	constructor(xmm_to_xmm_mem, [13], 5)
		15: Xmm	constructor(x64_pminub, [9, 14], 6)
		16: InstOutput	constructor(output_xmm, [15], 7)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1190
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: bool	constructor(use_ssse3, [], 0)
		9: Value	match_some(7)
		10: XmmMem	constructor(put_in_xmm_mem, [9], 1)
		11: Xmm	constructor(x64_pabsb, [10], 2)
		12: InstOutput	constructor(output_xmm, [11], 3)
		13: Option(InstOutput)	some(12)
		14: Option(Option(InstOutput))	some(13)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
		8:	const_prim(true)
	]
	result = 14
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1179
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(uwiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(uwiden_low, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: XmmMem	constructor(put_in_xmm_mem, [19], 1)
		34: u8	const_int(80, u8)
		35: Xmm	constructor(x64_pshufd, [33, 34], 2)
		36: XmmMem	constructor(put_in_xmm_mem, [27], 3)
		37: Xmm	constructor(x64_pshufd, [36, 34], 4)
		38: XmmMem	constructor(xmm_to_xmm_mem, [37], 5)
		39: Xmm	constructor(x64_pmuludq, [35, 38], 6)
		40: InstOutput	constructor(output_xmm, [39], 7)
		41: Option(InstOutput)	some(40)
		42: Option(Option(InstOutput))	some(41)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(32)
		24:	const_int(4)
		26:	some
		29:	some
		31:	const_int(32)
		32:	const_int(4)
	]
	result = 42
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1167
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(uwiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(uwiden_low, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: Xmm	constructor(put_in_xmm, [19], 1)
		34: Xmm	constructor(put_in_xmm, [27], 2)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 3)
		36: Xmm	constructor(x64_pmullw, [33, 35], 4)
		37: XmmMem	constructor(xmm_to_xmm_mem, [34], 5)
		38: Xmm	constructor(x64_pmulhuw, [33, 37], 6)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 7)
		40: Xmm	constructor(x64_punpcklwd, [36, 39], 8)
		41: InstOutput	constructor(output_xmm, [40], 9)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(16)
		24:	const_int(8)
		26:	some
		29:	some
		31:	const_int(16)
		32:	const_int(8)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1157
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(uwiden_high, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: XmmMem	constructor(put_in_xmm_mem, [19], 1)
		34: u8	const_int(250, u8)
		35: Xmm	constructor(x64_pshufd, [33, 34], 2)
		36: XmmMem	constructor(put_in_xmm_mem, [27], 3)
		37: Xmm	constructor(x64_pshufd, [36, 34], 4)
		38: XmmMem	constructor(xmm_to_xmm_mem, [37], 5)
		39: Xmm	constructor(x64_pmuludq, [35, 38], 6)
		40: InstOutput	constructor(output_xmm, [39], 7)
		41: Option(InstOutput)	some(40)
		42: Option(Option(InstOutput))	some(41)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(32)
		24:	const_int(4)
		26:	some
		29:	some
		31:	const_int(32)
		32:	const_int(4)
	]
	result = 42
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1145
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(uwiden_high, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: Xmm	constructor(put_in_xmm, [19], 1)
		34: Xmm	constructor(put_in_xmm, [27], 2)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 3)
		36: Xmm	constructor(x64_pmullw, [33, 35], 4)
		37: XmmMem	constructor(xmm_to_xmm_mem, [34], 5)
		38: Xmm	constructor(x64_pmulhuw, [33, 37], 6)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 7)
		40: Xmm	constructor(x64_punpckhwd, [36, 39], 8)
		41: InstOutput	constructor(output_xmm, [40], 9)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(16)
		24:	const_int(8)
		26:	some
		29:	some
		31:	const_int(16)
		32:	const_int(8)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1134
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: bool	constructor(use_sse41, [], 0)
		18: Inst	match_some(16)
		19: Option(Value)	extractor(swiden_low, 18)
		20: Value	match_some(19)
		21: Type	extractor(value_type, 20)
		22: Option((u32, u32))	extractor(multi_lane, 21)
		23: (u32, u32)	match_some(22)
		24: u32	match_tuple(23, 0)
		25: u32	match_tuple(23, 1)
		26: Inst	match_some(14)
		27: Option(Value)	extractor(swiden_low, 26)
		28: Value	match_some(27)
		29: Type	extractor(value_type, 28)
		30: Option((u32, u32))	extractor(multi_lane, 29)
		31: (u32, u32)	match_some(30)
		32: u32	match_tuple(31, 0)
		33: u32	match_tuple(31, 1)
		34: XmmMem	constructor(put_in_xmm_mem, [20], 1)
		35: u8	const_int(80, u8)
		36: Xmm	constructor(x64_pshufd, [34, 35], 2)
		37: XmmMem	constructor(put_in_xmm_mem, [28], 3)
		38: Xmm	constructor(x64_pshufd, [37, 35], 4)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 5)
		40: Xmm	constructor(x64_pmuldq, [36, 39], 6)
		41: InstOutput	constructor(output_xmm, [40], 7)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
		14:	some
		16:	some
		17:	const_prim(true)
		19:	some
		22:	some
		24:	const_int(32)
		25:	const_int(4)
		27:	some
		30:	some
		32:	const_int(32)
		33:	const_int(4)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1122
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(swiden_low, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: Xmm	constructor(put_in_xmm, [19], 1)
		34: Xmm	constructor(put_in_xmm, [27], 2)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 3)
		36: Xmm	constructor(x64_pmullw, [33, 35], 4)
		37: XmmMem	constructor(xmm_to_xmm_mem, [34], 5)
		38: Xmm	constructor(x64_pmulhw, [33, 37], 6)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 7)
		40: Xmm	constructor(x64_punpcklwd, [36, 39], 8)
		41: InstOutput	constructor(output_xmm, [40], 9)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(16)
		24:	const_int(8)
		26:	some
		29:	some
		31:	const_int(16)
		32:	const_int(8)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1111
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: bool	constructor(use_sse41, [], 0)
		18: Inst	match_some(16)
		19: Option(Value)	extractor(swiden_high, 18)
		20: Value	match_some(19)
		21: Type	extractor(value_type, 20)
		22: Option((u32, u32))	extractor(multi_lane, 21)
		23: (u32, u32)	match_some(22)
		24: u32	match_tuple(23, 0)
		25: u32	match_tuple(23, 1)
		26: Inst	match_some(14)
		27: Option(Value)	extractor(swiden_high, 26)
		28: Value	match_some(27)
		29: Type	extractor(value_type, 28)
		30: Option((u32, u32))	extractor(multi_lane, 29)
		31: (u32, u32)	match_some(30)
		32: u32	match_tuple(31, 0)
		33: u32	match_tuple(31, 1)
		34: XmmMem	constructor(put_in_xmm_mem, [20], 1)
		35: u8	const_int(250, u8)
		36: Xmm	constructor(x64_pshufd, [34, 35], 2)
		37: XmmMem	constructor(put_in_xmm_mem, [28], 3)
		38: Xmm	constructor(x64_pshufd, [37, 35], 4)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 5)
		40: Xmm	constructor(x64_pmuldq, [36, 39], 6)
		41: InstOutput	constructor(output_xmm, [40], 7)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
		14:	some
		16:	some
		17:	const_prim(true)
		19:	some
		22:	some
		24:	const_int(32)
		25:	const_int(4)
		27:	some
		30:	some
		32:	const_int(32)
		33:	const_int(4)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1099
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Value	match_tuple(12, 0)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Option((u32, u32))	extractor(multi_lane, 20)
		22: (u32, u32)	match_some(21)
		23: u32	match_tuple(22, 0)
		24: u32	match_tuple(22, 1)
		25: Inst	match_some(14)
		26: Option(Value)	extractor(swiden_high, 25)
		27: Value	match_some(26)
		28: Type	extractor(value_type, 27)
		29: Option((u32, u32))	extractor(multi_lane, 28)
		30: (u32, u32)	match_some(29)
		31: u32	match_tuple(30, 0)
		32: u32	match_tuple(30, 1)
		33: Xmm	constructor(put_in_xmm, [19], 1)
		34: Xmm	constructor(put_in_xmm, [27], 2)
		35: XmmMem	constructor(xmm_to_xmm_mem, [34], 3)
		36: Xmm	constructor(x64_pmullw, [33, 35], 4)
		37: XmmMem	constructor(xmm_to_xmm_mem, [34], 5)
		38: Xmm	constructor(x64_pmulhw, [33, 37], 6)
		39: XmmMem	constructor(xmm_to_xmm_mem, [38], 7)
		40: Xmm	constructor(x64_punpckhwd, [36, 39], 8)
		41: InstOutput	constructor(output_xmm, [40], 9)
		42: Option(InstOutput)	some(41)
		43: Option(Option(InstOutput))	some(42)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		14:	some
		16:	some
		18:	some
		21:	some
		23:	const_int(16)
		24:	const_int(8)
		26:	some
		29:	some
		31:	const_int(16)
		32:	const_int(8)
	]
	result = 43
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1077
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: Xmm	constructor(put_in_xmm, [15], 2)
		17: u32	const_int(32, u32)
		18: XmmMemImm	constructor(xmi_imm, [17], 3)
		19: Xmm	constructor(x64_psrlq, [14, 18], 4)
		20: XmmMem	constructor(xmm_to_xmm_mem, [16], 5)
		21: Xmm	constructor(x64_pmuludq, [19, 20], 6)
		22: XmmMemImm	constructor(xmi_imm, [17], 7)
		23: Xmm	constructor(x64_psrlq, [16, 22], 8)
		24: XmmMem	constructor(xmm_to_xmm_mem, [23], 9)
		25: Xmm	constructor(x64_pmuludq, [14, 24], 10)
		26: XmmMem	constructor(xmm_to_xmm_mem, [25], 11)
		27: Xmm	constructor(x64_paddq, [21, 26], 12)
		28: XmmMemImm	constructor(xmi_imm, [17], 13)
		29: Xmm	constructor(x64_psllq, [27, 28], 14)
		30: XmmMem	constructor(xmm_to_xmm_mem, [16], 15)
		31: Xmm	constructor(x64_pmuludq, [14, 30], 16)
		32: XmmMem	constructor(xmm_to_xmm_mem, [29], 17)
		33: Xmm	constructor(x64_paddq, [31, 32], 18)
		34: InstOutput	constructor(output_xmm, [33], 19)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1052
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: bool	constructor(use_avx512vl, [], 0)
		11: Inst	match_tuple(4, 1)
		12: Option((Value, Value))	extractor(imul, 11)
		13: bool	constructor(use_avx512dq, [], 0)
		14: (Value, Value)	match_some(12)
		15: Value	match_tuple(14, 0)
		16: Xmm	constructor(put_in_xmm, [15], 1)
		17: Value	match_tuple(14, 1)
		18: XmmMem	constructor(put_in_xmm_mem, [17], 2)
		19: Xmm	constructor(x64_vpmullq, [16, 18], 3)
		20: InstOutput	constructor(output_xmm, [19], 4)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		10:	const_prim(true)
		12:	some
		13:	const_prim(true)
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1039
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: Xmm	constructor(put_in_xmm, [15], 2)
		17: XmmMem	constructor(xmm_to_xmm_mem, [14], 3)
		18: u8	const_int(49, u8)
		19: Xmm	constructor(x64_pshufd, [17, 18], 4)
		20: XmmMem	constructor(xmm_to_xmm_mem, [16], 5)
		21: Xmm	constructor(x64_pshufd, [20, 18], 6)
		22: XmmMem	constructor(xmm_to_xmm_mem, [16], 7)
		23: Xmm	constructor(x64_pmuludq, [14, 22], 8)
		24: XmmMem	constructor(xmm_to_xmm_mem, [23], 9)
		25: u8	const_int(8, u8)
		26: Xmm	constructor(x64_pshufd, [24, 25], 10)
		27: XmmMem	constructor(xmm_to_xmm_mem, [21], 11)
		28: Xmm	constructor(x64_pmuludq, [19, 27], 12)
		29: XmmMem	constructor(xmm_to_xmm_mem, [28], 13)
		30: Xmm	constructor(x64_pshufd, [29, 25], 14)
		31: XmmMem	constructor(xmm_to_xmm_mem, [30], 15)
		32: Xmm	constructor(x64_punpckldq, [26, 31], 16)
		33: InstOutput	constructor(output_xmm, [32], 17)
		34: Option(InstOutput)	some(33)
		35: Option(Option(InstOutput))	some(34)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
	]
	result = 35
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1032
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: bool	constructor(use_sse41, [], 0)
		13: (Value, Value)	match_some(11)
		14: Value	match_tuple(13, 0)
		15: Xmm	constructor(put_in_xmm, [14], 1)
		16: Value	match_tuple(13, 1)
		17: XmmMem	constructor(put_in_xmm_mem, [16], 2)
		18: Xmm	constructor(x64_pmulld, [15, 17], 3)
		19: InstOutput	constructor(output_xmm, [18], 4)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
		12:	const_prim(true)
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1029
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(imul, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_pmullw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 1002
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: usize	const_int(1, usize)
		14: Gpr	constructor(value_regs_get_gpr, [10, 13], 3)
		15: Value	match_tuple(8, 1)
		16: ValueRegs	constructor(put_in_regs, [15], 4)
		17: Gpr	constructor(value_regs_get_gpr, [16, 11], 5)
		18: Gpr	constructor(value_regs_get_gpr, [16, 13], 6)
		19: GprMem	constructor(gpr_to_gpr_mem, [18], 7)
		20: Type	const_prim(I64)
		21: Gpr	constructor(x64_imul, [20, 12, 19], 8)
		22: GprMem	constructor(gpr_to_gpr_mem, [17], 9)
		23: Gpr	constructor(x64_imul, [20, 14, 22], 10)
		24: GprMemImm	constructor(gpr_to_gpr_mem_imm, [23], 11)
		25: Gpr	constructor(x64_add, [20, 21, 24], 12)
		26: GprMem	constructor(gpr_to_gpr_mem, [17], 13)
		27: bool	const_prim(false)
		28: ValueRegs	constructor(x64_mul, [20, 27, 12, 26], 14)
		29: Gpr	constructor(value_regs_get_gpr, [28, 11], 15)
		30: Gpr	constructor(value_regs_get_gpr, [28, 13], 16)
		31: GprMemImm	constructor(gpr_to_gpr_mem_imm, [30], 17)
		32: Gpr	constructor(x64_add, [20, 25, 31], 18)
		33: ValueRegs	constructor(value_gprs, [29, 32], 19)
		34: InstOutput	constructor(output, [33], 20)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 984
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(imul, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_int_ref_16_to_64, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Imm64	match_some(13)
		15: Option(i32)	extractor(simm32, 14)
		16: Value	match_tuple(9, 1)
		17: GprMem	constructor(put_in_gpr_mem, [16], 1)
		18: Type	match_some(8)
		19: i32	match_some(15)
		20: Gpr	constructor(x64_imul_imm, [18, 17, 19], 2)
		21: InstOutput	constructor(output_gpr, [20], 3)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		15:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 982
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(imul, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_int_ref_16_to_64, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Imm64	match_some(13)
		15: Option(i32)	extractor(simm32, 14)
		16: Value	match_tuple(9, 0)
		17: GprMem	constructor(put_in_gpr_mem, [16], 1)
		18: Type	match_some(8)
		19: i32	match_some(15)
		20: Gpr	constructor(x64_imul_imm, [18, 17, 19], 2)
		21: InstOutput	constructor(output_gpr, [20], 3)
		22: Option(InstOutput)	some(21)
		23: Option(Option(InstOutput))	some(22)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		15:	some
	]
	result = 23
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 978
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(imul, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(SinkableLoad)	extractor(sinkable_load, 8)
		10: Type	match_tuple(4, 0)
		11: Option(Type)	extractor(ty_int_ref_16_to_64, 10)
		12: Value	match_tuple(7, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(9)
		15: GprMem	constructor(sink_load_to_gpr_mem, [14], 2)
		16: Type	match_some(11)
		17: Gpr	constructor(x64_imul, [16, 13, 15], 3)
		18: InstOutput	constructor(output_gpr, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 976
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(imul, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_int_ref_16_to_64, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMem	constructor(put_in_gpr_mem, [12], 2)
		14: Type	match_some(8)
		15: Gpr	constructor(x64_imul, [14, 11, 13], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 973
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(SinkableLoad)	extractor(sinkable_load, 9)
		11: Value	match_tuple(8, 1)
		12: Gpr	constructor(put_in_gpr, [11], 1)
		13: SinkableLoad	match_some(10)
		14: GprMem	constructor(sink_load_to_gpr_mem, [13], 2)
		15: bool	const_prim(false)
		16: Gpr	constructor(x64_mul8, [15, 12, 14], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
		10:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 972
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Value	match_tuple(8, 1)
		12: GprMem	constructor(put_in_gpr_mem, [11], 2)
		13: bool	const_prim(false)
		14: Gpr	constructor(x64_mul8, [13, 10, 12], 3)
		15: InstOutput	constructor(output_gpr, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 962
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(avg_round, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_pavgw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 958
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(avg_round, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_pavgb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 953
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: Type	const_prim(I64X2)
		9: u64	const_int(0, u64)
		10: Reg	constructor(imm, [8, 9], 1)
		11: Xmm	constructor(xmm_new, [10], 2)
		12: Value	match_some(7)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_psubq, [11, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 950
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: Type	const_prim(I32X4)
		9: u64	const_int(0, u64)
		10: Reg	constructor(imm, [8, 9], 1)
		11: Xmm	constructor(xmm_new, [10], 2)
		12: Value	match_some(7)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_psubd, [11, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 947
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: Type	const_prim(I16X8)
		9: u64	const_int(0, u64)
		10: Reg	constructor(imm, [8, 9], 1)
		11: Xmm	constructor(xmm_new, [10], 2)
		12: Value	match_some(7)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_psubw, [11, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 944
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: Type	const_prim(I8X16)
		9: u64	const_int(0, u64)
		10: Reg	constructor(imm, [8, 9], 1)
		11: Xmm	constructor(xmm_new, [10], 2)
		12: Value	match_some(7)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 3)
		14: Xmm	constructor(x64_psubb, [11, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 933
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(0, usize)
		11: Gpr	constructor(value_regs_get_gpr, [9, 10], 2)
		12: usize	const_int(1, usize)
		13: Gpr	constructor(value_regs_get_gpr, [9, 12], 3)
		14: Type	const_prim(I64)
		15: ProducesFlags	constructor(x64_neg_paired, [14, 11], 4)
		16: u64	const_int(0, u64)
		17: Reg	constructor(imm, [14, 16], 5)
		18: Gpr	constructor(gpr_new, [17], 6)
		19: GprMemImm	constructor(gpr_to_gpr_mem_imm, [13], 7)
		20: ConsumesFlags	constructor(x64_sbb_paired, [14, 18, 19], 8)
		21: ValueRegs	constructor(with_flags, [15, 20], 9)
		22: InstOutput	constructor(output, [21], 10)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 930
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ineg, 7)
		9: Value	match_some(8)
		10: Gpr	constructor(put_in_gpr, [9], 1)
		11: Type	match_some(6)
		12: Gpr	constructor(x64_neg, [11, 10], 2)
		13: InstOutput	constructor(output_gpr, [12], 3)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 916
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Gpr	constructor(lo_gpr, [11], 2)
		13: ValueRegs	constructor(shr_i128, [10, 12], 3)
		14: Type	const_prim(I64)
		15: u64	const_int(128, u64)
		16: Reg	constructor(imm, [14, 15], 4)
		17: Gpr	constructor(gpr_new, [16], 5)
		18: GprMemImm	constructor(gpr_to_gpr_mem_imm, [12], 6)
		19: Gpr	constructor(x64_sub, [14, 17, 18], 7)
		20: ValueRegs	constructor(shl_i128, [10, 19], 8)
		21: ValueRegs	constructor(or_i128, [13, 20], 9)
		22: InstOutput	constructor(output, [21], 10)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 910
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Type	match_some(6)
		14: Imm8Gpr	constructor(put_masked_in_imm8_gpr, [12, 13], 2)
		15: Gpr	constructor(x64_rotr, [13, 11, 14], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 895
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Gpr	constructor(lo_gpr, [11], 2)
		13: ValueRegs	constructor(shl_i128, [10, 12], 3)
		14: Type	const_prim(I64)
		15: u64	const_int(128, u64)
		16: Reg	constructor(imm, [14, 15], 4)
		17: Gpr	constructor(gpr_new, [16], 5)
		18: GprMemImm	constructor(gpr_to_gpr_mem_imm, [12], 6)
		19: Gpr	constructor(x64_sub, [14, 17, 18], 7)
		20: ValueRegs	constructor(shr_i128, [10, 19], 8)
		21: ValueRegs	constructor(or_i128, [13, 20], 9)
		22: InstOutput	constructor(output, [21], 10)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 889
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotl, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Type	match_some(6)
		14: Imm8Gpr	constructor(put_masked_in_imm8_gpr, [12, 13], 2)
		15: Gpr	constructor(x64_rotl, [13, 11, 14], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 829
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Gpr	constructor(put_in_gpr, [11], 2)
		13: u32	const_int(63, u32)
		14: RegMemImm	make_variant(RegMemImm::Imm, [13])
		15: GprMemImm	constructor(gpr_mem_imm_new, [14], 3)
		16: Type	const_prim(I64)
		17: Gpr	constructor(x64_and, [16, 12, 15], 4)
		18: Xmm	constructor(lower_i64x2_sshr_gpr, [10, 17], 5)
		19: InstOutput	constructor(output_xmm, [18], 6)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 826
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Imm64	match_some(12)
		14: u64	extractor(u64_from_imm64, 13)
		15: Option(u32)	extractor(u64_as_u32, 14)
		16: Value	match_tuple(8, 0)
		17: Xmm	constructor(put_in_xmm, [16], 1)
		18: u32	match_some(15)
		19: u32	const_int(63, u32)
		20: u32	constructor(u32_and, [18, 19], 0)
		21: Xmm	constructor(lower_i64x2_sshr_imm, [17, 20], 2)
		22: InstOutput	constructor(output_xmm, [21], 3)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
		10:	some
		12:	some
		15:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 820
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: bool	constructor(use_avx512vl, [], 0)
		9: bool	constructor(use_avx512f, [], 0)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 1)
		12: Gpr	constructor(put_in_gpr, [11], 1)
		13: u8	constructor(shift_mask, [5], 2)
		14: u32	constructor(u8_as_u32, [13], 0)
		15: RegMemImm	make_variant(RegMemImm::Imm, [14])
		16: GprMemImm	constructor(gpr_mem_imm_new, [15], 3)
		17: Type	const_prim(I64)
		18: Gpr	constructor(x64_and, [17, 12, 16], 4)
		19: Value	match_tuple(10, 0)
		20: Xmm	constructor(put_in_xmm, [19], 5)
		21: GprMem	constructor(gpr_to_gpr_mem, [18], 6)
		22: Xmm	constructor(x64_movd_to_xmm, [21], 7)
		23: XmmMem	constructor(xmm_to_xmm_mem, [22], 8)
		24: Xmm	constructor(x64_vpsraq, [20, 23], 9)
		25: InstOutput	constructor(output_xmm, [24], 10)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
		8:	const_prim(true)
		9:	const_prim(true)
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 815
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: bool	constructor(use_avx512vl, [], 0)
		14: bool	constructor(use_avx512f, [], 0)
		15: Value	match_tuple(8, 0)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 1)
		17: Imm64	match_some(12)
		18: u8	constructor(shift_amount_masked, [5, 17], 2)
		19: Xmm	constructor(x64_vpsraq_imm, [16, 18], 3)
		20: InstOutput	constructor(output_xmm, [19], 4)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
		10:	some
		12:	some
		13:	const_prim(true)
		14:	const_prim(true)
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 809
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psrad, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 806
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psraw, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 777
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMem	constructor(xmm_to_xmm_mem, [10], 3)
		14: Xmm	constructor(x64_punpcklbw, [10, 13], 4)
		15: XmmMem	constructor(xmm_to_xmm_mem, [10], 5)
		16: Xmm	constructor(x64_punpckhbw, [10, 15], 6)
		17: Type	extractor(value_type, 11)
		18: XmmMemImm	constructor(sshr_i8x16_bigger_shift, [17, 12], 7)
		19: Xmm	constructor(x64_psraw, [14, 18], 8)
		20: Xmm	constructor(x64_psraw, [16, 18], 9)
		21: XmmMem	constructor(xmm_to_xmm_mem, [20], 10)
		22: Xmm	constructor(x64_packsswb, [19, 21], 11)
		23: InstOutput	constructor(output_xmm, [22], 12)
		24: Option(InstOutput)	some(23)
		25: Option(Option(InstOutput))	some(24)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 25
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 756
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Gpr	constructor(lo_gpr, [9], 1)
		11: Value	match_tuple(8, 0)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(sar_i128, [12, 10], 3)
		14: InstOutput	constructor(output, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 719
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sshr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Type	match_some(6)
		12: ExtendKind	make_variant(ExtendKind::Sign, [])
		13: Gpr	constructor(extend_to_gpr, [10, 11, 12], 1)
		14: Value	match_tuple(9, 1)
		15: Imm8Gpr	constructor(put_masked_in_imm8_gpr, [14, 11], 2)
		16: Gpr	constructor(x64_sar, [11, 13, 15], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 706
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psrlq, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 703
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psrld, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 700
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psrlw, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 654
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: RegMemImm	constructor(mask_xmm_shift, [5, 9], 1)
		11: Value	match_tuple(8, 0)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [10], 3)
		14: Xmm	constructor(x64_psrlw, [12, 13], 4)
		15: SyntheticAmode	constructor(ushr_i8x16_mask, [10], 5)
		16: XmmMem	constructor(synthetic_amode_to_xmm_mem, [15], 6)
		17: Type	const_prim(I8X16)
		18: Xmm	constructor(sse_and, [17, 14, 16], 7)
		19: InstOutput	constructor(output_xmm, [18], 8)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 644
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Gpr	constructor(lo_gpr, [9], 1)
		11: Value	match_tuple(8, 0)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(shr_i128, [12, 10], 3)
		14: InstOutput	constructor(output, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 607
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ushr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Type	match_some(6)
		12: ExtendKind	make_variant(ExtendKind::Zero, [])
		13: Gpr	constructor(extend_to_gpr, [10, 11, 12], 1)
		14: Value	match_tuple(9, 1)
		15: Imm8Gpr	constructor(put_masked_in_imm8_gpr, [14, 11], 2)
		16: Gpr	constructor(x64_shr, [11, 13, 15], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 600
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psllq, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 597
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_pslld, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 594
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Xmm	constructor(put_in_xmm, [9], 1)
		11: Value	match_tuple(8, 1)
		12: RegMemImm	constructor(mask_xmm_shift, [5, 11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [12], 3)
		14: Xmm	constructor(x64_psllw, [10, 13], 4)
		15: InstOutput	constructor(output_xmm, [14], 5)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 549
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: RegMemImm	constructor(mask_xmm_shift, [5, 9], 1)
		11: Value	match_tuple(8, 0)
		12: Xmm	constructor(put_in_xmm, [11], 2)
		13: XmmMemImm	constructor(mov_rmi_to_xmm, [10], 3)
		14: Xmm	constructor(x64_psllw, [12, 13], 4)
		15: SyntheticAmode	constructor(ishl_i8x16_mask, [10], 5)
		16: Type	const_prim(I8X16)
		17: ExtKind	make_variant(ExtKind::None, [])
		18: Reg	constructor(x64_load, [16, 15, 17], 6)
		19: RegMem	make_variant(RegMem::Reg, [18])
		20: XmmMem	constructor(reg_mem_to_xmm_mem, [19], 7)
		21: Xmm	constructor(sse_and, [16, 14, 20], 8)
		22: InstOutput	constructor(output_xmm, [21], 9)
		23: Option(InstOutput)	some(22)
		24: Option(Option(InstOutput))	some(23)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
		7:	some
	]
	result = 24
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 537
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Gpr	constructor(lo_gpr, [9], 1)
		11: Value	match_tuple(8, 0)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(shl_i128, [12, 10], 3)
		14: InstOutput	constructor(output, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 498
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ishl, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Type	match_some(6)
		14: Imm8Gpr	constructor(put_masked_in_imm8_gpr, [12, 13], 2)
		15: Gpr	constructor(x64_shl, [13, 11, 14], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 489
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: bool	constructor(use_bmi1, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(bxor, 8)
		10: (Value, Value)	match_some(9)
		11: Value	match_tuple(10, 0)
		12: Option(Value)	constructor(val_minus_one, [11], 0)
		13: Value	match_tuple(10, 1)
		14: Value	match_some(12)
		15: GprMem	constructor(put_in_gpr_mem, [13], 1)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_blsmsk, [16, 15], 2)
		18: InstOutput	constructor(output_gpr, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_prim(true)
		9:	some
		12:	some
	]
	equals = [
		14 == 13
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 485
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: bool	constructor(use_bmi1, [], 0)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(bxor, 8)
		10: (Value, Value)	match_some(9)
		11: Value	match_tuple(10, 1)
		12: Option(Value)	constructor(val_minus_one, [11], 0)
		13: Value	match_tuple(10, 0)
		14: Value	match_some(12)
		15: GprMem	constructor(put_in_gpr_mem, [13], 1)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_blsmsk, [16, 15], 2)
		18: InstOutput	constructor(output_gpr, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_prim(true)
		9:	some
		12:	some
	]
	equals = [
		14 == 13
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 473
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bxor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: usize	const_int(1, usize)
		14: Gpr	constructor(value_regs_get_gpr, [10, 13], 3)
		15: Value	match_tuple(8, 1)
		16: ValueRegs	constructor(put_in_regs, [15], 4)
		17: Gpr	constructor(value_regs_get_gpr, [16, 11], 5)
		18: Gpr	constructor(value_regs_get_gpr, [16, 13], 6)
		19: GprMemImm	constructor(gpr_to_gpr_mem_imm, [17], 7)
		20: Type	const_prim(I64)
		21: Gpr	constructor(x64_xor, [20, 12, 19], 8)
		22: GprMemImm	constructor(gpr_to_gpr_mem_imm, [18], 9)
		23: Gpr	constructor(x64_xor, [20, 14, 22], 10)
		24: ValueRegs	constructor(value_gprs, [21, 23], 11)
		25: InstOutput	constructor(output, [24], 12)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 468
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(x64_xor_vector, [5, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 463
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Type	match_some(6)
		15: Xmm	constructor(x64_xor_vector, [14, 11, 13], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 457
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(GprMemImm)	extractor(simm32_from_value, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: GprMemImm	match_some(11)
		15: Gpr	constructor(x64_xor, [5, 13, 14], 2)
		16: InstOutput	constructor(output_gpr, [15], 3)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 453
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Gpr	constructor(x64_xor, [5, 13, 15], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 446
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Gpr	constructor(x64_xor, [5, 11, 13], 3)
		15: InstOutput	constructor(output_gpr, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 438
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(or_i128, [10, 12], 3)
		14: InstOutput	constructor(output, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 423
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(sse_or, [5, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 411
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Type	match_some(6)
		15: Xmm	constructor(sse_or, [14, 11, 13], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 405
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(GprMemImm)	extractor(simm32_from_value, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: GprMemImm	match_some(11)
		15: Gpr	constructor(x64_or, [5, 13, 14], 2)
		16: InstOutput	constructor(output_gpr, [15], 3)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 401
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Gpr	constructor(x64_or, [5, 13, 15], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 394
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Gpr	constructor(x64_or, [5, 11, 13], 3)
		15: InstOutput	constructor(output_gpr, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 384
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Value)	constructor(val_minus_one, [10], 0)
		12: bool	constructor(use_bmi2, [], 0)
		13: Value	match_some(11)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Inst	match_some(14)
		16: Option((Value, Value))	extractor(ishl, 15)
		17: (Value, Value)	match_some(16)
		18: Value	match_tuple(17, 0)
		19: Option(u64)	extractor(u64_from_iconst, 18)
		20: u64	match_some(19)
		21: Value	match_tuple(9, 0)
		22: GprMem	constructor(put_in_gpr_mem, [21], 1)
		23: Value	match_tuple(17, 1)
		24: Gpr	constructor(put_in_gpr, [23], 2)
		25: Type	match_some(6)
		26: u8	constructor(ty_bits, [25], 0)
		27: u32	constructor(u8_as_u32, [26], 0)
		28: u32	const_int(1, u32)
		29: u32	constructor(u32_sub, [27, 28], 0)
		30: RegMemImm	make_variant(RegMemImm::Imm, [29])
		31: GprMemImm	constructor(gpr_mem_imm_new, [30], 3)
		32: Gpr	constructor(x64_and, [25, 24, 31], 4)
		33: Gpr	constructor(x64_bzhi, [25, 22, 32], 5)
		34: InstOutput	constructor(output_gpr, [33], 6)
		35: Option(InstOutput)	some(34)
		36: Option(Option(InstOutput))	some(35)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		12:	const_prim(true)
		14:	some
		16:	some
		19:	some
		20:	const_int(1)
	]
	result = 36
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 371
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: bool	constructor(use_bmi1, [], 0)
		13: Inst	match_some(11)
		14: Option(Value)	extractor(ineg, 13)
		15: Value	match_tuple(9, 0)
		16: Value	match_some(14)
		17: GprMem	constructor(put_in_gpr_mem, [15], 1)
		18: Type	match_some(6)
		19: Gpr	constructor(x64_blsi, [18, 17], 2)
		20: InstOutput	constructor(output_gpr, [19], 3)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		12:	const_prim(true)
		14:	some
	]
	equals = [
		16 == 15
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 368
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: bool	constructor(use_bmi1, [], 0)
		13: Inst	match_some(11)
		14: Option(Value)	extractor(ineg, 13)
		15: Value	match_some(14)
		16: Value	match_tuple(9, 1)
		17: GprMem	constructor(put_in_gpr_mem, [15], 1)
		18: Type	match_some(6)
		19: Gpr	constructor(x64_blsi, [18, 17], 2)
		20: InstOutput	constructor(output_gpr, [19], 3)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		12:	const_prim(true)
		14:	some
	]
	equals = [
		16 == 15
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 361
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: bool	constructor(use_bmi1, [], 0)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Option(Value)	constructor(val_minus_one, [11], 0)
		13: Value	match_tuple(10, 1)
		14: Value	match_some(12)
		15: GprMem	constructor(put_in_gpr_mem, [13], 1)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_blsr, [16, 15], 2)
		18: InstOutput	constructor(output_gpr, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	const_prim(true)
		12:	some
	]
	equals = [
		14 == 13
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 357
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: bool	constructor(use_bmi1, [], 0)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 1)
		12: Option(Value)	constructor(val_minus_one, [11], 0)
		13: Value	match_tuple(10, 0)
		14: Value	match_some(12)
		15: GprMem	constructor(put_in_gpr_mem, [13], 1)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_blsr, [16, 15], 2)
		18: InstOutput	constructor(output_gpr, [17], 3)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		9:	const_prim(true)
		12:	some
	]
	equals = [
		14 == 13
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 345
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: bool	constructor(use_bmi1, [], 0)
		15: Value	match_some(13)
		16: Gpr	constructor(put_in_gpr, [15], 1)
		17: Value	match_tuple(9, 1)
		18: GprMem	constructor(put_in_gpr_mem, [17], 2)
		19: Gpr	constructor(x64_andn, [7, 16, 18], 3)
		20: InstOutput	constructor(output_gpr, [19], 4)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		14:	const_prim(true)
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 340
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: bool	constructor(use_bmi1, [], 0)
		15: Value	match_some(13)
		16: Gpr	constructor(put_in_gpr, [15], 1)
		17: Value	match_tuple(9, 0)
		18: GprMem	constructor(put_in_gpr_mem, [17], 2)
		19: Gpr	constructor(x64_andn, [7, 16, 18], 3)
		20: InstOutput	constructor(output_gpr, [19], 4)
		21: Option(InstOutput)	some(20)
		22: Option(Option(InstOutput))	some(21)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
		14:	const_prim(true)
	]
	result = 22
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 337
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: Value	match_some(13)
		15: Xmm	constructor(put_in_xmm, [14], 1)
		16: Value	match_tuple(9, 1)
		17: XmmMem	constructor(put_in_xmm_mem, [16], 2)
		18: Xmm	constructor(sse_and_not, [5, 15, 17], 3)
		19: InstOutput	constructor(output_xmm, [18], 4)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 335
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: Value	match_some(13)
		15: Xmm	constructor(put_in_xmm, [14], 1)
		16: Value	match_tuple(9, 0)
		17: XmmMem	constructor(put_in_xmm_mem, [16], 2)
		18: Xmm	constructor(sse_and_not, [5, 15, 17], 3)
		19: InstOutput	constructor(output_xmm, [18], 4)
		20: Option(InstOutput)	some(19)
		21: Option(Option(InstOutput))	some(20)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
		13:	some
	]
	result = 21
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 316
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(band, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(and_i128, [10, 12], 3)
		14: InstOutput	constructor(output, [13], 4)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 299
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Xmm	constructor(sse_and, [5, 11, 13], 3)
		15: InstOutput	constructor(output_xmm, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 287
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_scalar_float, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Xmm	constructor(put_in_xmm, [10], 1)
		12: Value	match_tuple(9, 1)
		13: XmmMem	constructor(put_in_xmm_mem, [12], 2)
		14: Type	match_some(8)
		15: Xmm	constructor(sse_and, [14, 11, 13], 3)
		16: InstOutput	constructor(output_xmm, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 281
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Option(GprMemImm)	extractor(simm32_from_value, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: GprMemImm	match_some(11)
		15: Gpr	constructor(x64_and, [7, 13, 14], 2)
		16: InstOutput	constructor(output_gpr, [15], 3)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 277
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Gpr	constructor(x64_and, [7, 13, 15], 3)
		17: InstOutput	constructor(output_gpr, [16], 4)
		18: Option(InstOutput)	some(17)
		19: Option(Option(InstOutput))	some(18)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 19
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 270
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(band, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Gpr	constructor(x64_and, [7, 11, 13], 3)
		15: InstOutput	constructor(output_gpr, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 261
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(usub_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubusw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 257
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(usub_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubusb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 251
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(ssub_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubsw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 247
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(ssub_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubsb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 232
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(isub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: usize	const_int(1, usize)
		14: Gpr	constructor(value_regs_get_gpr, [10, 13], 3)
		15: Value	match_tuple(8, 1)
		16: ValueRegs	constructor(put_in_regs, [15], 4)
		17: Gpr	constructor(value_regs_get_gpr, [16, 11], 5)
		18: Gpr	constructor(value_regs_get_gpr, [16, 13], 6)
		19: GprMemImm	constructor(gpr_to_gpr_mem_imm, [17], 7)
		20: Type	const_prim(I64)
		21: ProducesFlags	constructor(x64_sub_with_flags_paired, [20, 12, 19], 8)
		22: GprMemImm	constructor(gpr_to_gpr_mem_imm, [18], 9)
		23: ConsumesFlags	constructor(x64_sbb_paired, [20, 14, 22], 10)
		24: ValueRegs	constructor(with_flags, [21, 23], 11)
		25: InstOutput	constructor(output, [24], 12)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 227
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(isub, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubq, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(64)
		9:	const_int(2)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 223
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(isub, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubd, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(32)
		9:	const_int(4)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 219
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(isub, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 215
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(isub, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_psubb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 209
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Type	match_some(6)
		15: Gpr	constructor(x64_sub, [14, 11, 13], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 200
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(uadd_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddusw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 196
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(uadd_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddusb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 190
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(sadd_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddsw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(16)
		9:	const_int(8)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 186
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: Inst	match_tuple(4, 1)
		11: Option((Value, Value))	extractor(sadd_sat, 10)
		12: (Value, Value)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddsb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	const_int(8)
		9:	const_int(16)
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 181
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(smul_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_int_ref_16_to_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMem	constructor(put_in_gpr_mem, [5], 2)
		11: Type	match_some(7)
		12: bool	const_prim(true)
		13: ProducesFlags	constructor(x64_mul_lo_with_flags_paired, [11, 12, 9, 10], 3)
		14: CC	make_variant(CC::O, [])
		15: InstOutput	constructor(construct_overflow_op, [14, 13], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 178
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(smul_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Value	match_tuple(4, 0)
		8: Gpr	constructor(put_in_gpr, [7], 1)
		9: GprMem	constructor(put_in_gpr_mem, [5], 2)
		10: bool	const_prim(true)
		11: ProducesFlags	constructor(x64_mul8_with_flags_paired, [10, 8, 9], 3)
		12: CC	make_variant(CC::O, [])
		13: InstOutput	constructor(construct_overflow_op, [12, 11], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 173
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(umul_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_int_ref_16_to_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMem	constructor(put_in_gpr_mem, [5], 2)
		11: Type	match_some(7)
		12: bool	const_prim(false)
		13: ProducesFlags	constructor(x64_mul_lo_with_flags_paired, [11, 12, 9, 10], 3)
		14: CC	make_variant(CC::O, [])
		15: InstOutput	constructor(construct_overflow_op, [14, 13], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 170
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(umul_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Value	match_tuple(4, 0)
		8: Gpr	constructor(put_in_gpr, [7], 1)
		9: GprMem	constructor(put_in_gpr_mem, [5], 2)
		10: bool	const_prim(false)
		11: ProducesFlags	constructor(x64_mul8_with_flags_paired, [10, 8, 9], 3)
		12: CC	make_variant(CC::O, [])
		13: InstOutput	constructor(construct_overflow_op, [12, 11], 4)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 15
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 165
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(ssub_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: CC	make_variant(CC::O, [])
		8: AluRmiROpcode	make_variant(AluRmiROpcode::Sub, [])
		9: AluRmiROpcode	make_variant(AluRmiROpcode::Sbb, [])
		10: Value	match_tuple(4, 0)
		11: InstOutput	constructor(construct_overflow_op_alu_128, [7, 8, 9, 10, 5], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 162
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(ssub_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMemImm	constructor(put_in_gpr_mem_imm, [5], 2)
		11: Type	match_some(7)
		12: CC	make_variant(CC::O, [])
		13: AluRmiROpcode	make_variant(AluRmiROpcode::Sub, [])
		14: InstOutput	constructor(construct_overflow_op_alu, [11, 12, 13, 9, 10], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 157
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(usub_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: CC	make_variant(CC::B, [])
		8: AluRmiROpcode	make_variant(AluRmiROpcode::Sub, [])
		9: AluRmiROpcode	make_variant(AluRmiROpcode::Sbb, [])
		10: Value	match_tuple(4, 0)
		11: InstOutput	constructor(construct_overflow_op_alu_128, [7, 8, 9, 10, 5], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 154
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(usub_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMemImm	constructor(put_in_gpr_mem_imm, [5], 2)
		11: Type	match_some(7)
		12: CC	make_variant(CC::B, [])
		13: AluRmiROpcode	make_variant(AluRmiROpcode::Sub, [])
		14: InstOutput	constructor(construct_overflow_op_alu, [11, 12, 13, 9, 10], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 149
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(sadd_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: CC	make_variant(CC::O, [])
		8: AluRmiROpcode	make_variant(AluRmiROpcode::Add, [])
		9: AluRmiROpcode	make_variant(AluRmiROpcode::Adc, [])
		10: Value	match_tuple(4, 0)
		11: InstOutput	constructor(construct_overflow_op_alu_128, [7, 8, 9, 10, 5], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 146
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(sadd_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMemImm	constructor(put_in_gpr_mem_imm, [5], 2)
		11: Type	match_some(7)
		12: CC	make_variant(CC::O, [])
		13: AluRmiROpcode	make_variant(AluRmiROpcode::Add, [])
		14: InstOutput	constructor(construct_overflow_op_alu, [11, 12, 13, 9, 10], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 141
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(uadd_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: CC	make_variant(CC::B, [])
		8: AluRmiROpcode	make_variant(AluRmiROpcode::Add, [])
		9: AluRmiROpcode	make_variant(AluRmiROpcode::Adc, [])
		10: Value	match_tuple(4, 0)
		11: InstOutput	constructor(construct_overflow_op_alu_128, [7, 8, 9, 10, 5], 1)
		12: Option(InstOutput)	some(11)
		13: Option(Option(InstOutput))	some(12)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 13
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 137
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value))	extractor(uadd_overflow, 0)
		4: (Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(fits_in_64, 6)
		8: Value	match_tuple(4, 0)
		9: Gpr	constructor(put_in_gpr, [8], 1)
		10: GprMemImm	constructor(put_in_gpr_mem_imm, [5], 2)
		11: Type	match_some(7)
		12: CC	make_variant(CC::B, [])
		13: AluRmiROpcode	make_variant(AluRmiROpcode::Add, [])
		14: InstOutput	constructor(construct_overflow_op_alu, [11, 12, 13, 9, 10], 3)
		15: Option(InstOutput)	some(14)
		16: Option(Option(InstOutput))	some(15)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 88
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Gpr	constructor(value_regs_get_gpr, [10, 11], 2)
		13: usize	const_int(1, usize)
		14: Gpr	constructor(value_regs_get_gpr, [10, 13], 3)
		15: Value	match_tuple(8, 1)
		16: ValueRegs	constructor(put_in_regs, [15], 4)
		17: Gpr	constructor(value_regs_get_gpr, [16, 11], 5)
		18: Gpr	constructor(value_regs_get_gpr, [16, 13], 6)
		19: GprMemImm	constructor(gpr_to_gpr_mem_imm, [17], 7)
		20: Type	const_prim(I64)
		21: ProducesFlags	constructor(x64_add_with_flags_paired, [20, 12, 19], 8)
		22: GprMemImm	constructor(gpr_to_gpr_mem_imm, [18], 9)
		23: ConsumesFlags	constructor(x64_adc_paired, [20, 14, 22], 10)
		24: ValueRegs	constructor(with_flags, [21, 23], 11)
		25: InstOutput	constructor(output, [24], 12)
		26: Option(InstOutput)	some(25)
		27: Option(Option(InstOutput))	some(26)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 27
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 83
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (u32, u32)	match_some(8)
		10: u32	match_tuple(9, 0)
		11: u32	match_tuple(9, 1)
		12: (Value, Value)	match_some(6)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddq, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_int(64)
		11:	const_int(2)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 79
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (u32, u32)	match_some(8)
		10: u32	match_tuple(9, 0)
		11: u32	match_tuple(9, 1)
		12: (Value, Value)	match_some(6)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddd, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_int(32)
		11:	const_int(4)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 75
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (u32, u32)	match_some(8)
		10: u32	match_tuple(9, 0)
		11: u32	match_tuple(9, 1)
		12: (Value, Value)	match_some(6)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddw, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_int(16)
		11:	const_int(8)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 71
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (u32, u32)	match_some(8)
		10: u32	match_tuple(9, 0)
		11: u32	match_tuple(9, 1)
		12: (Value, Value)	match_some(6)
		13: Value	match_tuple(12, 0)
		14: Xmm	constructor(put_in_xmm, [13], 1)
		15: Value	match_tuple(12, 1)
		16: XmmMem	constructor(put_in_xmm_mem, [15], 2)
		17: Xmm	constructor(x64_paddb, [14, 16], 3)
		18: InstOutput	constructor(output_xmm, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		10:	const_int(8)
		11:	const_int(16)
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 65
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 1)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_add, [16, 13, 15], 3)
		18: InstOutput	constructor(output_gpr, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 62
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(SinkableLoad)	extractor(sinkable_load, 10)
		12: Value	match_tuple(9, 0)
		13: Gpr	constructor(put_in_gpr, [12], 1)
		14: SinkableLoad	match_some(11)
		15: GprMemImm	constructor(sink_load_to_gpr_mem_imm, [14], 2)
		16: Type	match_some(6)
		17: Gpr	constructor(x64_add, [16, 13, 15], 3)
		18: InstOutput	constructor(output_gpr, [17], 4)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		11:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1134
		../../codegen/src/isa/x64/inst.isle line 1153
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 12)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [38], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1134
		../../codegen/src/isa/x64/inst.isle line 1150
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 38)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [12], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1134
		../../codegen/src/isa/x64/inst.isle line 1148
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [50], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Gpr	constructor(put_in_gpr, [12], 1)
		47: Gpr	constructor(put_in_gpr, [38], 2)
		48: i32	constructor(offset32_to_i32, [40], 0)
		49: u8	const_int(0, u8)
		50: Amode	make_variant(Amode::ImmRegRegShift, [48, 46, 47, 49, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1131
		../../codegen/src/isa/x64/inst.isle line 1153
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 12)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [38], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1131
		../../codegen/src/isa/x64/inst.isle line 1150
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 38)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [12], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1131
		../../codegen/src/isa/x64/inst.isle line 1148
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [50], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Gpr	constructor(put_in_gpr, [12], 1)
		47: Gpr	constructor(put_in_gpr, [38], 2)
		48: i32	constructor(offset32_to_i32, [40], 0)
		49: u8	const_int(0, u8)
		50: Amode	make_variant(Amode::ImmRegRegShift, [48, 46, 47, 49, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1128
		../../codegen/src/isa/x64/inst.isle line 1153
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 38)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [13], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1128
		../../codegen/src/isa/x64/inst.isle line 1150
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 13)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [38], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1128
		../../codegen/src/isa/x64/inst.isle line 1148
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [50], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 0)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 1)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Gpr	constructor(put_in_gpr, [38], 1)
		47: Gpr	constructor(put_in_gpr, [13], 2)
		48: i32	constructor(offset32_to_i32, [40], 0)
		49: u8	const_int(0, u8)
		50: Amode	make_variant(Amode::ImmRegRegShift, [48, 46, 47, 49, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1125
		../../codegen/src/isa/x64/inst.isle line 1153
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 38)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [13], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1125
		../../codegen/src/isa/x64/inst.isle line 1150
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [64], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Option(Inst)	extractor(def_inst, 13)
		47: Inst	match_some(46)
		48: Option((Value, Value))	extractor(ishl, 47)
		49: (Value, Value)	match_some(48)
		50: Value	match_tuple(49, 1)
		51: Option(Inst)	extractor(def_inst, 50)
		52: Inst	match_some(51)
		53: Option(Imm64)	extractor(iconst, 52)
		54: Imm64	match_some(53)
		55: Option(u8)	extractor(uimm8, 54)
		56: u8	match_some(55)
		57: u32	constructor(u8_as_u32, [56], 0)
		58: u32	const_int(3, u32)
		59: Option(Unit)	constructor(u32_lteq, [57, 58], 0)
		60: Gpr	constructor(put_in_gpr, [38], 1)
		61: Value	match_tuple(49, 0)
		62: Gpr	constructor(put_in_gpr, [61], 2)
		63: i32	constructor(offset32_to_i32, [40], 0)
		64: Amode	make_variant(Amode::ImmRegRegShift, [63, 60, 62, 56, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
		46:	some
		48:	some
		51:	some
		53:	some
		55:	some
		59:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1125
		../../codegen/src/isa/x64/inst.isle line 1148
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [50], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option((Value, Value))	extractor(iadd, 26)
		28: (Value, Value)	match_some(27)
		29: Value	match_tuple(28, 1)
		30: Option(Inst)	extractor(def_inst, 29)
		31: Inst	match_some(30)
		32: Option(Imm64)	extractor(iconst, 31)
		33: Imm64	match_some(32)
		34: Option(i32)	extractor(simm32, 33)
		35: i32	constructor(offset32_to_i32, [9], 0)
		36: i32	match_some(34)
		37: Option(i32)	constructor(s32_add_fallible, [35, 36], 0)
		38: Value	match_tuple(28, 0)
		39: i32	match_some(37)
		40: Offset32	constructor(i32_to_offset32, [39], 0)
		46: Gpr	constructor(put_in_gpr, [38], 1)
		47: Gpr	constructor(put_in_gpr, [13], 2)
		48: i32	constructor(offset32_to_i32, [40], 0)
		49: u8	const_int(0, u8)
		50: Amode	make_variant(Amode::ImmRegRegShift, [48, 46, 47, 49, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		30:	some
		32:	some
		34:	some
		37:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1122
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [35], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 12)
		26: Inst	match_some(25)
		27: Option(Imm64)	extractor(iconst, 26)
		28: Imm64	match_some(27)
		29: Option(i32)	extractor(simm32, 28)
		30: i32	constructor(offset32_to_i32, [9], 0)
		31: i32	match_some(29)
		32: Option(i32)	constructor(s32_add_fallible, [30, 31], 0)
		33: i32	match_some(32)
		34: Offset32	constructor(i32_to_offset32, [33], 0)
		35: Amode	constructor(amode_imm_reg, [10, 13, 34], 1)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		29:	some
		32:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1119
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [35], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		25: Option(Inst)	extractor(def_inst, 13)
		26: Inst	match_some(25)
		27: Option(Imm64)	extractor(iconst, 26)
		28: Imm64	match_some(27)
		29: Option(i32)	extractor(simm32, 28)
		30: i32	constructor(offset32_to_i32, [9], 0)
		31: i32	match_some(29)
		32: Option(i32)	constructor(s32_add_fallible, [30, 31], 0)
		33: i32	match_some(32)
		34: Offset32	constructor(i32_to_offset32, [33], 0)
		35: Amode	constructor(amode_imm_reg, [10, 12, 34], 1)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		25:	some
		27:	some
		29:	some
		32:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1117
		../../codegen/src/isa/x64/inst.isle line 1153
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [48], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		30: Option(Inst)	extractor(def_inst, 12)
		31: Inst	match_some(30)
		32: Option((Value, Value))	extractor(ishl, 31)
		33: (Value, Value)	match_some(32)
		34: Value	match_tuple(33, 1)
		35: Option(Inst)	extractor(def_inst, 34)
		36: Inst	match_some(35)
		37: Option(Imm64)	extractor(iconst, 36)
		38: Imm64	match_some(37)
		39: Option(u8)	extractor(uimm8, 38)
		40: u8	match_some(39)
		41: u32	constructor(u8_as_u32, [40], 0)
		42: u32	const_int(3, u32)
		43: Option(Unit)	constructor(u32_lteq, [41, 42], 0)
		44: Gpr	constructor(put_in_gpr, [13], 1)
		45: Value	match_tuple(33, 0)
		46: Gpr	constructor(put_in_gpr, [45], 2)
		47: i32	constructor(offset32_to_i32, [9], 0)
		48: Amode	make_variant(Amode::ImmRegRegShift, [47, 44, 46, 40, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		30:	some
		32:	some
		35:	some
		37:	some
		39:	some
		43:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1117
		../../codegen/src/isa/x64/inst.isle line 1150
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [48], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		30: Option(Inst)	extractor(def_inst, 13)
		31: Inst	match_some(30)
		32: Option((Value, Value))	extractor(ishl, 31)
		33: (Value, Value)	match_some(32)
		34: Value	match_tuple(33, 1)
		35: Option(Inst)	extractor(def_inst, 34)
		36: Inst	match_some(35)
		37: Option(Imm64)	extractor(iconst, 36)
		38: Imm64	match_some(37)
		39: Option(u8)	extractor(uimm8, 38)
		40: u8	match_some(39)
		41: u32	constructor(u8_as_u32, [40], 0)
		42: u32	const_int(3, u32)
		43: Option(Unit)	constructor(u32_lteq, [41, 42], 0)
		44: Gpr	constructor(put_in_gpr, [12], 1)
		45: Value	match_tuple(33, 0)
		46: Gpr	constructor(put_in_gpr, [45], 2)
		47: i32	constructor(offset32_to_i32, [9], 0)
		48: Amode	make_variant(Amode::ImmRegRegShift, [47, 44, 46, 40, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
		30:	some
		32:	some
		35:	some
		37:	some
		39:	some
		43:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 56
		../../codegen/src/isa/x64/inst.isle line 1117
		../../codegen/src/isa/x64/inst.isle line 1148
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Offset32	constructor(zero_offset, [], 1)
		10: MemFlags	constructor(mem_flags_trusted, [], 0)
		11: (Value, Value)	match_some(6)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		15: SyntheticAmode	constructor(amode_to_synthetic_amode, [34], 3)
		16: Type	match_some(8)
		17: Gpr	constructor(x64_lea, [16, 15], 4)
		18: InstOutput	constructor(output_gpr, [17], 5)
		19: Option(InstOutput)	some(18)
		20: Option(Option(InstOutput))	some(19)
		30: Gpr	constructor(put_in_gpr, [12], 1)
		31: Gpr	constructor(put_in_gpr, [13], 2)
		32: i32	constructor(offset32_to_i32, [9], 0)
		33: u8	const_int(0, u8)
		34: Amode	make_variant(Amode::ImmRegRegShift, [32, 30, 31, 33, 10])
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 20
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 45
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Gpr	constructor(put_in_gpr, [10], 1)
		12: Value	match_tuple(9, 1)
		13: GprMemImm	constructor(put_in_gpr_mem_imm, [12], 2)
		14: Type	match_some(6)
		15: Gpr	constructor(x64_add, [14, 11, 13], 3)
		16: InstOutput	constructor(output_gpr, [15], 4)
		17: Option(InstOutput)	some(16)
		18: Option(Option(InstOutput))	some(17)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 37
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(())	extractor(null, 5)
		7: Type	match_tuple(4, 0)
		8: u64	const_int(0, u64)
		9: Reg	constructor(imm, [7, 8], 1)
		10: InstOutput	constructor(output_reg, [9], 2)
		11: Option(InstOutput)	some(10)
		12: Option(Option(InstOutput))	some(11)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 12
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 32
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Ieee64)	extractor(f64const, 0)
		4: Type	const_prim(F64)
		5: Ieee64	match_some(3)
		6: u64	extractor(u64_from_ieee64, 5)
		7: Reg	constructor(imm, [4, 6], 1)
		8: InstOutput	constructor(output_reg, [7], 2)
		9: Option(InstOutput)	some(8)
		10: Option(Option(InstOutput))	some(9)
	]
	constraints = [
		3:	some
	]
	result = 10
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 27
	]
	bindings = [
		0: Inst	argument(0)
		3: Option(Ieee32)	extractor(f32const, 0)
		4: Type	const_prim(F32)
		5: Ieee32	match_some(3)
		6: u32	extractor(u32_from_ieee32, 5)
		7: u64	constructor(u32_as_u64, [6], 0)
		8: Reg	constructor(imm, [4, 7], 1)
		9: InstOutput	constructor(output_reg, [8], 2)
		10: Option(InstOutput)	some(9)
		11: Option(Option(InstOutput))	some(10)
	]
	constraints = [
		3:	some
	]
	result = 11
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 20
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Imm64)	extractor(iconst, 6)
		8: Type	const_prim(I64)
		9: Imm64	match_some(7)
		10: u64	extractor(u64_from_imm64, 9)
		11: Reg	constructor(imm, [8, 10], 1)
		12: u64	const_int(0, u64)
		13: Reg	constructor(imm, [8, 12], 2)
		14: ValueRegs	constructor(value_regs, [11, 13], 3)
		15: InstOutput	constructor(output, [14], 4)
		16: Option(InstOutput)	some(15)
		17: Option(Option(InstOutput))	some(16)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 17
	feasible = true
}
expansion {
	term = lower
	rules = [
		../../codegen/src/isa/x64/lower.isle line 15
	]
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Imm64)	extractor(iconst, 7)
		9: Type	match_some(6)
		10: Imm64	match_some(8)
		11: u64	extractor(u64_from_imm64, 10)
		12: Reg	constructor(imm, [9, 11], 1)
		13: InstOutput	constructor(output_reg, [12], 2)
		14: Option(InstOutput)	some(13)
		15: Option(Option(InstOutput))	some(14)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
	feasible = true
}

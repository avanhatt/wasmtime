term {
	name = ty_shift_mask
	bindings = [
		0: Type	argument(0)
		1: Type	constructor(lane_type, [0], 0)
		2: u8	constructor(ty_bits, [1], 0)
		3: u64	constructor(u8_as_u64, [2], 0)
		4: u64	const_int(1, u64)
		5: u64	constructor(u64_sub, [3, 4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude.isle line 323
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = is_ref_type
	bindings = [
		0: Type	argument(0)
		1: bool	const_prim(true)
		2: bool	const_prim(false)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude.isle line 330
			constraints = [
				0:	const_prim(R32)
			]
			prio = 1
			result = 1
		}
		{
			pos = ../../codegen/src/prelude.isle line 331
			constraints = [
				0:	const_prim(R64)
			]
			prio = 1
			result = 1
		}
		{
			pos = ../../codegen/src/prelude.isle line 332
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = output_reg
	bindings = [
		0: Reg	argument(0)
		1: ValueRegs	constructor(value_reg, [0], 1)
		2: InstOutput	constructor(output, [1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 73
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = output_value
	bindings = [
		0: Value	argument(0)
		1: ValueRegs	constructor(put_in_regs, [0], 1)
		2: InstOutput	constructor(output, [1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 77
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = temp_reg
	bindings = [
		0: Type	argument(0)
		1: WritableReg	constructor(temp_writable_reg, [0], 1)
		2: Reg	constructor(writable_reg_to_reg, [1], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 97
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1]
		}
	]
}
term {
	name = value_regs_range
	bindings = [
		0: ValueRegs	argument(0)
		1: usize	const_int(0, usize)
		2: usize	constructor(value_regs_len, [0], 0)
		3: Range	constructor(range, [1, 2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 146
			constraints = [
			]
			prio = 0
			result = 3
		}
	]
}
term {
	name = lo_reg
	bindings = [
		0: Value	argument(0)
		1: ValueRegs	constructor(put_in_regs, [0], 1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 157
			constraints = [
			]
			prio = 0
			result = 3
			impure = [1, 3]
		}
	]
}
term {
	name = multi_reg_to_pair_and_single
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::Three, a)
		2: Reg	match_variant(0, MultiReg::Three, b)
		3: Reg	match_variant(0, MultiReg::Three, c)
		4: ValueRegs	constructor(value_regs, [1, 2], 1)
		5: ValueRegs	constructor(value_reg, [3], 2)
		6: InstOutput	constructor(output_pair, [4, 5], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 168
			constraints = [
				0:	variant(MultiReg::Three)
			]
			prio = 0
			result = 6
			impure = [4, 5, 6]
		}
	]
}
term {
	name = multi_reg_to_pair
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::Two, a)
		2: Reg	match_variant(0, MultiReg::Two, b)
		3: ValueRegs	constructor(value_regs, [1, 2], 1)
		4: InstOutput	constructor(output, [3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 173
			constraints = [
				0:	variant(MultiReg::Two)
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = multi_reg_to_single
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::One, a)
		2: ValueRegs	constructor(value_reg, [1], 1)
		3: InstOutput	constructor(output, [2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 178
			constraints = [
				0:	variant(MultiReg::One)
			]
			prio = 0
			result = 3
			impure = [2, 3]
		}
	]
}
term {
	name = emit_side_effect
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: MInst	match_variant(0, SideEffectNoResult::Inst, inst)
		2: Unit	constructor(emit, [1], 1)
		3: MInst	match_variant(0, SideEffectNoResult::Inst2, inst1)
		4: MInst	match_variant(0, SideEffectNoResult::Inst2, inst2)
		5: Unit	constructor(emit, [3], 1)
		6: Unit	constructor(emit, [4], 2)
		7: MInst	match_variant(0, SideEffectNoResult::Inst3, inst1)
		8: MInst	match_variant(0, SideEffectNoResult::Inst3, inst2)
		9: MInst	match_variant(0, SideEffectNoResult::Inst3, inst3)
		10: Unit	constructor(emit, [7], 1)
		11: Unit	constructor(emit, [8], 2)
		12: Unit	constructor(emit, [9], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 367
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 2
			impure = [2]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 369
			constraints = [
				0:	variant(SideEffectNoResult::Inst2)
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 372
			constraints = [
				0:	variant(SideEffectNoResult::Inst3)
			]
			prio = 0
			result = 12
			impure = [10, 11, 12]
		}
	]
}
term {
	name = side_effect
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: Unit	constructor(emit_side_effect, [0], 1)
		2: InstOutput	constructor(output_none, [], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 380
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = side_effect_concat
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: MInst	match_variant(0, SideEffectNoResult::Inst, inst)
		2: SideEffectNoResult	argument(1)
		3: MInst	match_variant(2, SideEffectNoResult::Inst, inst)
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [1, 3])
		5: MInst	match_variant(2, SideEffectNoResult::Inst2, inst1)
		6: MInst	match_variant(2, SideEffectNoResult::Inst2, inst2)
		7: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [1, 5, 6])
		8: MInst	match_variant(0, SideEffectNoResult::Inst2, inst1)
		9: MInst	match_variant(0, SideEffectNoResult::Inst2, inst2)
		10: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [8, 9, 3])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 385
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
				2:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 387
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
				2:	variant(SideEffectNoResult::Inst2)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 389
			constraints = [
				0:	variant(SideEffectNoResult::Inst2)
				2:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 10
		}
	]
}
term {
	name = produces_flags_concat
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		2: ProducesFlags	argument(1)
		3: MInst	match_variant(2, ProducesFlags::ProducesFlagsSideEffect, inst)
		4: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsTwiceSideEffect, [1, 3])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 414
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ProducesFlags::ProducesFlagsSideEffect)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = produces_flags_get_reg
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		3: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		4: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 444
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 445
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = produces_flags_ignore
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		3: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [1])
		4: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		5: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 450
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 452
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = consumes_flags_concat
	bindings = [
		0: ConsumesFlags	argument(0)
		1: MInst	match_variant(0, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		3: ConsumesFlags	argument(1)
		4: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		5: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		6: ValueRegs	constructor(value_regs, [2, 5], 1)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [1, 4, 6])
		8: MInst	match_variant(0, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		9: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		10: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect2, [8, 9])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 459
			constraints = [
				0:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 7
			impure = [6]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 465
			constraints = [
				0:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 10
		}
	]
}
term {
	name = with_flags
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		3: ConsumesFlags	argument(1)
		4: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, inst)
		5: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, result)
		6: Unit	constructor(emit, [1], 1)
		7: Unit	constructor(emit, [4], 2)
		8: ValueRegs	constructor(value_regs, [2, 5], 3)
		9: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		10: Unit	constructor(emit, [9], 2)
		11: ValueRegs	constructor(value_reg, [2], 3)
		12: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		13: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		14: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		15: Unit	constructor(emit, [12], 1)
		16: Unit	constructor(emit, [13], 2)
		17: ValueRegs	constructor(value_reg, [14], 3)
		18: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst1)
		19: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst2)
		20: ValueRegs	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, result)
		21: Unit	constructor(emit, [18], 2)
		22: Unit	constructor(emit, [19], 3)
		23: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst1)
		24: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst2)
		25: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst3)
		26: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst4)
		27: ValueRegs	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, result)
		28: Unit	constructor(emit, [23], 2)
		29: Unit	constructor(emit, [24], 3)
		30: Unit	constructor(emit, [25], 4)
		31: Unit	constructor(emit, [26], 5)
		32: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst1)
		33: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst2)
		34: Unit	constructor(emit, [32], 1)
		35: Unit	constructor(emit, [33], 2)
		36: Unit	constructor(emit, [13], 3)
		37: ValueRegs	constructor(value_reg, [14], 4)
		38: Unit	constructor(emit, [18], 3)
		39: Unit	constructor(emit, [19], 4)
		40: Unit	constructor(emit, [23], 3)
		41: Unit	constructor(emit, [24], 4)
		42: Unit	constructor(emit, [25], 5)
		43: Unit	constructor(emit, [26], 6)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 482
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer)
			]
			prio = 0
			result = 8
			impure = [6, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 490
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				3:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 11
			impure = [6, 10, 11]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 496
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 17
			impure = [15, 16, 17]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 502
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 20
			impure = [15, 21, 22]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 514
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [15, 28, 29, 30, 31]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 530
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 37
			impure = [34, 35, 36, 37]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 537
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 20
			impure = [34, 35, 38, 39]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 550
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [34, 35, 40, 41, 42, 43]
		}
	]
}
term {
	name = with_flags_reg
	bindings = [
		0: ProducesFlags	argument(0)
		1: ConsumesFlags	argument(1)
		2: ValueRegs	constructor(with_flags, [0, 1], 1)
		3: usize	const_int(0, usize)
		4: Reg	constructor(value_regs_get, [2, 3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 568
			constraints = [
			]
			prio = 0
			result = 4
			impure = [2, 4]
		}
	]
}
term {
	name = flags_to_producesflags
	bindings = [
		0: Value	argument(0)
		1: Unit	constructor(mark_value_used, [0], 1)
		2: ProducesFlags	make_variant(ProducesFlags::AlreadyExistingFlags, [])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 575
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1]
		}
	]
}
term {
	name = with_flags_side_effect
	bindings = [
		0: ProducesFlags	argument(0)
		1: ConsumesFlags	argument(1)
		2: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		3: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [2])
		4: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect2, inst1)
		5: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect2, inst2)
		6: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [4, 5])
		7: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		8: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [7, 2])
		9: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [7, 4, 5])
		10: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst1)
		11: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst2)
		12: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [10, 11, 2])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 586
			constraints = [
				0:	variant(ProducesFlags::AlreadyExistingFlags)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 591
			constraints = [
				0:	variant(ProducesFlags::AlreadyExistingFlags)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 596
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 8
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 601
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 9
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 606
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 12
		}
	]
}
term {
	name = with_flags_chained
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		2: ConsumesAndProducesFlags	argument(1)
		3: MInst	match_variant(2, ConsumesAndProducesFlags::SideEffect, inst)
		4: ConsumesFlags	argument(2)
		5: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		6: Unit	constructor(emit, [1], 1)
		7: Unit	constructor(emit, [3], 2)
		8: Unit	constructor(emit, [5], 3)
		9: MultiReg	make_variant(MultiReg::Empty, [])
		10: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect2, inst1)
		11: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect2, inst2)
		12: Unit	constructor(emit, [10], 3)
		13: Unit	constructor(emit, [11], 4)
		14: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		15: Reg	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		16: Unit	constructor(emit, [14], 3)
		17: MultiReg	make_variant(MultiReg::One, [15])
		18: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst1)
		19: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst2)
		20: ValueRegs	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, result)
		21: Unit	constructor(emit, [18], 3)
		22: Unit	constructor(emit, [19], 4)
		23: usize	const_int(0, usize)
		24: Reg	constructor(value_regs_get, [20, 23], 5)
		25: usize	const_int(1, usize)
		26: Reg	constructor(value_regs_get, [20, 25], 6)
		27: MultiReg	make_variant(MultiReg::Two, [24, 26])
		28: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst1)
		29: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst2)
		30: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst3)
		31: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst4)
		32: ValueRegs	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, result)
		33: Unit	constructor(emit, [28], 3)
		34: Unit	constructor(emit, [29], 4)
		35: Unit	constructor(emit, [30], 5)
		36: Unit	constructor(emit, [31], 6)
		37: Reg	constructor(value_regs_get, [32, 23], 7)
		38: Reg	constructor(value_regs_get, [32, 25], 8)
		39: MultiReg	make_variant(MultiReg::Two, [37, 38])
		40: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		41: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		42: Unit	constructor(emit, [40], 1)
		43: MultiReg	make_variant(MultiReg::One, [41])
		44: MultiReg	make_variant(MultiReg::Two, [41, 15])
		45: MultiReg	make_variant(MultiReg::Three, [41, 24, 26])
		46: MultiReg	make_variant(MultiReg::Three, [41, 37, 38])
		47: MInst	match_variant(2, ConsumesAndProducesFlags::ReturnsReg, inst)
		48: Reg	match_variant(2, ConsumesAndProducesFlags::ReturnsReg, result)
		49: Unit	constructor(emit, [47], 2)
		50: MultiReg	make_variant(MultiReg::One, [48])
		51: MultiReg	make_variant(MultiReg::Two, [48, 15])
		52: MultiReg	make_variant(MultiReg::Three, [48, 24, 26])
		53: MultiReg	make_variant(MultiReg::Three, [48, 37, 38])
		54: MultiReg	make_variant(MultiReg::Two, [41, 48])
		55: MultiReg	make_variant(MultiReg::Three, [41, 48, 15])
		56: MultiReg	make_variant(MultiReg::Four, [41, 48, 24, 26])
		57: MultiReg	make_variant(MultiReg::Four, [41, 48, 37, 38])
		58: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		59: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		60: Unit	constructor(emit, [58], 1)
		61: MultiReg	make_variant(MultiReg::Two, [59, 48])
		62: MultiReg	make_variant(MultiReg::Three, [59, 48, 15])
		63: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, inst)
		64: Reg	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, result)
		65: Unit	constructor(emit, [63], 3)
		66: MultiReg	make_variant(MultiReg::Three, [59, 48, 64])
		67: MultiReg	make_variant(MultiReg::Four, [59, 48, 24, 26])
		68: MultiReg	make_variant(MultiReg::Four, [59, 48, 37, 38])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 615
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 9
			impure = [6, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 623
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 9
			impure = [6, 7, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 632
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 17
			impure = [6, 7, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 640
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [6, 7, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 649
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 39
			impure = [6, 7, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 662
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 43
			impure = [42, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 670
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 43
			impure = [42, 7, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 679
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 44
			impure = [42, 7, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 687
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 45
			impure = [42, 7, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 696
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 46
			impure = [42, 7, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 709
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 50
			impure = [6, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 717
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 50
			impure = [6, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 726
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 51
			impure = [6, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 734
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 52
			impure = [6, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 743
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 53
			impure = [6, 49, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 756
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 54
			impure = [42, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 764
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 54
			impure = [42, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 773
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 55
			impure = [42, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 781
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 56
			impure = [42, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 790
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 57
			impure = [42, 49, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 802
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 61
			impure = [60, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 810
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 61
			impure = [60, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 819
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 62
			impure = [60, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 827
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer)
			]
			prio = 0
			result = 66
			impure = [60, 49, 65]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 835
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 67
			impure = [60, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 844
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 68
			impure = [60, 49, 33, 34, 35, 36, 37, 38]
		}
	]
}
term {
	name = lower_return
	bindings = [
		0: ValueSlice	argument(0)
		1: Unit	constructor(gen_return, [0], 1)
		2: InstOutput	constructor(output_none, [], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 1044
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = operand_size
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_32, 0)
		2: Type	match_some(1)
		3: OperandSize	make_variant(OperandSize::Size32, [])
		4: Option(Type)	extractor(fits_in_64, 0)
		5: Type	match_some(4)
		6: OperandSize	make_variant(OperandSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1226
			constraints = [
				1:	some
			]
			prio = 1
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1227
			constraints = [
				4:	some
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = scalar_size
	bindings = [
		0: Type	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ScalarSize	make_variant(ScalarSize::Size16, [])
		3: ScalarSize	make_variant(ScalarSize::Size32, [])
		4: ScalarSize	make_variant(ScalarSize::Size64, [])
		5: ScalarSize	make_variant(ScalarSize::Size128, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1239
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1240
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1241
			constraints = [
				0:	const_prim(I32)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1242
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1243
			constraints = [
				0:	const_prim(I128)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1245
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1246
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = lane_size
	bindings = [
		0: Type	argument(0)
		1: Option((u32, u32))	extractor(multi_lane, 0)
		2: (u32, u32)	match_some(1)
		3: u32	match_tuple(2, 0)
		4: u32	match_tuple(2, 1)
		5: ScalarSize	make_variant(ScalarSize::Size8, [])
		6: ScalarSize	make_variant(ScalarSize::Size16, [])
		7: ScalarSize	make_variant(ScalarSize::Size32, [])
		8: ScalarSize	make_variant(ScalarSize::Size64, [])
		9: Option((u32, u32))	extractor(dynamic_lane, 0)
		10: (u32, u32)	match_some(9)
		11: u32	match_tuple(10, 0)
		12: u32	match_tuple(10, 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1250
			constraints = [
				1:	some
				3:	const_int(8)
			]
			prio = 1
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1251
			constraints = [
				1:	some
				3:	const_int(16)
			]
			prio = 1
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1252
			constraints = [
				1:	some
				3:	const_int(32)
			]
			prio = 1
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1253
			constraints = [
				1:	some
				3:	const_int(64)
			]
			prio = 1
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1254
			constraints = [
				9:	some
				11:	const_int(8)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1255
			constraints = [
				9:	some
				11:	const_int(16)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1256
			constraints = [
				9:	some
				11:	const_int(32)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1257
			constraints = [
				9:	some
				11:	const_int(64)
			]
			prio = 0
			result = 8
		}
	]
}
term {
	name = vector_lane_size
	bindings = [
		0: VectorSize	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ScalarSize	make_variant(ScalarSize::Size16, [])
		3: ScalarSize	make_variant(ScalarSize::Size32, [])
		4: ScalarSize	make_variant(ScalarSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1261
			constraints = [
				0:	variant(VectorSize::Size8x16)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1262
			constraints = [
				0:	variant(VectorSize::Size8x8)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1263
			constraints = [
				0:	variant(VectorSize::Size16x8)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1264
			constraints = [
				0:	variant(VectorSize::Size16x4)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1265
			constraints = [
				0:	variant(VectorSize::Size32x4)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1266
			constraints = [
				0:	variant(VectorSize::Size32x2)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1267
			constraints = [
				0:	variant(VectorSize::Size64x2)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = vector_size
	bindings = [
		0: Type	argument(0)
		1: Option((u32, u32))	extractor(multi_lane, 0)
		2: (u32, u32)	match_some(1)
		3: u32	match_tuple(2, 0)
		4: u32	match_tuple(2, 1)
		5: VectorSize	make_variant(VectorSize::Size8x8, [])
		6: VectorSize	make_variant(VectorSize::Size8x16, [])
		7: VectorSize	make_variant(VectorSize::Size16x4, [])
		8: VectorSize	make_variant(VectorSize::Size16x8, [])
		9: VectorSize	make_variant(VectorSize::Size32x2, [])
		10: VectorSize	make_variant(VectorSize::Size32x4, [])
		11: VectorSize	make_variant(VectorSize::Size64x2, [])
		12: Option((u32, u32))	extractor(dynamic_lane, 0)
		13: (u32, u32)	match_some(12)
		14: u32	match_tuple(13, 0)
		15: u32	match_tuple(13, 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1302
			constraints = [
				1:	some
				3:	const_int(8)
				4:	const_int(8)
			]
			prio = 1
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1303
			constraints = [
				1:	some
				3:	const_int(8)
				4:	const_int(16)
			]
			prio = 1
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1304
			constraints = [
				1:	some
				3:	const_int(16)
				4:	const_int(4)
			]
			prio = 1
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1305
			constraints = [
				1:	some
				3:	const_int(16)
				4:	const_int(8)
			]
			prio = 1
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1306
			constraints = [
				1:	some
				3:	const_int(32)
				4:	const_int(2)
			]
			prio = 1
			result = 9
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1307
			constraints = [
				1:	some
				3:	const_int(32)
				4:	const_int(4)
			]
			prio = 1
			result = 10
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1308
			constraints = [
				1:	some
				3:	const_int(64)
				4:	const_int(2)
			]
			prio = 1
			result = 11
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1309
			constraints = [
				12:	some
				14:	const_int(8)
				15:	const_int(8)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1310
			constraints = [
				12:	some
				14:	const_int(8)
				15:	const_int(16)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1311
			constraints = [
				12:	some
				14:	const_int(16)
				15:	const_int(4)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1312
			constraints = [
				12:	some
				14:	const_int(16)
				15:	const_int(8)
			]
			prio = 0
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1313
			constraints = [
				12:	some
				14:	const_int(32)
				15:	const_int(2)
			]
			prio = 0
			result = 9
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1314
			constraints = [
				12:	some
				14:	const_int(32)
				15:	const_int(4)
			]
			prio = 0
			result = 10
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1315
			constraints = [
				12:	some
				14:	const_int(64)
				15:	const_int(2)
			]
			prio = 0
			result = 11
		}
	]
}
term {
	name = imm12_from_negated_value
	bindings = [
		0: Value	argument(0)
		1: Option(Inst)	extractor(def_inst, 0)
		2: Inst	match_some(1)
		3: Option((Type, Inst))	extractor(has_type, 2)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Imm64)	extractor(iconst, 6)
		8: Imm64	match_some(7)
		9: i64	constructor(i64_sextend_imm64, [5, 8], 0)
		10: i64	constructor(i64_neg, [9], 0)
		11: u64	constructor(i64_as_u64, [10], 0)
		12: Option(Imm12)	extractor(imm12_from_u64, 11)
		13: Imm12	match_some(12)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1810
			constraints = [
				1:	some
				3:	some
				7:	some
				12:	some
			]
			prio = 0
			result = 13
		}
	]
}
term {
	name = value_regs_zero
	bindings = [
		0: Type	const_prim(I64)
		1: ImmExtend	make_variant(ImmExtend::Zero, [])
		2: u64	const_int(0, u64)
		3: Reg	constructor(imm, [0, 1, 2], 1)
		4: Reg	constructor(imm, [0, 1, 2], 2)
		5: ValueRegs	constructor(value_regs, [3, 4], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1856
			constraints = [
			]
			prio = 0
			result = 5
			impure = [3, 4, 5]
		}
	]
}
term {
	name = mov
	bindings = [
		0: Reg	argument(0)
		1: Type	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: OperandSize	constructor(operand_size, [1], 2)
		5: MInst	make_variant(MInst::Mov, [4, 3, 0])
		6: Unit	constructor(emit, [5], 3)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1864
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 4, 6]
		}
	]
}
term {
	name = movz
	bindings = [
		0: MoveWideConst	argument(0)
		1: OperandSize	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MoveWideOp	make_variant(MoveWideOp::MovZ, [])
		5: MInst	make_variant(MInst::MovWide, [4, 3, 0, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1871
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
	]
}
term {
	name = movn
	bindings = [
		0: MoveWideConst	argument(0)
		1: OperandSize	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MoveWideOp	make_variant(MoveWideOp::MovN, [])
		5: MInst	make_variant(MInst::MovWide, [4, 3, 0, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1878
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
	]
}
term {
	name = alu_rr_imm_logic
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ImmLogic	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImmLogic, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1885
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rr_imm_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ImmShift	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImmShift, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1892
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rrr
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRR, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1899
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = vec_rrr
	bindings = [
		0: VecALUOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRR, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1906
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_rr
	bindings = [
		0: FPUOp1	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(F64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuRR, [0, 2, 4, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1913
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_rrr_mod
	bindings = [
		0: VecALUModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VectorSize	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecRRRMod, [0, 6, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1921
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_fmla_elem
	bindings = [
		0: VecALUModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VectorSize	argument(4)
		5: u8	argument(5)
		6: Type	const_prim(I8X16)
		7: WritableReg	constructor(temp_writable_reg, [6], 1)
		8: MInst	make_variant(MInst::VecFmlaElem, [0, 7, 1, 2, 3, 4, 5])
		9: Unit	constructor(emit, [8], 2)
		10: Reg	constructor(writable_reg_to_reg, [7], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1929
			constraints = [
			]
			prio = 0
			result = 10
			impure = [7, 9]
		}
	]
}
term {
	name = fpu_rri
	bindings = [
		0: FPUOpRI	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuRRI, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1935
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_rri_mod
	bindings = [
		0: FPUOpRIMod	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(F64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuRRIMod, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1941
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = fpu_rrr
	bindings = [
		0: FPUOp2	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(F64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::FpuRRR, [0, 3, 5, 1, 2])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1948
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_rrrr
	bindings = [
		0: FPUOp3	argument(0)
		1: ScalarSize	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Reg	argument(4)
		5: Type	const_prim(F64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::FpuRRRR, [0, 1, 6, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1955
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = fpu_cmp
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuCmp, [0, 1, 2])
		4: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1962
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = vec_lanes
	bindings = [
		0: VecLanesOp	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecLanes, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1968
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_shift_imm
	bindings = [
		0: VecShiftImmOp	argument(0)
		1: u8	argument(1)
		2: Reg	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecShiftImm, [0, 5, 2, 3, 1])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1975
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_dup
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecDup, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1982
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_dup_from_fpu
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: u8	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecDupFromFpu, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1989
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_dup_imm
	bindings = [
		0: ASIMDMovModImm	argument(0)
		1: bool	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecDupImm, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1996
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = alu_rr_imm12
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Imm12	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImm12, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2003
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rrr_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ShiftOpAndAmt	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRShift, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2010
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = cmp_rr_shift
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: u64	argument(3)
		4: Type	const_prim(I64)
		5: Option(ShiftOpAndAmt)	constructor(lshr_from_u64, [4, 3], 0)
		6: ShiftOpAndAmt	match_some(5)
		7: ALUOp	make_variant(ALUOp::SubS, [])
		8: WritableReg	constructor(writable_zero_reg, [], 1)
		9: MInst	make_variant(MInst::AluRRRShift, [7, 0, 8, 1, 2, 6])
		10: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [9])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2018
			constraints = [
				5:	some
			]
			prio = 0
			result = 10
			impure = [8]
		}
	]
}
term {
	name = cmp_rr_shift_asr
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: u64	argument(3)
		4: Type	const_prim(I64)
		5: Option(ShiftOpAndAmt)	constructor(ashr_from_u64, [4, 3], 0)
		6: ShiftOpAndAmt	match_some(5)
		7: ALUOp	make_variant(ALUOp::SubS, [])
		8: WritableReg	constructor(writable_zero_reg, [], 1)
		9: MInst	make_variant(MInst::AluRRRShift, [7, 0, 8, 1, 2, 6])
		10: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [9])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2027
			constraints = [
				5:	some
			]
			prio = 0
			result = 10
			impure = [8]
		}
	]
}
term {
	name = alu_rrr_extend
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ExtendOp	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRExtend, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2035
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = alu_rr_extend_reg
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ExtendedValue	argument(3)
		4: Reg	constructor(put_extended_in_reg, [3], 1)
		5: ExtendOp	constructor(get_extended_op, [3], 2)
		6: Reg	constructor(alu_rrr_extend, [0, 1, 2, 4, 5], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2043
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4, 5, 6]
		}
	]
}
term {
	name = alu_rrrr
	bindings = [
		0: ALUOp3	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Reg	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRR, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2050
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = alu_rrr_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [3, 6, 5, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2057
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6]
		}
	]
}
term {
	name = alu_rrr_with_flags_chained
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [3, 6, 5, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
		9: ConsumesAndProducesFlags	make_variant(ConsumesAndProducesFlags::ReturnsReg, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2065
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6]
		}
	]
}
term {
	name = bit_rr
	bindings = [
		0: BitOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: OperandSize	constructor(operand_size, [1], 2)
		6: MInst	make_variant(MInst::BitRR, [0, 5, 4, 2])
		7: Unit	constructor(emit, [6], 3)
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2073
			constraints = [
			]
			prio = 0
			result = 8
			impure = [4, 5, 7]
		}
	]
}
term {
	name = add_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::AddS, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2080
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = adc_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::Adc, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2088
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = sub_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::SubS, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2096
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = materialize_bool_result
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2105
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = cmn_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::AddS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRImm12, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2112
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SubS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRR, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2118
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::SubS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRImm12, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2124
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp64_imm
	bindings = [
		0: Reg	argument(0)
		1: Imm12	argument(1)
		2: OperandSize	make_variant(OperandSize::Size64, [])
		3: ProducesFlags	constructor(cmp_imm, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2130
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = cmp_extend
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ExtendOp	argument(3)
		4: ALUOp	make_variant(ALUOp::SubS, [])
		5: WritableReg	constructor(writable_zero_reg, [], 1)
		6: MInst	make_variant(MInst::AluRRRExtend, [4, 0, 5, 1, 2, 3])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2134
			constraints = [
			]
			prio = 0
			result = 7
			impure = [5]
		}
	]
}
term {
	name = sbc_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::Sbc, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2141
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = vec_misc
	bindings = [
		0: VecMisc2	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecMisc, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2149
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_tbl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecTbl, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2156
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_tbl_ext
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecTblExt, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2162
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_tbl2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecTbl2, [5, 0, 1, 2])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2169
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_tbl2_ext
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecTbl2Ext, [6, 0, 1, 2, 3])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2178
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_rrr_long
	bindings = [
		0: VecRRRLongOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: bool	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRRLong, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2187
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_rr_pair_long
	bindings = [
		0: VecRRPairLongOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecRRPairLong, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2194
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_rrrr_long
	bindings = [
		0: VecRRRLongModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: bool	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecRRRLongMod, [0, 6, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2201
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_rr_narrow_low
	bindings = [
		0: VecRRNarrowOp	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecRRNarrowLow, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2208
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_rr_narrow_high
	bindings = [
		0: VecRRNarrowOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRNarrowHigh, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2216
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_rr_long
	bindings = [
		0: VecRRLongOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecRRLong, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2223
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = fpu_csel
	bindings = [
		0: Type	argument(0)
		1: Cond	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	const_prim(F32)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::FpuCSel32, [5, 2, 3, 1])
		7: Reg	constructor(writable_reg_to_reg, [5], 0)
		8: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [6, 7])
		9: Type	const_prim(F64)
		10: WritableReg	constructor(temp_writable_reg, [9], 1)
		11: MInst	make_variant(MInst::FpuCSel64, [10, 2, 3, 1])
		12: Reg	constructor(writable_reg_to_reg, [10], 0)
		13: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [11, 12])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2231
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 8
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2237
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 13
			impure = [10]
		}
	]
}
term {
	name = vec_csel
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecCSel, [4, 1, 2, 0])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2245
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = fpu_round
	bindings = [
		0: FpuRoundMode	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuRound, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2253
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuMove128, [3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
		7: Option(Type)	extractor(fits_in_64, 0)
		8: Type	match_some(7)
		9: Type	const_prim(F64)
		10: WritableReg	constructor(temp_writable_reg, [9], 1)
		11: MInst	make_variant(MInst::FpuMove64, [10, 1])
		12: Unit	constructor(emit, [11], 2)
		13: Reg	constructor(writable_reg_to_reg, [10], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2260
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2264
			constraints = [
				7:	some
			]
			prio = 1
			result = 13
			impure = [10, 12]
		}
	]
}
term {
	name = mov_to_fpu
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::MovToFpu, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2271
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move_fp_imm
	bindings = [
		0: ASIMDFPModImm	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuMoveFPImm, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2278
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = mov_to_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::MovToVec, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2285
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = mov_vec_elem
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: u8	argument(3)
		4: VectorSize	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecMovElement, [6, 0, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2292
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = mov_from_vec
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::MovFromVec, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2299
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = mov_from_vec_signed
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: OperandSize	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::MovFromVecSigned, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2306
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_move_from_vec
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuMoveFromVec, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2312
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = extend
	bindings = [
		0: Reg	argument(0)
		1: bool	argument(1)
		2: u8	argument(2)
		3: u8	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::Extend, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2319
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_extend
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(F32X4)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuExtend, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2326
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_extend
	bindings = [
		0: VecExtendOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecExtend, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2333
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_extract
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecExtract, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2340
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = load_acquire
	bindings = [
		0: Type	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::LoadAcquire, [0, 4, 2, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2347
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = store_release
	bindings = [
		0: Type	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: MInst	make_variant(MInst::StoreRelease, [0, 2, 3, 1])
		5: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2354
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = tst_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::AndS, [])
		4: OperandSize	constructor(operand_size, [0], 1)
		5: WritableReg	constructor(writable_zero_reg, [], 2)
		6: MInst	make_variant(MInst::AluRRImmLogic, [3, 4, 5, 1, 2])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2362
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5]
		}
	]
}
term {
	name = csel
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::CSel, [4, 0, 1, 2])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2376
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = cset
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2384
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = cset_paired
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2391
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = csetm
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSetm, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2397
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = csneg
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::CSNeg, [4, 0, 1, 2])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2407
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = ccmp
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: NZCV	argument(3)
		4: Cond	argument(4)
		5: ProducesFlags	argument(5)
		6: MInst	make_variant(MInst::CCmp, [0, 1, 2, 3, 4])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
		8: ProducesFlags	constructor(produces_flags_concat, [5, 7], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2417
			constraints = [
			]
			prio = 0
			result = 8
			impure = [8]
		}
	]
}
term {
	name = ccmp_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: UImm5	argument(2)
		3: NZCV	argument(3)
		4: Cond	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::CCmpImm, [0, 1, 2, 3, 4])
		8: MInst	make_variant(MInst::CSet, [6, 4])
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
		10: ValueRegs	constructor(value_reg, [9], 2)
		11: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [7, 8, 10])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2422
			constraints = [
			]
			prio = 1
			result = 11
			impure = [6, 10]
		}
	]
}
term {
	name = add
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2432
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rr_imm12, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2435
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_extend
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ExtendedValue	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rr_extend_reg, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2438
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_extend_op
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ExtendOp	argument(3)
		4: ALUOp	make_variant(ALUOp::Add, [])
		5: Reg	constructor(alu_rrr_extend, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2441
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = add_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Add, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2444
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = add_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Add, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2447
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2452
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rr_imm12, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2455
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_extend
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ExtendedValue	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rr_extend_reg, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2458
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Sub, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2461
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = sub_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2464
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_i128
	bindings = [
		0: ValueRegs	argument(0)
		1: ValueRegs	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Reg	constructor(value_regs_get, [1, 2], 3)
		7: Reg	constructor(value_regs_get, [1, 4], 4)
		8: Type	const_prim(I64)
		9: ProducesFlags	constructor(sub_with_flags_paired, [8, 3, 6], 5)
		10: ConsumesFlags	constructor(sbc_paired, [8, 5, 7], 6)
		11: ValueRegs	constructor(with_flags, [9, 10], 7)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2467
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 5, 6, 7, 9, 10, 11]
		}
	]
}
term {
	name = madd
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ALUOp3	make_variant(ALUOp3::MAdd, [])
		5: Reg	constructor(alu_rrrr, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2487
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = msub
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ALUOp3	make_variant(ALUOp3::MSub, [])
		5: Reg	constructor(alu_rrrr, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2492
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = umaddl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp3	make_variant(ALUOp3::UMAddL, [])
		4: Type	const_prim(I32)
		5: Reg	constructor(alu_rrrr, [3, 4, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2496
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = smaddl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp3	make_variant(ALUOp3::SMAddL, [])
		4: Type	const_prim(I32)
		5: Reg	constructor(alu_rrrr, [3, 4, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2500
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = uqadd
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uqadd, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2504
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqadd
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sqadd, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2508
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = uqsub
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uqsub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2512
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqsub
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sqsub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2516
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umulh
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::UMulH, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2520
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smulh
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SMulH, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2524
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = mul
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Mul, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2528
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = neg
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Neg, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2532
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev16
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev16, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2536
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev32
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev32, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2540
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev64
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev64, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2544
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = xtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Xtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2548
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = fcvtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Fcvtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2552
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2556
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtn, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2560
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqxtun
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtun, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2564
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtun2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtun, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2568
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = uqxtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Uqxtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2572
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = uqxtn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Uqxtn, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2576
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = aarch64_fence
	bindings = [
		0: MInst	make_variant(MInst::Fence, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2580
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = csdb
	bindings = [
		0: MInst	make_variant(MInst::Csdb, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2585
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = brk
	bindings = [
		0: MInst	make_variant(MInst::Brk, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2590
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = addp
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Addp, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2595
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = zip1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2599
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_abs
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Abs, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2603
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = abs
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: u8	const_int(0, u8)
		3: Imm12	constructor(u8_into_imm12, [2], 1)
		4: ProducesFlags	constructor(cmp_imm, [0, 1, 3], 2)
		5: Cond	make_variant(Cond::Gt, [])
		6: ConsumesFlags	constructor(csneg, [5, 1, 1], 3)
		7: ValueRegs	constructor(with_flags, [4, 6], 4)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [7, 8], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2608
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 4, 6, 7, 9]
		}
	]
}
term {
	name = addv
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecLanesOp	make_variant(VecLanesOp::Addv, [])
		3: Reg	constructor(vec_lanes, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2614
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = shll32
	bindings = [
		0: Reg	argument(0)
		1: bool	argument(1)
		2: VecRRLongOp	make_variant(VecRRLongOp::Shll32, [])
		3: Reg	constructor(vec_rr_long, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2618
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = saddlp8
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Saddlp8, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2623
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = saddlp16
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Saddlp16, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2626
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = uaddlp8
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Uaddlp8, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2629
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = uaddlp16
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Uaddlp16, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2632
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = umlal32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: bool	argument(3)
		4: VecRRRLongModOp	make_variant(VecRRRLongModOp::Umlal32, [])
		5: Reg	constructor(vec_rrrr_long, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2636
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = smull8
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull8, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2640
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull8
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull8, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2644
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smull16
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull16, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2648
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull16
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull16, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2652
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smull32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull32, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2656
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull32, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2660
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = asr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Asr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2664
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = asr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Asr, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2667
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2671
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsr, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2674
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsl
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsl, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2678
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsl_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsl, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2681
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_udiv
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::UDiv, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2685
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_sdiv
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SDiv, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2689
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = not
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Not, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2693
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = orr_not
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::OrrNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2698
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_not_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::OrrNot, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2701
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = orr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Orr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2706
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::Orr, [])
		4: Reg	constructor(alu_rr_imm_logic, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2709
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Orr, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2712
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = orr_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Orr, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2715
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_reg
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::And, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2720
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::And, [])
		4: Reg	constructor(alu_rr_imm_logic, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2723
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::And, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2726
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = eor
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Eor, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2730
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = eor_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Eor, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2733
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = bic
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::AndNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2738
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = bic_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Bic, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2741
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sshl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sshl, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2745
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Ushl, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2749
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushl_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Shl, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2753
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushr_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Ushr, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2757
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sshr_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Sshr, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2761
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_rotr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::RotR, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2766
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_rotr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::RotR, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2769
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = rbit
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::RBit, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2774
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_clz
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Clz, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2779
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_cls
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Cls, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2784
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev16
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev16, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2789
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev32
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev32, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2792
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev64
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev64, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2795
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = eon
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::EorNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2800
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_cnt
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Cnt, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2805
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = bsl
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VecALUModOp	make_variant(VecALUModOp::Bsl, [])
		5: VectorSize	constructor(vector_size, [0], 1)
		6: Reg	constructor(vec_rrr_mod, [4, 1, 2, 3, 5], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2810
			constraints = [
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
	]
}
term {
	name = udf
	bindings = [
		0: TrapCode	argument(0)
		1: MInst	make_variant(MInst::Udf, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2816
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = aarch64_uload8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad8, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2822
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad8, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2827
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad16, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2832
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad16, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2837
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2842
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2847
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2852
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2857
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2862
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64X2)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad128, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2867
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_loadp64
	bindings = [
		0: PairAMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: WritableReg	constructor(temp_writable_reg, [2], 2)
		5: MInst	make_variant(MInst::LoadP64, [3, 4, 0, 1])
		6: Unit	constructor(emit, [5], 3)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ValueRegs	constructor(value_regs, [7, 8], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2872
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 4, 6, 9]
		}
	]
}
term {
	name = aarch64_store8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store8, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2881
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store16, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2884
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store32, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2887
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store64, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2890
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore32, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2893
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore64, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2896
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore128, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2899
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_storep64
	bindings = [
		0: PairAMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: MInst	make_variant(MInst::StoreP64, [2, 3, 0, 1])
		5: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2902
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = trap_if
	bindings = [
		0: ProducesFlags	argument(0)
		1: TrapCode	argument(1)
		2: Cond	argument(2)
		3: CondBrKind	constructor(cond_br_cond, [2], 1)
		4: MInst	make_variant(MInst::TrapIf, [3, 1])
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [4])
		6: SideEffectNoResult	constructor(with_flags_side_effect, [0, 5], 2)
		7: InstOutput	constructor(side_effect, [6], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2908
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6, 7]
		}
	]
}
term {
	name = imm
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(integral_ty, 0)
		2: Type	match_some(1)
		3: ImmExtend	argument(1)
		4: u64	argument(2)
		5: Option(MoveWideConst)	constructor(move_wide_const_from_u64, [2, 4], 0)
		6: MoveWideConst	match_some(5)
		7: OperandSize	constructor(operand_size, [2], 1)
		8: Reg	constructor(movz, [6, 7], 2)
		9: u16	const_int(64, u16)
		10: Reg	constructor(add_range_fact, [8, 9, 4, 4], 3)
		11: Option(Type)	extractor(ty_32_or_64, 2)
		12: Type	match_some(11)
		13: Option(MoveWideConst)	constructor(move_wide_const_from_inverted_u64, [12, 4], 0)
		14: MoveWideConst	match_some(13)
		15: OperandSize	constructor(operand_size, [12], 1)
		16: Reg	constructor(movn, [14, 15], 2)
		17: Reg	constructor(add_range_fact, [16, 9, 4, 4], 3)
		18: Option(ImmLogic)	constructor(imm_logic_from_u64, [2, 4], 0)
		19: ImmLogic	match_some(18)
		20: Option(u16)	constructor(imm_size_from_type, [2], 0)
		21: u16	match_some(20)
		22: Reg	constructor(zero_reg, [], 1)
		23: Reg	constructor(orr_imm, [2, 22, 19], 2)
		24: Reg	constructor(add_range_fact, [23, 21, 4, 4], 3)
		25: Reg	constructor(load_constant64_full, [2, 3, 4], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2936
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				5:	some
			]
			prio = 3
			result = 10
			impure = [7, 8, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2941
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				11:	some
				13:	some
			]
			prio = 2
			result = 17
			impure = [15, 16, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2949
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				18:	some
				20:	some
			]
			prio = 1
			result = 24
			impure = [22, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2960
			constraints = [
				1:	some
			]
			prio = 0
			result = 25
			impure = [25]
		}
	]
}
term {
	name = put_in_reg_sext32
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(true)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(32, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2967
			constraints = [
				2:	some
			]
			prio = -1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2971
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2972
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_zext32
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(false)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(32, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2976
			constraints = [
				2:	some
			]
			prio = -1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2980
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2981
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_sext64
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(true)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(64, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2985
			constraints = [
				2:	some
			]
			prio = 1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2989
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_zext64
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(false)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(64, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2993
			constraints = [
				2:	some
			]
			prio = 1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2997
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = trap_if_zero_divisor
	bindings = [
		0: Reg	argument(0)
		1: CondBrKind	constructor(cond_br_zero, [0], 1)
		2: TrapCode	constructor(trap_code_division_by_zero, [], 0)
		3: MInst	make_variant(MInst::TrapIf, [1, 2])
		4: Unit	constructor(emit, [3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3002
			constraints = [
			]
			prio = 0
			result = 0
			impure = [1, 4]
		}
	]
}
term {
	name = size_from_ty
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_32, 0)
		2: Type	match_some(1)
		3: OperandSize	make_variant(OperandSize::Size32, [])
		4: OperandSize	make_variant(OperandSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3007
			constraints = [
				1:	some
			]
			prio = 1
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3008
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = trap_if_div_overflow
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::AddS, [])
		4: OperandSize	constructor(operand_size, [0], 1)
		5: WritableReg	constructor(writable_zero_reg, [], 2)
		6: u8	const_int(1, u8)
		7: Imm12	constructor(u8_into_imm12, [6], 3)
		8: MInst	make_variant(MInst::AluRRImm12, [3, 4, 5, 2, 7])
		9: Unit	constructor(emit, [8], 4)
		10: OperandSize	constructor(size_from_ty, [0], 5)
		11: UImm5	constructor(u8_into_uimm5, [6], 6)
		12: bool	const_prim(false)
		13: NZCV	constructor(nzcv, [12, 12, 12, 12], 7)
		14: Cond	make_variant(Cond::Eq, [])
		15: MInst	make_variant(MInst::CCmpImm, [10, 1, 11, 13, 14])
		16: Unit	constructor(emit, [15], 8)
		17: Cond	make_variant(Cond::Vs, [])
		18: CondBrKind	constructor(cond_br_cond, [17], 9)
		19: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		20: MInst	make_variant(MInst::TrapIf, [18, 19])
		21: Unit	constructor(emit, [20], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3014
			constraints = [
			]
			prio = 0
			result = 1
			impure = [4, 5, 7, 9, 10, 11, 13, 16, 18, 21]
		}
	]
}
term {
	name = trap_if_overflow
	bindings = [
		0: ProducesFlags	argument(0)
		1: TrapCode	argument(1)
		2: Cond	make_variant(Cond::Hs, [])
		3: CondBrKind	constructor(cond_br_cond, [2], 1)
		4: MInst	make_variant(MInst::TrapIf, [3, 1])
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [4])
		6: Reg	constructor(with_flags_reg, [0, 5], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3033
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 6]
		}
	]
}
term {
	name = sink_atomic_load
	bindings = [
		0: Inst	argument(0)
		1: Option((MemFlags, Value))	extractor(atomic_load, 0)
		2: (MemFlags, Value)	match_some(1)
		3: MemFlags	match_tuple(2, 0)
		4: Value	match_tuple(2, 1)
		5: Unit	constructor(sink_inst, [0], 1)
		6: Reg	constructor(put_in_reg, [4], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3040
			constraints = [
				1:	some
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
	]
}
term {
	name = alu_rs_imm_logic_commutative
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: Reg	constructor(put_in_reg, [2], 1)
		5: Reg	constructor(put_in_reg, [3], 2)
		6: Reg	constructor(alu_rrr, [0, 1, 4, 5], 3)
		7: Option(Inst)	extractor(def_inst, 3)
		8: Inst	match_some(7)
		9: Option(Imm64)	extractor(iconst, 8)
		10: Imm64	match_some(9)
		11: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 10], 0)
		12: ImmLogic	match_some(11)
		13: Reg	constructor(alu_rr_imm_logic, [0, 1, 4, 12], 2)
		14: Option(Inst)	extractor(def_inst, 2)
		15: Inst	match_some(14)
		16: Option(Imm64)	extractor(iconst, 15)
		17: Imm64	match_some(16)
		18: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 17], 0)
		19: ImmLogic	match_some(18)
		20: Reg	constructor(put_in_reg, [3], 1)
		21: Reg	constructor(alu_rr_imm_logic, [0, 1, 20, 19], 2)
		22: Option((Value, Value))	extractor(ishl, 8)
		23: (Value, Value)	match_some(22)
		24: Value	match_tuple(23, 0)
		25: Value	match_tuple(23, 1)
		26: Option(Inst)	extractor(def_inst, 25)
		27: Inst	match_some(26)
		28: Option(Imm64)	extractor(iconst, 27)
		29: Imm64	match_some(28)
		30: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 29], 0)
		31: ShiftOpAndAmt	match_some(30)
		32: Reg	constructor(put_in_reg, [24], 2)
		33: Reg	constructor(alu_rrr_shift, [0, 1, 4, 32, 31], 3)
		34: Option((Value, Value))	extractor(ishl, 15)
		35: (Value, Value)	match_some(34)
		36: Value	match_tuple(35, 0)
		37: Value	match_tuple(35, 1)
		38: Option(Inst)	extractor(def_inst, 37)
		39: Inst	match_some(38)
		40: Option(Imm64)	extractor(iconst, 39)
		41: Imm64	match_some(40)
		42: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 41], 0)
		43: ShiftOpAndAmt	match_some(42)
		44: Reg	constructor(put_in_reg, [36], 2)
		45: Reg	constructor(alu_rrr_shift, [0, 1, 20, 44, 43], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3050
			constraints = [
			]
			prio = -1
			result = 6
			impure = [4, 5, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3054
			constraints = [
				7:	some
				9:	some
				11:	some
			]
			prio = 0
			result = 13
			impure = [4, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3057
			constraints = [
				14:	some
				16:	some
				18:	some
			]
			prio = 1
			result = 21
			impure = [20, 21]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3062
			constraints = [
				7:	some
				22:	some
				26:	some
				28:	some
				30:	some
			]
			prio = 0
			result = 33
			impure = [4, 32, 33]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3065
			constraints = [
				14:	some
				34:	some
				38:	some
				40:	some
				42:	some
			]
			prio = 1
			result = 45
			impure = [20, 44, 45]
		}
	]
}
term {
	name = alu_rs_imm_logic
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: Reg	constructor(put_in_reg, [2], 1)
		5: Reg	constructor(put_in_reg, [3], 2)
		6: Reg	constructor(alu_rrr, [0, 1, 4, 5], 3)
		7: Option(Inst)	extractor(def_inst, 3)
		8: Inst	match_some(7)
		9: Option(Imm64)	extractor(iconst, 8)
		10: Imm64	match_some(9)
		11: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 10], 0)
		12: ImmLogic	match_some(11)
		13: Reg	constructor(alu_rr_imm_logic, [0, 1, 4, 12], 2)
		14: Option((Value, Value))	extractor(ishl, 8)
		15: (Value, Value)	match_some(14)
		16: Value	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Option(Inst)	extractor(def_inst, 17)
		19: Inst	match_some(18)
		20: Option(Imm64)	extractor(iconst, 19)
		21: Imm64	match_some(20)
		22: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 21], 0)
		23: ShiftOpAndAmt	match_some(22)
		24: Reg	constructor(put_in_reg, [16], 2)
		25: Reg	constructor(alu_rrr_shift, [0, 1, 4, 24, 23], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3072
			constraints = [
			]
			prio = -1
			result = 6
			impure = [4, 5, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3074
			constraints = [
				7:	some
				9:	some
				11:	some
			]
			prio = 0
			result = 13
			impure = [4, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3077
			constraints = [
				7:	some
				14:	some
				18:	some
				20:	some
				22:	some
			]
			prio = 0
			result = 25
			impure = [4, 24, 25]
		}
	]
}
term {
	name = i128_alu_bitop
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: ValueRegs	constructor(put_in_regs, [2], 1)
		5: usize	const_int(0, usize)
		6: Reg	constructor(value_regs_get, [4, 5], 2)
		7: usize	const_int(1, usize)
		8: Reg	constructor(value_regs_get, [4, 7], 3)
		9: ValueRegs	constructor(put_in_regs, [3], 4)
		10: Reg	constructor(value_regs_get, [9, 5], 5)
		11: Reg	constructor(value_regs_get, [9, 7], 6)
		12: Reg	constructor(alu_rrr, [0, 1, 6, 10], 7)
		13: Reg	constructor(alu_rrr, [0, 1, 8, 11], 8)
		14: ValueRegs	constructor(value_regs, [12, 13], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3086
			constraints = [
			]
			prio = 0
			result = 14
			impure = [4, 6, 8, 9, 10, 11, 12, 13, 14]
		}
	]
}
term {
	name = ld1r
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: MemFlags	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecLoadReplicate, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3101
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = load_ext_name
	bindings = [
		0: BoxExternalName	argument(0)
		1: i64	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::LoadExtName, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3108
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = amode
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: i32	argument(2)
		3: AMode	constructor(amode_no_more_iconst, [0, 1, 2], 1)
		4: Option(Inst)	extractor(def_inst, 1)
		5: Inst	match_some(4)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Value	match_tuple(7, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Imm64	match_some(12)
		14: Option(i32)	extractor(simm32, 13)
		15: i32	match_some(14)
		16: Option(i32)	constructor(s32_add_fallible, [15, 2], 0)
		17: i32	match_some(16)
		18: AMode	constructor(amode_no_more_iconst, [0, 8, 17], 1)
		19: Option(Inst)	extractor(def_inst, 8)
		20: Inst	match_some(19)
		21: Option(Imm64)	extractor(iconst, 20)
		22: Imm64	match_some(21)
		23: Option(i32)	extractor(simm32, 22)
		24: i32	match_some(23)
		25: Option(i32)	constructor(s32_add_fallible, [24, 2], 0)
		26: i32	match_some(25)
		27: AMode	constructor(amode_no_more_iconst, [0, 9, 26], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3128
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3130
			constraints = [
				4:	some
				6:	some
				10:	some
				12:	some
				14:	some
				16:	some
			]
			prio = 1
			result = 18
			impure = [18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3133
			constraints = [
				4:	some
				6:	some
				19:	some
				21:	some
				23:	some
				25:	some
			]
			prio = 2
			result = 27
			impure = [27]
		}
	]
}
term {
	name = amode_no_more_iconst
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: i32	argument(2)
		3: Reg	constructor(put_in_reg, [1], 1)
		4: Type	const_prim(I64)
		5: ImmExtend	make_variant(ImmExtend::Zero, [])
		6: i64	constructor(i32_as_i64, [2], 0)
		7: u64	constructor(i64_as_u64, [6], 0)
		8: Reg	constructor(imm, [4, 5, 7], 2)
		9: AMode	make_variant(AMode::RegReg, [3, 8])
		10: Option(SImm9)	constructor(simm9_from_i64, [6], 0)
		11: SImm9	match_some(10)
		12: AMode	make_variant(AMode::Unscaled, [3, 11])
		13: Option(UImm12Scaled)	constructor(uimm12_scaled_from_i64, [6, 0], 0)
		14: UImm12Scaled	match_some(13)
		15: AMode	make_variant(AMode::UnsignedOffset, [3, 14])
		16: Option(Inst)	extractor(def_inst, 1)
		17: Inst	match_some(16)
		18: Option((Value, Value))	extractor(iadd, 17)
		19: (Value, Value)	match_some(18)
		20: Value	match_tuple(19, 0)
		21: Value	match_tuple(19, 1)
		22: Reg	constructor(put_in_reg, [20], 1)
		23: Reg	constructor(amode_add, [22, 2], 2)
		24: Reg	constructor(put_in_reg, [21], 3)
		25: AMode	make_variant(AMode::RegReg, [23, 24])
		26: Option(Inst)	extractor(def_inst, 21)
		27: Inst	match_some(26)
		28: Option(Value)	extractor(uextend, 27)
		29: Value	match_some(28)
		30: Type	extractor(value_type, 29)
		31: Reg	constructor(put_in_reg, [29], 3)
		32: ExtendOp	make_variant(ExtendOp::UXTW, [])
		33: AMode	make_variant(AMode::RegExtended, [23, 31, 32])
		34: Option(Value)	extractor(sextend, 27)
		35: Value	match_some(34)
		36: Type	extractor(value_type, 35)
		37: Reg	constructor(put_in_reg, [35], 3)
		38: ExtendOp	make_variant(ExtendOp::SXTW, [])
		39: AMode	make_variant(AMode::RegExtended, [23, 37, 38])
		40: Option(Inst)	extractor(def_inst, 20)
		41: Inst	match_some(40)
		42: Option(Value)	extractor(uextend, 41)
		43: Value	match_some(42)
		44: Type	extractor(value_type, 43)
		45: Reg	constructor(put_in_reg, [21], 1)
		46: Reg	constructor(amode_add, [45, 2], 2)
		47: Reg	constructor(put_in_reg, [43], 3)
		48: AMode	make_variant(AMode::RegExtended, [46, 47, 32])
		49: Option(Value)	extractor(sextend, 41)
		50: Value	match_some(49)
		51: Type	extractor(value_type, 50)
		52: Reg	constructor(put_in_reg, [50], 3)
		53: AMode	make_variant(AMode::RegExtended, [46, 52, 38])
		54: Option((Value, Value))	extractor(ishl, 27)
		55: (Value, Value)	match_some(54)
		56: Value	match_tuple(55, 0)
		57: Value	match_tuple(55, 1)
		58: Option(Inst)	extractor(def_inst, 57)
		59: Inst	match_some(58)
		60: Option(Imm64)	extractor(iconst, 59)
		61: Imm64	match_some(60)
		62: u64	extractor(u64_from_imm64, 61)
		63: u16	constructor(ty_bytes, [0], 0)
		64: u64	constructor(u16_as_u64, [63], 0)
		65: u64	const_int(1, u64)
		66: u64	constructor(u64_shl, [65, 62], 0)
		67: bool	constructor(u64_eq, [64, 66], 0)
		68: AMode	constructor(amode_reg_scaled, [23, 56], 3)
		69: Option((Value, Value))	extractor(ishl, 41)
		70: (Value, Value)	match_some(69)
		71: Value	match_tuple(70, 0)
		72: Value	match_tuple(70, 1)
		73: Option(Inst)	extractor(def_inst, 72)
		74: Inst	match_some(73)
		75: Option(Imm64)	extractor(iconst, 74)
		76: Imm64	match_some(75)
		77: u64	extractor(u64_from_imm64, 76)
		78: u64	constructor(u64_shl, [65, 77], 0)
		79: bool	constructor(u64_eq, [64, 78], 0)
		80: AMode	constructor(amode_reg_scaled, [46, 71], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3140
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3145
			constraints = [
				10:	some
			]
			prio = 1
			result = 12
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3148
			constraints = [
				13:	some
			]
			prio = 2
			result = 15
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3159
			constraints = [
				16:	some
				18:	some
			]
			prio = 3
			result = 25
			impure = [22, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3161
			constraints = [
				16:	some
				18:	some
				26:	some
				28:	some
				30:	const_prim(I32)
			]
			prio = 4
			result = 33
			impure = [22, 23, 31]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3163
			constraints = [
				16:	some
				18:	some
				26:	some
				34:	some
				36:	const_prim(I32)
			]
			prio = 4
			result = 39
			impure = [22, 23, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3165
			constraints = [
				16:	some
				18:	some
				40:	some
				42:	some
				44:	const_prim(I32)
			]
			prio = 5
			result = 48
			impure = [45, 46, 47]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3167
			constraints = [
				16:	some
				18:	some
				40:	some
				49:	some
				51:	const_prim(I32)
			]
			prio = 5
			result = 53
			impure = [45, 46, 52]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3177
			constraints = [
				16:	some
				18:	some
				26:	some
				54:	some
				58:	some
				60:	some
				67:	const_prim(true)
			]
			prio = 6
			result = 68
			impure = [22, 23, 68]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3180
			constraints = [
				16:	some
				18:	some
				40:	some
				69:	some
				73:	some
				75:	some
				79:	const_prim(true)
			]
			prio = 7
			result = 80
			impure = [45, 46, 80]
		}
	]
}
term {
	name = amode_reg_scaled
	bindings = [
		0: Reg	argument(0)
		1: Value	argument(1)
		2: Reg	constructor(put_in_reg, [1], 1)
		3: AMode	make_variant(AMode::RegScaled, [0, 2])
		4: Option(Inst)	extractor(def_inst, 1)
		5: Inst	match_some(4)
		6: Option(Value)	extractor(uextend, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Reg	constructor(put_in_reg, [7], 1)
		10: ExtendOp	make_variant(ExtendOp::UXTW, [])
		11: AMode	make_variant(AMode::RegScaledExtended, [0, 9, 10])
		12: Option(Value)	extractor(sextend, 5)
		13: Value	match_some(12)
		14: Type	extractor(value_type, 13)
		15: Reg	constructor(put_in_reg, [13], 1)
		16: ExtendOp	make_variant(ExtendOp::SXTW, [])
		17: AMode	make_variant(AMode::RegScaledExtended, [0, 15, 16])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3185
			constraints = [
			]
			prio = 0
			result = 3
			impure = [2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3187
			constraints = [
				4:	some
				6:	some
				8:	const_prim(I32)
			]
			prio = 1
			result = 11
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3189
			constraints = [
				4:	some
				12:	some
				14:	const_prim(I32)
			]
			prio = 1
			result = 17
			impure = [15]
		}
	]
}
term {
	name = amode_add
	bindings = [
		0: Reg	argument(0)
		1: i32	argument(1)
		2: Type	const_prim(I64)
		3: ImmExtend	make_variant(ImmExtend::Zero, [])
		4: i64	constructor(i32_as_i64, [1], 0)
		5: u64	constructor(i64_as_u64, [4], 0)
		6: Reg	constructor(imm, [2, 3, 5], 1)
		7: Reg	constructor(add, [2, 0, 6], 2)
		8: Option(Imm12)	extractor(imm12_from_u64, 5)
		9: Imm12	match_some(8)
		10: Reg	constructor(add_imm, [2, 0, 9], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3195
			constraints = [
			]
			prio = 0
			result = 7
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3197
			constraints = [
				8:	some
			]
			prio = 1
			result = 10
			impure = [10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3200
			constraints = [
				1:	const_int(0)
			]
			prio = 2
			result = 0
		}
	]
}
term {
	name = pair_amode
	bindings = [
		0: Value	argument(0)
		1: i32	argument(1)
		2: i64	const_int(0, i64)
		3: Type	const_prim(I64)
		4: Option(SImm7Scaled)	constructor(simm7_scaled_from_i64, [2, 3], 0)
		5: SImm7Scaled	match_some(4)
		6: Reg	constructor(put_in_reg, [0], 1)
		7: Reg	constructor(amode_add, [6, 1], 2)
		8: PairAMode	make_variant(PairAMode::SignedOffset, [7, 5])
		9: i64	constructor(i32_as_i64, [1], 0)
		10: Option(SImm7Scaled)	constructor(simm7_scaled_from_i64, [9, 3], 0)
		11: SImm7Scaled	match_some(10)
		12: PairAMode	make_variant(PairAMode::SignedOffset, [6, 11])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3207
			constraints = [
				4:	some
			]
			prio = 0
			result = 8
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3212
			constraints = [
				10:	some
			]
			prio = 1
			result = 12
			impure = [6]
		}
	]
}
term {
	name = sink_load_into_addr
	bindings = [
		0: Type	argument(0)
		1: Inst	argument(1)
		2: Option((MemFlags, Value, Offset32))	extractor(load, 1)
		3: (MemFlags, Value, Offset32)	match_some(2)
		4: MemFlags	match_tuple(3, 0)
		5: Value	match_tuple(3, 1)
		6: Offset32	match_tuple(3, 2)
		7: i32	extractor(offset32, 6)
		8: Unit	constructor(sink_inst, [1], 1)
		9: Reg	constructor(put_in_reg, [5], 2)
		10: i64	constructor(i32_as_i64, [7], 0)
		11: u64	constructor(i64_as_u64, [10], 0)
		12: Reg	constructor(add_imm_to_addr, [9, 11], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3227
			constraints = [
				2:	some
			]
			prio = 0
			result = 12
			impure = [8, 9, 12]
		}
	]
}
term {
	name = add_imm_to_addr
	bindings = [
		0: Reg	argument(0)
		1: u64	argument(1)
		2: Option(Imm12)	extractor(imm12_from_u64, 1)
		3: Imm12	match_some(2)
		4: Type	const_prim(I64)
		5: Reg	constructor(add_imm, [4, 0, 3], 1)
		6: ImmExtend	make_variant(ImmExtend::Zero, [])
		7: Reg	constructor(imm, [4, 6, 1], 1)
		8: Reg	constructor(add, [4, 0, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3232
			constraints = [
				1:	const_int(0)
			]
			prio = 2
			result = 0
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3233
			constraints = [
				2:	some
			]
			prio = 1
			result = 5
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3234
			constraints = [
			]
			prio = 0
			result = 8
			impure = [7, 8]
		}
	]
}
term {
	name = constant_f32
	bindings = [
		0: u32	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size32, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size32x2, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: u64	constructor(u32_as_u64, [0], 0)
		7: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [6, 1], 0)
		8: ASIMDFPModImm	match_some(7)
		9: Reg	constructor(fpu_move_fp_imm, [8, 1], 1)
		10: Type	const_prim(I32)
		11: ImmExtend	make_variant(ImmExtend::Zero, [])
		12: Reg	constructor(imm, [10, 11, 6], 1)
		13: Reg	constructor(mov_to_fpu, [12, 1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3242
			constraints = [
				0:	const_int(0)
			]
			prio = 2
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3246
			constraints = [
				7:	some
			]
			prio = 1
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3249
			constraints = [
			]
			prio = 0
			result = 13
			impure = [12, 13]
		}
	]
}
term {
	name = constant_f64
	bindings = [
		0: u64	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size32, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size32x2, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: ScalarSize	make_variant(ScalarSize::Size64, [])
		7: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [0, 6], 0)
		8: ASIMDFPModImm	match_some(7)
		9: Reg	constructor(fpu_move_fp_imm, [8, 6], 1)
		10: Option(u32)	extractor(u64_as_u32, 0)
		11: u32	match_some(10)
		12: Reg	constructor(constant_f32, [11], 1)
		13: Option(u64)	extractor(u64_low32_bits_unset, 0)
		14: u64	match_some(13)
		15: Type	const_prim(I64)
		16: ImmExtend	make_variant(ImmExtend::Zero, [])
		17: Reg	constructor(imm, [15, 16, 14], 1)
		18: Reg	constructor(mov_to_fpu, [17, 6], 2)
		19: VCodeConstant	constructor(emit_u64_le_const, [0], 1)
		20: AMode	make_variant(AMode::Const, [19])
		21: MemFlags	constructor(mem_flags_trusted, [], 0)
		22: Reg	constructor(fpu_load64, [20, 21], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3260
			constraints = [
				0:	const_int(0)
			]
			prio = 4
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3264
			constraints = [
				7:	some
			]
			prio = 3
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3267
			constraints = [
				10:	some
			]
			prio = 2
			result = 12
			impure = [12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3269
			constraints = [
				13:	some
			]
			prio = 1
			result = 18
			impure = [17, 18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3271
			constraints = [
			]
			prio = 0
			result = 22
			impure = [19, 22]
		}
	]
}
term {
	name = constant_f128
	bindings = [
		0: u128	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size8x16, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: Option(u64)	extractor(u128_as_u64, 0)
		7: u64	match_some(6)
		8: Reg	constructor(constant_f64, [7], 1)
		9: Option(u64)	extractor(u128_replicated_u64, 0)
		10: u64	match_some(9)
		11: VectorSize	make_variant(VectorSize::Size64x2, [])
		12: Reg	constructor(splat_const, [10, 11], 1)
		13: VCodeConstant	constructor(emit_u128_le_const, [0], 1)
		14: AMode	make_variant(AMode::Const, [13])
		15: MemFlags	constructor(mem_flags_trusted, [], 0)
		16: Reg	constructor(fpu_load128, [14, 15], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3280
			constraints = [
				0:	const_int(0)
			]
			prio = 3
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3286
			constraints = [
				6:	some
			]
			prio = 2
			result = 8
			impure = [8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3290
			constraints = [
				9:	some
			]
			prio = 1
			result = 12
			impure = [12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3294
			constraints = [
			]
			prio = 0
			result = 16
			impure = [13, 16]
		}
	]
}
term {
	name = splat_const
	bindings = [
		0: u64	argument(0)
		1: Option(u64)	extractor(u64_replicated_u32, 0)
		2: u64	match_some(1)
		3: VectorSize	argument(1)
		4: VectorSize	make_variant(VectorSize::Size32x4, [])
		5: Reg	constructor(splat_const, [2, 4], 1)
		6: Option(u64)	extractor(u32_replicated_u16, 0)
		7: u64	match_some(6)
		8: VectorSize	make_variant(VectorSize::Size16x8, [])
		9: Reg	constructor(splat_const, [7, 8], 1)
		10: VectorSize	make_variant(VectorSize::Size16x4, [])
		11: Reg	constructor(splat_const, [7, 10], 1)
		12: Option(u8)	extractor(u16_replicated_u8, 0)
		13: u8	match_some(12)
		14: u64	constructor(u8_as_u64, [13], 0)
		15: VectorSize	make_variant(VectorSize::Size8x16, [])
		16: Reg	constructor(splat_const, [14, 15], 1)
		17: VectorSize	make_variant(VectorSize::Size8x8, [])
		18: Reg	constructor(splat_const, [14, 17], 1)
		19: ScalarSize	constructor(vector_lane_size, [3], 0)
		20: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [0, 19], 0)
		21: ASIMDMovModImm	match_some(20)
		22: bool	const_prim(false)
		23: Reg	constructor(vec_dup_imm, [21, 22, 3], 1)
		24: u64	constructor(u64_not, [0], 0)
		25: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [24, 19], 0)
		26: ASIMDMovModImm	match_some(25)
		27: bool	const_prim(true)
		28: Reg	constructor(vec_dup_imm, [26, 27, 3], 1)
		29: u64	const_int(32, u64)
		30: u64	constructor(u64_shl, [0, 29], 0)
		31: u64	constructor(u64_or, [0, 30], 0)
		32: ScalarSize	make_variant(ScalarSize::Size64, [])
		33: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [31, 32], 0)
		34: ASIMDMovModImm	match_some(33)
		35: VectorSize	make_variant(VectorSize::Size64x2, [])
		36: Reg	constructor(vec_dup_imm, [34, 22, 35], 1)
		37: Reg	constructor(fpu_extend, [36, 32], 2)
		38: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [0, 19], 0)
		39: ASIMDFPModImm	match_some(38)
		40: Reg	constructor(vec_dup_fp_imm, [39, 3], 1)
		41: Type	const_prim(I64)
		42: ImmExtend	make_variant(ImmExtend::Zero, [])
		43: Reg	constructor(imm, [41, 42, 0], 1)
		44: Reg	constructor(vec_dup, [43, 3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3305
			constraints = [
				1:	some
				3:	variant(VectorSize::Size64x2)
			]
			prio = 5
			result = 5
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3307
			constraints = [
				3:	variant(VectorSize::Size32x4)
				6:	some
			]
			prio = 5
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3309
			constraints = [
				3:	variant(VectorSize::Size32x2)
				6:	some
			]
			prio = 5
			result = 11
			impure = [11]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3311
			constraints = [
				3:	variant(VectorSize::Size16x8)
				12:	some
			]
			prio = 5
			result = 16
			impure = [16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3313
			constraints = [
				3:	variant(VectorSize::Size16x4)
				12:	some
			]
			prio = 5
			result = 18
			impure = [18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3318
			constraints = [
				20:	some
			]
			prio = 4
			result = 23
			impure = [23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3321
			constraints = [
				25:	some
			]
			prio = 3
			result = 28
			impure = [28]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3327
			constraints = [
				3:	variant(VectorSize::Size32x4)
				33:	some
			]
			prio = 2
			result = 36
			impure = [36]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3330
			constraints = [
				3:	variant(VectorSize::Size32x2)
				33:	some
			]
			prio = 2
			result = 37
			impure = [36, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3334
			constraints = [
				38:	some
			]
			prio = 1
			result = 40
			impure = [40]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3340
			constraints = [
			]
			prio = 0
			result = 44
			impure = [43, 44]
		}
	]
}
term {
	name = float_cmp_zero
	bindings = [
		0: FloatCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(float_cc_cmp_zero_to_vec_misc_op, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3375
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = float_cmp_zero_swap
	bindings = [
		0: FloatCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(float_cc_cmp_zero_to_vec_misc_op_swap, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3380
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = fcmeq0
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Fcmeq0, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3385
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = int_cmp_zero
	bindings = [
		0: IntCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(int_cc_cmp_zero_to_vec_misc_op, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3405
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = int_cmp_zero_swap
	bindings = [
		0: IntCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(int_cc_cmp_zero_to_vec_misc_op_swap, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3410
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = cmeq0
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Cmeq0, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3415
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = lse_atomic_rmw
	bindings = [
		0: AtomicRMWOp	argument(0)
		1: Value	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Reg	constructor(put_in_reg, [1], 1)
		6: WritableReg	constructor(temp_writable_reg, [3], 2)
		7: MInst	make_variant(MInst::AtomicRMW, [0, 2, 6, 5, 3, 4])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3420
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = lse_atomic_cas
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: WritableReg	constructor(temp_writable_reg, [3], 1)
		6: MInst	make_variant(MInst::AtomicCAS, [5, 1, 2, 0, 3, 4])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3430
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = atomic_rmw_loop
	bindings = [
		0: AtomicRMWLoopOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: WritableReg	constructor(temp_writable_reg, [5], 2)
		8: WritableReg	constructor(temp_writable_reg, [5], 3)
		9: MInst	make_variant(MInst::AtomicRMWLoop, [3, 0, 4, 1, 2, 6, 7, 8])
		10: Unit	constructor(emit, [9], 4)
		11: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3444
			constraints = [
			]
			prio = 0
			result = 11
			impure = [6, 7, 8, 10]
		}
	]
}
term {
	name = atomic_cas_loop
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: WritableReg	constructor(temp_writable_reg, [5], 2)
		8: MInst	make_variant(MInst::AtomicCASLoop, [3, 4, 0, 1, 2, 6, 7])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3458
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = copy_reg
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I32)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: OperandSize	make_variant(OperandSize::Size32, [])
		5: MInst	make_variant(MInst::Mov, [4, 3, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: Type	const_prim(I64)
		9: WritableReg	constructor(temp_writable_reg, [8], 1)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: MInst	make_variant(MInst::Mov, [10, 9, 1])
		12: Unit	constructor(emit, [11], 2)
		13: Reg	constructor(writable_reg_to_reg, [9], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3471
			constraints = [
				0:	const_prim(I32)
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3477
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 13
			impure = [9, 12]
		}
	]
}
term {
	name = mov_from_preg
	bindings = [
		0: PReg	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::MovFromPReg, [2, 0])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3487
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = mov_to_preg
	bindings = [
		0: PReg	argument(0)
		1: Reg	argument(1)
		2: MInst	make_variant(MInst::MovToPReg, [0, 1])
		3: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [2])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3493
			constraints = [
			]
			prio = 0
			result = 3
		}
	]
}
term {
	name = aarch64_sp
	bindings = [
		0: PReg	constructor(preg_sp, [], 1)
		1: Reg	constructor(mov_from_preg, [0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3509
			constraints = [
			]
			prio = 0
			result = 1
			impure = [0, 1]
		}
	]
}
term {
	name = aarch64_fp
	bindings = [
		0: PReg	constructor(preg_fp, [], 1)
		1: Reg	constructor(mov_from_preg, [0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3513
			constraints = [
			]
			prio = 0
			result = 1
			impure = [0, 1]
		}
	]
}
term {
	name = aarch64_link
	bindings = [
		0: Option(Unit)	constructor(preserve_frame_pointers, [], 0)
		1: Unit	match_some(0)
		2: Option(Unit)	constructor(sign_return_address_disabled, [], 0)
		3: Unit	match_some(2)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: i64	const_int(8, i64)
		7: AMode	make_variant(AMode::FPOffset, [6])
		8: MemFlags	constructor(mem_flags_trusted, [], 0)
		9: MInst	make_variant(MInst::ULoad64, [5, 7, 8])
		10: Unit	constructor(emit, [9], 2)
		11: Reg	constructor(writable_reg_to_reg, [5], 0)
		12: WritableReg	constructor(writable_link_reg, [], 1)
		13: MInst	make_variant(MInst::ULoad64, [12, 7, 8])
		14: Unit	constructor(emit, [13], 2)
		15: MInst	make_variant(MInst::Xpaclri, [])
		16: Unit	constructor(emit, [15], 3)
		17: PReg	constructor(preg_link, [], 4)
		18: Reg	constructor(mov_from_preg, [17], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3517
			constraints = [
				0:	some
				2:	some
			]
			prio = 1
			result = 11
			impure = [5, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3533
			constraints = [
				0:	some
			]
			prio = 0
			result = 18
			impure = [12, 14, 16, 17, 18]
		}
	]
}
term {
	name = max_shift
	bindings = [
		0: Type	argument(0)
		1: u8	const_int(63, u8)
		2: u8	const_int(31, u8)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3548
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3549
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = fcopy_sign
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(ty_scalar_float, 2)
		4: Type	match_some(3)
		5: Type	const_prim(F64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: u8	constructor(ty_bits, [4], 0)
		8: u8	constructor(max_shift, [4], 2)
		9: FPUOpRI	constructor(fpu_op_ri_ushr, [7, 8], 3)
		10: Reg	constructor(fpu_rri, [9, 1], 4)
		11: u8	constructor(max_shift, [4], 5)
		12: FPUOpRIMod	constructor(fpu_op_ri_sli, [7, 11], 6)
		13: MInst	make_variant(MInst::FpuRRIMod, [12, 6, 0, 10])
		14: Unit	constructor(emit, [13], 7)
		15: Reg	constructor(writable_reg_to_reg, [6], 0)
		16: Option((u32, u32))	extractor(multi_lane, 2)
		17: (u32, u32)	match_some(16)
		18: u32	match_tuple(17, 0)
		19: u32	match_tuple(17, 1)
		20: Type	const_prim(I8X16)
		21: WritableReg	constructor(temp_writable_reg, [20], 1)
		22: Type	constructor(lane_type, [2], 0)
		23: u8	constructor(max_shift, [22], 2)
		24: VectorSize	constructor(vector_size, [2], 3)
		25: Reg	constructor(ushr_vec_imm, [1, 23, 24], 4)
		26: VecShiftImmModOp	make_variant(VecShiftImmModOp::Sli, [])
		27: VectorSize	constructor(vector_size, [2], 5)
		28: u8	constructor(max_shift, [22], 6)
		29: MInst	make_variant(MInst::VecShiftImmMod, [26, 21, 0, 25, 27, 28])
		30: Unit	constructor(emit, [29], 7)
		31: Reg	constructor(writable_reg_to_reg, [21], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3554
			constraints = [
				3:	some
			]
			prio = 1
			result = 15
			impure = [6, 8, 9, 10, 11, 12, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3559
			constraints = [
				16:	some
			]
			prio = 0
			result = 31
			impure = [21, 23, 24, 25, 27, 28, 30]
		}
	]
}
term {
	name = fpu_to_int_nan_check
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: ProducesFlags	constructor(fpu_cmp, [0, 1, 1], 1)
		3: Cond	make_variant(Cond::Vs, [])
		4: CondBrKind	constructor(cond_br_cond, [3], 2)
		5: TrapCode	constructor(trap_code_bad_conversion_to_integer, [], 0)
		6: MInst	make_variant(MInst::TrapIf, [4, 5])
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [6, 1])
		8: ValueRegs	constructor(with_flags, [2, 7], 3)
		9: usize	const_int(0, usize)
		10: Reg	constructor(value_regs_get, [8, 9], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3568
			constraints = [
			]
			prio = 0
			result = 10
			impure = [2, 4, 8, 10]
		}
	]
}
term {
	name = fpu_to_int_underflow_check
	bindings = [
		0: bool	argument(0)
		1: Type	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(fits_in_16, 2)
		4: Type	match_some(3)
		5: Reg	argument(3)
		6: Reg	argument(4)
		7: ScalarSize	make_variant(ScalarSize::Size32, [])
		8: ProducesFlags	constructor(fpu_cmp, [7, 5, 6], 1)
		9: Cond	make_variant(Cond::Le, [])
		10: CondBrKind	constructor(cond_br_cond, [9], 2)
		11: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		12: MInst	make_variant(MInst::TrapIf, [10, 11])
		13: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [12, 5])
		14: ValueRegs	constructor(with_flags, [8, 13], 3)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 4)
		17: Option(Type)	extractor(fits_in_32, 2)
		18: Type	match_some(17)
		19: ScalarSize	make_variant(ScalarSize::Size64, [])
		20: ProducesFlags	constructor(fpu_cmp, [19, 5, 6], 1)
		21: ValueRegs	constructor(with_flags, [20, 13], 3)
		22: Reg	constructor(value_regs_get, [21, 15], 4)
		23: ScalarSize	constructor(scalar_size, [1], 1)
		24: ProducesFlags	constructor(fpu_cmp, [23, 5, 6], 2)
		25: Cond	make_variant(Cond::Lt, [])
		26: CondBrKind	constructor(cond_br_cond, [25], 3)
		27: MInst	make_variant(MInst::TrapIf, [26, 11])
		28: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [27, 5])
		29: ValueRegs	constructor(with_flags, [24, 28], 4)
		30: Reg	constructor(value_regs_get, [29, 15], 5)
		31: CondBrKind	constructor(cond_br_cond, [9], 3)
		32: MInst	make_variant(MInst::TrapIf, [31, 11])
		33: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [32, 5])
		34: ValueRegs	constructor(with_flags, [24, 33], 4)
		35: Reg	constructor(value_regs_get, [34, 15], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3581
			constraints = [
				0:	const_prim(true)
				1:	const_prim(F32)
				3:	some
			]
			prio = 0
			result = 16
			impure = [8, 10, 14, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3589
			constraints = [
				0:	const_prim(true)
				1:	const_prim(F64)
				17:	some
			]
			prio = 0
			result = 22
			impure = [20, 10, 21, 22]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3597
			constraints = [
				0:	const_prim(true)
			]
			prio = -1
			result = 30
			impure = [23, 24, 26, 29, 30]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3605
			constraints = [
				0:	const_prim(false)
			]
			prio = 0
			result = 35
			impure = [23, 24, 31, 34, 35]
		}
	]
}
term {
	name = fpu_to_int_overflow_check
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ProducesFlags	constructor(fpu_cmp, [0, 1, 2], 1)
		4: Cond	make_variant(Cond::Ge, [])
		5: CondBrKind	constructor(cond_br_cond, [4], 2)
		6: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		7: MInst	make_variant(MInst::TrapIf, [5, 6])
		8: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [7, 1])
		9: ValueRegs	constructor(with_flags, [3, 8], 3)
		10: usize	const_int(0, usize)
		11: Reg	constructor(value_regs_get, [9, 10], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3615
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 5, 9, 11]
		}
	]
}
term {
	name = fpu_to_int_cvt
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	argument(3)
		4: Type	argument(4)
		5: ScalarSize	constructor(scalar_size, [3], 1)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	constructor(ty_bits, [4], 0)
		8: Reg	constructor(fpu_to_int_nan_check, [5, 1], 2)
		9: Reg	constructor(min_fp_value, [2, 6, 7], 3)
		10: Reg	constructor(fpu_to_int_underflow_check, [2, 3, 4, 8, 9], 4)
		11: Reg	constructor(max_fp_value, [2, 6, 7], 5)
		12: Reg	constructor(fpu_to_int_overflow_check, [5, 10, 11], 6)
		13: Reg	constructor(fpu_to_int, [0, 12], 7)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3631
			constraints = [
			]
			prio = 0
			result = 13
			impure = [5, 8, 9, 10, 11, 12, 13]
		}
	]
}
term {
	name = fpu_to_int_cvt_sat
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	argument(3)
		4: Reg	constructor(fpu_to_int, [0, 1], 1)
		5: Option(Type)	extractor(fits_in_16, 3)
		6: Type	match_some(5)
		7: ImmExtend	make_variant(ImmExtend::Zero, [])
		8: u64	constructor(ty_mask, [6], 0)
		9: Reg	constructor(imm, [6, 7, 8], 2)
		10: OperandSize	make_variant(OperandSize::Size32, [])
		11: ProducesFlags	constructor(cmp, [10, 4, 9], 3)
		12: Cond	make_variant(Cond::Hi, [])
		13: ConsumesFlags	constructor(csel, [12, 9, 4], 4)
		14: Reg	constructor(with_flags_reg, [11, 13], 5)
		15: Reg	constructor(signed_max, [6], 2)
		16: Reg	constructor(signed_min, [6], 3)
		17: OperandSize	constructor(operand_size, [6], 4)
		18: ProducesFlags	constructor(cmp, [17, 4, 15], 5)
		19: Cond	make_variant(Cond::Gt, [])
		20: ConsumesFlags	constructor(csel, [19, 15, 4], 6)
		21: Reg	constructor(with_flags_reg, [18, 20], 7)
		22: OperandSize	constructor(operand_size, [6], 8)
		23: ProducesFlags	constructor(cmp, [22, 21, 16], 9)
		24: Cond	make_variant(Cond::Lt, [])
		25: ConsumesFlags	constructor(csel, [24, 16, 21], 10)
		26: Reg	constructor(with_flags_reg, [23, 25], 11)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3648
			constraints = [
				3:	const_prim(I64)
			]
			prio = 1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3650
			constraints = [
				3:	const_prim(I32)
			]
			prio = 1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3652
			constraints = [
				2:	const_prim(false)
				5:	some
			]
			prio = 0
			result = 14
			impure = [4, 9, 11, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3658
			constraints = [
				2:	const_prim(true)
				5:	some
			]
			prio = 0
			result = 26
			impure = [4, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26]
		}
	]
}
term {
	name = signed_min
	bindings = [
		0: Type	argument(0)
		1: Type	const_prim(I8)
		2: ImmExtend	make_variant(ImmExtend::Sign, [])
		3: u64	const_int(128, u64)
		4: Reg	constructor(imm, [1, 2, 3], 1)
		5: Type	const_prim(I16)
		6: u64	const_int(32768, u64)
		7: Reg	constructor(imm, [5, 2, 6], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3671
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3672
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 7
			impure = [7]
		}
	]
}
term {
	name = signed_max
	bindings = [
		0: Type	argument(0)
		1: Type	const_prim(I8)
		2: ImmExtend	make_variant(ImmExtend::Sign, [])
		3: u64	const_int(127, u64)
		4: Reg	constructor(imm, [1, 2, 3], 1)
		5: Type	const_prim(I16)
		6: u64	const_int(32767, u64)
		7: Reg	constructor(imm, [5, 2, 6], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3675
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3676
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 7
			impure = [7]
		}
	]
}
term {
	name = fpu_to_int
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuToInt, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3679
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = int_to_fpu
	bindings = [
		0: IntToFpuOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::IntToFpu, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3687
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = write_pinned_reg
	bindings = [
		0: Reg	argument(0)
		1: PReg	constructor(preg_pinned, [], 1)
		2: SideEffectNoResult	constructor(mov_to_preg, [1, 0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3703
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = compute_stack_addr
	bindings = [
		0: StackSlot	argument(0)
		1: Offset32	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	constructor(abi_stackslot_addr, [3, 0, 1], 2)
		5: Unit	constructor(emit, [4], 3)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3709
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 4, 5]
		}
	]
}
term {
	name = vec_cmp_vc
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Fcmeq, [])
		4: Reg	constructor(vec_rrr, [3, 0, 0, 2], 1)
		5: Reg	constructor(vec_rrr, [3, 1, 1, 2], 2)
		6: VecALUOp	make_variant(VecALUOp::And, [])
		7: Reg	constructor(vec_rrr, [6, 4, 5, 2], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3717
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5, 7]
		}
	]
}
term {
	name = vec_cmp
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	argument(2)
		3: Cond	argument(3)
		4: Option(Type)	constructor(ty_vector_float, [2], 0)
		5: Type	match_some(4)
		6: VectorSize	constructor(vector_size, [2], 1)
		7: Reg	constructor(vec_cmp_vc, [0, 1, 6], 2)
		8: VecMisc2	make_variant(VecMisc2::Not, [])
		9: VectorSize	constructor(vector_size, [2], 3)
		10: Reg	constructor(vec_misc, [8, 7, 9], 4)
		11: VecALUOp	make_variant(VecALUOp::Fcmeq, [])
		12: Reg	constructor(vec_rrr, [11, 0, 1, 6], 2)
		13: Reg	constructor(vec_misc, [8, 12, 9], 4)
		14: VecALUOp	make_variant(VecALUOp::Fcmge, [])
		15: Reg	constructor(vec_rrr, [14, 0, 1, 6], 2)
		16: VecALUOp	make_variant(VecALUOp::Fcmgt, [])
		17: Reg	constructor(vec_rrr, [16, 0, 1, 6], 2)
		18: Reg	constructor(vec_rrr, [16, 1, 0, 6], 2)
		19: Reg	constructor(vec_rrr, [14, 1, 0, 6], 2)
		20: Option(Type)	constructor(ty_vector_not_float, [2], 0)
		21: Type	match_some(20)
		22: VecALUOp	make_variant(VecALUOp::Cmeq, [])
		23: Reg	constructor(vec_rrr, [22, 0, 1, 6], 2)
		24: Reg	constructor(vec_misc, [8, 23, 9], 4)
		25: VecALUOp	make_variant(VecALUOp::Cmge, [])
		26: Reg	constructor(vec_rrr, [25, 0, 1, 6], 2)
		27: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		28: Reg	constructor(vec_rrr, [27, 0, 1, 6], 2)
		29: VecALUOp	make_variant(VecALUOp::Cmhs, [])
		30: Reg	constructor(vec_rrr, [29, 0, 1, 6], 2)
		31: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		32: Reg	constructor(vec_rrr, [31, 0, 1, 6], 2)
		33: Reg	constructor(vec_rrr, [25, 1, 0, 6], 2)
		34: Reg	constructor(vec_rrr, [27, 1, 0, 6], 2)
		35: Reg	constructor(vec_rrr, [29, 1, 0, 6], 2)
		36: Reg	constructor(vec_rrr, [31, 1, 0, 6], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3726
			constraints = [
				3:	variant(Cond::Vc)
				4:	some
			]
			prio = 0
			result = 7
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3729
			constraints = [
				3:	variant(Cond::Vs)
				4:	some
			]
			prio = 0
			result = 10
			impure = [6, 7, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3739
			constraints = [
				3:	variant(Cond::Eq)
				4:	some
			]
			prio = 0
			result = 12
			impure = [6, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3742
			constraints = [
				3:	variant(Cond::Ne)
				4:	some
			]
			prio = 0
			result = 13
			impure = [6, 12, 9, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3746
			constraints = [
				3:	variant(Cond::Ge)
				4:	some
			]
			prio = 0
			result = 15
			impure = [6, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3749
			constraints = [
				3:	variant(Cond::Gt)
				4:	some
			]
			prio = 0
			result = 17
			impure = [6, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3753
			constraints = [
				3:	variant(Cond::Mi)
				4:	some
			]
			prio = 0
			result = 18
			impure = [6, 18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3756
			constraints = [
				3:	variant(Cond::Ls)
				4:	some
			]
			prio = 0
			result = 19
			impure = [6, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3761
			constraints = [
				3:	variant(Cond::Eq)
				20:	some
			]
			prio = 1
			result = 23
			impure = [6, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3764
			constraints = [
				3:	variant(Cond::Ne)
				20:	some
			]
			prio = 1
			result = 24
			impure = [6, 23, 9, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3768
			constraints = [
				3:	variant(Cond::Ge)
				20:	some
			]
			prio = 1
			result = 26
			impure = [6, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3771
			constraints = [
				3:	variant(Cond::Gt)
				20:	some
			]
			prio = 1
			result = 28
			impure = [6, 28]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3774
			constraints = [
				3:	variant(Cond::Hs)
				20:	some
			]
			prio = 0
			result = 30
			impure = [6, 30]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3777
			constraints = [
				3:	variant(Cond::Hi)
				20:	some
			]
			prio = 0
			result = 32
			impure = [6, 32]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3781
			constraints = [
				3:	variant(Cond::Le)
				20:	some
			]
			prio = 0
			result = 33
			impure = [6, 33]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3784
			constraints = [
				3:	variant(Cond::Lt)
				20:	some
			]
			prio = 0
			result = 34
			impure = [6, 34]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3787
			constraints = [
				3:	variant(Cond::Ls)
				20:	some
			]
			prio = 1
			result = 35
			impure = [6, 35]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3790
			constraints = [
				3:	variant(Cond::Lo)
				20:	some
			]
			prio = 0
			result = 36
			impure = [6, 36]
		}
	]
}
term {
	name = vanytrue
	bindings = [
		0: Reg	argument(0)
		1: Type	argument(1)
		2: Option(Type)	extractor(ty_vec128, 1)
		3: Type	match_some(2)
		4: VecALUOp	make_variant(VecALUOp::Umaxp, [])
		5: VectorSize	make_variant(VectorSize::Size32x4, [])
		6: Reg	constructor(vec_rrr, [4, 0, 0, 5], 1)
		7: u8	const_int(0, u8)
		8: ScalarSize	make_variant(ScalarSize::Size64, [])
		9: Reg	constructor(mov_from_vec, [6, 7, 8], 2)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: Imm12	constructor(u8_into_imm12, [7], 3)
		12: ProducesFlags	constructor(cmp_imm, [10, 9, 11], 4)
		13: Option(Type)	constructor(ty_vec64, [1], 0)
		14: Type	match_some(13)
		15: Reg	constructor(mov_from_vec, [0, 7, 8], 1)
		16: Imm12	constructor(u8_into_imm12, [7], 2)
		17: ProducesFlags	constructor(cmp_imm, [10, 15, 16], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3802
			constraints = [
				2:	some
			]
			prio = 1
			result = 12
			impure = [6, 9, 11, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3806
			constraints = [
				13:	some
			]
			prio = 0
			result = 17
			impure = [15, 16, 17]
		}
	]
}
term {
	name = elf_tls_get_addr
	bindings = [
		0: ExternalName	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: WritableReg	constructor(temp_writable_reg, [1], 2)
		4: BoxExternalName	constructor(box_external_name, [0], 3)
		5: MInst	make_variant(MInst::ElfTlsGetAddr, [4, 2, 3])
		6: Unit	constructor(emit, [5], 4)
		7: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3815
			constraints = [
			]
			prio = 0
			result = 7
			impure = [2, 3, 4, 6]
		}
	]
}
term {
	name = macho_tls_get_addr
	bindings = [
		0: ExternalName	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::MachOTlsGetAddr, [0, 2])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3822
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = flags_and_cc
	bindings = [
		0: ProducesFlags	argument(0)
		1: IntCC	argument(1)
		2: FlagsAndCC	make_variant(FlagsAndCC::FlagsAndCC, [0, 1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3833
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = flags_and_cc_to_bool
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
		3: Cond	constructor(cond_code, [2], 1)
		4: ConsumesFlags	constructor(materialize_bool_result, [3], 2)
		5: ValueRegs	constructor(with_flags, [1, 4], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3837
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 5
			impure = [3, 4, 5]
		}
	]
}
term {
	name = flags_and_cc_flags
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3842
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = flags_and_cc_cc
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3846
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = lower_icmp
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: Option(Type)	extractor(fits_in_16, 3)
		5: Type	match_some(4)
		6: Option(IntCC)	constructor(signed_cond_code, [0], 0)
		7: IntCC	match_some(6)
		8: Reg	constructor(put_in_reg_sext32, [1], 1)
		9: OperandSize	constructor(operand_size, [5], 2)
		10: Reg	constructor(put_in_reg, [2], 3)
		11: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		12: ExtendOp	constructor(lower_extend_op, [5, 11], 4)
		13: ProducesFlags	constructor(cmp_extend, [9, 8, 10, 12], 5)
		14: FlagsAndCC	constructor(flags_and_cc, [13, 0], 6)
		15: Option(Imm12)	extractor(imm12_from_value, 2)
		16: Imm12	match_some(15)
		17: Reg	constructor(put_in_reg_zext32, [1], 1)
		18: ProducesFlags	constructor(cmp_imm, [9, 17, 16], 3)
		19: FlagsAndCC	constructor(flags_and_cc, [18, 0], 4)
		20: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		21: ExtendOp	constructor(lower_extend_op, [5, 20], 4)
		22: ProducesFlags	constructor(cmp_extend, [9, 17, 10, 21], 5)
		23: FlagsAndCC	constructor(flags_and_cc, [22, 0], 6)
		24: Option(u64)	extractor(u64_from_iconst, 2)
		25: u64	match_some(24)
		26: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		27: Type	match_some(26)
		28: FlagsAndCC	constructor(lower_icmp_const, [0, 1, 25, 3], 1)
		29: OperandSize	constructor(operand_size, [3], 1)
		30: Reg	constructor(put_in_reg, [1], 2)
		31: ProducesFlags	constructor(cmp, [29, 30, 10], 4)
		32: FlagsAndCC	constructor(flags_and_cc, [31, 0], 5)
		33: ProducesFlags	constructor(lower_icmp_i128_eq_ne, [1, 2], 1)
		34: IntCC	make_variant(IntCC::Equal, [])
		35: FlagsAndCC	constructor(flags_and_cc, [33, 34], 2)
		36: IntCC	make_variant(IntCC::NotEqual, [])
		37: FlagsAndCC	constructor(flags_and_cc, [33, 36], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3880
			constraints = [
				4:	some
				6:	some
			]
			prio = 1
			result = 14
			impure = [8, 9, 10, 12, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3884
			constraints = [
				4:	some
				15:	some
			]
			prio = -1
			result = 19
			impure = [17, 9, 18, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3887
			constraints = [
				4:	some
			]
			prio = -2
			result = 23
			impure = [17, 9, 10, 21, 22, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3890
			constraints = [
				24:	some
				26:	some
			]
			prio = -3
			result = 28
			impure = [28]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3893
			constraints = [
				26:	some
			]
			prio = -4
			result = 32
			impure = [29, 30, 10, 31, 32]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3946
			constraints = [
				0:	variant(IntCC::Equal)
				3:	const_prim(I128)
			]
			prio = 0
			result = 35
			impure = [33, 35]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3948
			constraints = [
				0:	variant(IntCC::NotEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 37
			impure = [33, 37]
		}
	]
}
term {
	name = lower_icmp_into_reg
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: Option((u32, u32))	extractor(multi_lane, 3)
		5: (u32, u32)	match_some(4)
		6: u32	match_tuple(5, 0)
		7: u32	match_tuple(5, 1)
		8: Type	argument(4)
		9: Cond	constructor(cond_code, [0], 1)
		10: Reg	constructor(put_in_reg, [1], 2)
		11: Reg	constructor(put_in_reg, [2], 3)
		12: Reg	constructor(vec_cmp, [10, 11, 3, 9], 4)
		13: ValueRegs	constructor(value_reg, [12], 5)
		14: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		15: Type	match_some(14)
		16: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 3], 2)
		17: ValueRegs	constructor(flags_and_cc_to_bool, [16], 3)
		18: Type	const_prim(I128)
		19: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 18], 2)
		20: ValueRegs	constructor(flags_and_cc_to_bool, [19], 3)
		21: IntCC	constructor(intcc_unsigned, [0], 0)
		22: Cond	constructor(cond_code, [21], 1)
		23: Cond	constructor(cond_code, [0], 2)
		24: ValueRegs	constructor(put_in_regs, [1], 3)
		25: ValueRegs	constructor(put_in_regs, [2], 4)
		26: usize	const_int(0, usize)
		27: Reg	constructor(value_regs_get, [24, 26], 5)
		28: usize	const_int(1, usize)
		29: Reg	constructor(value_regs_get, [24, 28], 6)
		30: Reg	constructor(value_regs_get, [25, 26], 7)
		31: Reg	constructor(value_regs_get, [25, 28], 8)
		32: OperandSize	make_variant(OperandSize::Size64, [])
		33: ProducesFlags	constructor(cmp, [32, 27, 30], 9)
		34: ConsumesFlags	constructor(materialize_bool_result, [22], 10)
		35: Reg	constructor(with_flags_reg, [33, 34], 11)
		36: ProducesFlags	constructor(cmp, [32, 29, 31], 12)
		37: ConsumesFlags	constructor(lower_icmp_i128_consumer, [23, 35], 13)
		38: ValueRegs	constructor(with_flags, [36, 37], 14)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3861
			constraints = [
				4:	some
			]
			prio = 1
			result = 13
			impure = [9, 10, 11, 12, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3875
			constraints = [
				14:	some
			]
			prio = -2
			result = 17
			impure = [9, 16, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3923
			constraints = [
				0:	variant(IntCC::Equal)
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = 0
			result = 20
			impure = [9, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3927
			constraints = [
				0:	variant(IntCC::NotEqual)
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = 0
			result = 20
			impure = [9, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3956
			constraints = [
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = -1
			result = 38
			impure = [22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38]
		}
	]
}
term {
	name = lower_icmp_into_flags
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 3], 1)
		5: Type	const_prim(I128)
		6: Type	const_prim(I8)
		7: ValueRegs	constructor(lower_icmp_into_reg, [0, 1, 2, 5, 6], 1)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [7, 8], 2)
		10: Type	const_prim(I64)
		11: ImmExtend	make_variant(ImmExtend::Sign, [])
		12: u64	const_int(1, u64)
		13: Reg	constructor(imm, [10, 11, 12], 3)
		14: OperandSize	make_variant(OperandSize::Size64, [])
		15: ProducesFlags	constructor(cmp, [14, 9, 13], 4)
		16: FlagsAndCC	constructor(flags_and_cc, [15, 0], 5)
		17: ImmExtend	make_variant(ImmExtend::Zero, [])
		18: Reg	constructor(imm, [10, 17, 12], 3)
		19: ProducesFlags	constructor(cmp, [14, 9, 18], 4)
		20: FlagsAndCC	constructor(flags_and_cc, [19, 0], 5)
		21: ProducesFlags	constructor(cmp, [14, 13, 9], 4)
		22: FlagsAndCC	constructor(flags_and_cc, [21, 0], 5)
		23: ProducesFlags	constructor(cmp, [14, 18, 9], 4)
		24: FlagsAndCC	constructor(flags_and_cc, [23, 0], 5)
		25: Reg	constructor(zero_reg, [], 3)
		26: ProducesFlags	constructor(cmp, [14, 9, 25], 4)
		27: FlagsAndCC	constructor(flags_and_cc, [26, 0], 5)
		28: ProducesFlags	constructor(cmp, [14, 25, 9], 4)
		29: FlagsAndCC	constructor(flags_and_cc, [28, 0], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3857
			constraints = [
			]
			prio = -1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4030
			constraints = [
				0:	variant(IntCC::SignedGreaterThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 16
			impure = [7, 9, 13, 15, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4035
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 20
			impure = [7, 9, 18, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4040
			constraints = [
				0:	variant(IntCC::SignedLessThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 22
			impure = [7, 9, 13, 21, 22]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4045
			constraints = [
				0:	variant(IntCC::UnsignedLessThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 24
			impure = [7, 9, 18, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4051
			constraints = [
				0:	variant(IntCC::SignedGreaterThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 27
			impure = [7, 9, 25, 26, 27]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4055
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 27
			impure = [7, 9, 25, 26, 27]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4059
			constraints = [
				0:	variant(IntCC::SignedLessThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 29
			impure = [7, 9, 25, 28, 29]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4063
			constraints = [
				0:	variant(IntCC::UnsignedLessThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 29
			impure = [7, 9, 25, 28, 29]
		}
	]
}
term {
	name = lower_icmp_const
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: u64	argument(2)
		3: Type	argument(3)
		4: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		5: Type	match_some(4)
		6: bool	constructor(u64_is_odd, [2], 0)
		7: u64	const_int(1, u64)
		8: u64	constructor(u64_sub, [2, 7], 0)
		9: Option(Imm12)	extractor(imm12_from_u64, 8)
		10: Imm12	match_some(9)
		11: OperandSize	constructor(operand_size, [3], 1)
		12: Reg	constructor(put_in_reg, [1], 2)
		13: ProducesFlags	constructor(cmp_imm, [11, 12, 10], 3)
		14: IntCC	make_variant(IntCC::UnsignedGreaterThan, [])
		15: FlagsAndCC	constructor(flags_and_cc, [13, 14], 4)
		16: IntCC	make_variant(IntCC::SignedGreaterThan, [])
		17: FlagsAndCC	constructor(flags_and_cc, [13, 16], 4)
		18: Option(Imm12)	extractor(imm12_from_u64, 2)
		19: Imm12	match_some(18)
		20: ProducesFlags	constructor(cmp_imm, [11, 12, 19], 3)
		21: FlagsAndCC	constructor(flags_and_cc, [20, 0], 4)
		22: ImmExtend	make_variant(ImmExtend::Zero, [])
		23: Reg	constructor(imm, [3, 22, 2], 3)
		24: ProducesFlags	constructor(cmp, [11, 12, 23], 4)
		25: FlagsAndCC	constructor(flags_and_cc, [24, 0], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3903
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThanOrEqual)
				4:	some
				6:	const_prim(true)
				9:	some
			]
			prio = 0
			result = 15
			impure = [11, 12, 13, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3908
			constraints = [
				0:	variant(IntCC::SignedGreaterThanOrEqual)
				4:	some
				6:	const_prim(true)
				9:	some
			]
			prio = 0
			result = 17
			impure = [11, 12, 13, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3914
			constraints = [
				4:	some
				18:	some
			]
			prio = -1
			result = 21
			impure = [11, 12, 20, 21]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3917
			constraints = [
				4:	some
			]
			prio = -2
			result = 25
			impure = [11, 12, 23, 24, 25]
		}
	]
}
term {
	name = lower_extend_op
	bindings = [
		0: Type	argument(0)
		1: ArgumentExtension	argument(1)
		2: ExtendOp	make_variant(ExtendOp::SXTB, [])
		3: ExtendOp	make_variant(ExtendOp::SXTH, [])
		4: ExtendOp	make_variant(ExtendOp::UXTB, [])
		5: ExtendOp	make_variant(ExtendOp::UXTH, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3869
			constraints = [
				0:	const_prim(I8)
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3870
			constraints = [
				0:	const_prim(I16)
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3871
			constraints = [
				0:	const_prim(I8)
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3872
			constraints = [
				0:	const_prim(I16)
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = lower_icmp_i128_eq_ne
	bindings = [
		0: Value	argument(0)
		1: Value	argument(1)
		2: ValueRegs	constructor(put_in_regs, [0], 1)
		3: ValueRegs	constructor(put_in_regs, [1], 2)
		4: usize	const_int(0, usize)
		5: Reg	constructor(value_regs_get, [2, 4], 3)
		6: usize	const_int(1, usize)
		7: Reg	constructor(value_regs_get, [2, 6], 4)
		8: Reg	constructor(value_regs_get, [3, 4], 5)
		9: Reg	constructor(value_regs_get, [3, 6], 6)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: ProducesFlags	constructor(cmp, [10, 5, 8], 7)
		12: bool	const_prim(false)
		13: NZCV	constructor(nzcv, [12, 12, 12, 12], 8)
		14: Cond	make_variant(Cond::Eq, [])
		15: ProducesFlags	constructor(ccmp, [10, 7, 9, 13, 14, 11], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3935
			constraints = [
			]
			prio = 0
			result = 15
			impure = [2, 3, 5, 7, 8, 9, 11, 13, 15]
		}
	]
}
term {
	name = lower_icmp_i128_consumer
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: WritableReg	constructor(temp_writable_reg, [2], 2)
		5: MInst	make_variant(MInst::CSet, [3, 0])
		6: Cond	make_variant(Cond::Eq, [])
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: MInst	make_variant(MInst::CSel, [4, 6, 1, 7])
		9: Reg	constructor(writable_reg_to_reg, [4], 0)
		10: ValueRegs	constructor(value_reg, [9], 3)
		11: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [5, 8, 10])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3971
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 4, 10]
		}
	]
}
term {
	name = lower_bmask
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_64, 0)
		2: Type	match_some(1)
		3: Type	argument(1)
		4: Option(Type)	extractor(ty_32_or_64, 3)
		5: Type	match_some(4)
		6: ValueRegs	argument(2)
		7: OperandSize	constructor(operand_size, [5], 1)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [6, 8], 2)
		10: u8	const_int(0, u8)
		11: Imm12	constructor(u8_into_imm12, [10], 3)
		12: ProducesFlags	constructor(cmp_imm, [7, 9, 11], 4)
		13: Cond	make_variant(Cond::Ne, [])
		14: ConsumesFlags	constructor(csetm, [13], 5)
		15: Reg	constructor(with_flags_reg, [12, 14], 6)
		16: ValueRegs	constructor(value_reg, [15], 7)
		17: Reg	constructor(value_regs_get, [6, 8], 1)
		18: usize	const_int(1, usize)
		19: Reg	constructor(value_regs_get, [6, 18], 2)
		20: Type	const_prim(I64)
		21: Reg	constructor(orr, [20, 17, 19], 3)
		22: ValueRegs	constructor(value_reg, [21], 4)
		23: ValueRegs	constructor(lower_bmask, [2, 20, 22], 5)
		24: ValueRegs	constructor(lower_bmask, [20, 3, 6], 1)
		25: Reg	constructor(value_regs_get, [24, 8], 2)
		26: ValueRegs	constructor(value_regs, [25, 25], 3)
		27: Option(Type)	extractor(fits_in_16, 3)
		28: Type	match_some(27)
		29: Type	const_prim(I32)
		30: u64	constructor(ty_mask, [28], 0)
		31: Option(ImmLogic)	constructor(imm_logic_from_u64, [29, 30], 0)
		32: ImmLogic	match_some(31)
		33: Reg	constructor(and_imm, [29, 17, 32], 2)
		34: ValueRegs	constructor(value_reg, [33], 3)
		35: ValueRegs	constructor(lower_bmask, [0, 29, 34], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3986
			constraints = [
				1:	some
				4:	some
			]
			prio = 0
			result = 16
			impure = [7, 9, 11, 12, 14, 15, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3999
			constraints = [
				1:	some
				3:	const_prim(I128)
			]
			prio = 1
			result = 23
			impure = [17, 19, 21, 22, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4008
			constraints = [
				0:	const_prim(I128)
			]
			prio = 2
			result = 26
			impure = [24, 25, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4020
			constraints = [
				27:	some
				31:	some
			]
			prio = 3
			result = 35
			impure = [17, 33, 34, 35]
		}
	]
}
term {
	name = lower_select
	bindings = [
		0: ProducesFlags	argument(0)
		1: Cond	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(ty_scalar_float, 2)
		4: Type	match_some(3)
		5: Value	argument(3)
		6: Value	argument(4)
		7: Reg	constructor(put_in_reg, [5], 1)
		8: Reg	constructor(put_in_reg, [6], 2)
		9: ConsumesFlags	constructor(fpu_csel, [4, 1, 7, 8], 3)
		10: ValueRegs	constructor(with_flags, [0, 9], 4)
		11: Option(Type)	extractor(ty_vec128, 2)
		12: Type	match_some(11)
		13: ConsumesFlags	constructor(vec_csel, [1, 7, 8], 3)
		14: ValueRegs	constructor(with_flags, [0, 13], 4)
		15: Option(Type)	constructor(ty_vec64, [2], 0)
		16: Type	match_some(15)
		17: Type	const_prim(F64)
		18: ConsumesFlags	constructor(fpu_csel, [17, 1, 7, 8], 3)
		19: ValueRegs	constructor(with_flags, [0, 18], 4)
		20: Type	const_prim(I64)
		21: WritableReg	constructor(temp_writable_reg, [20], 1)
		22: WritableReg	constructor(temp_writable_reg, [20], 2)
		23: ValueRegs	constructor(put_in_regs, [5], 3)
		24: ValueRegs	constructor(put_in_regs, [6], 4)
		25: usize	const_int(0, usize)
		26: Reg	constructor(value_regs_get, [23, 25], 5)
		27: usize	const_int(1, usize)
		28: Reg	constructor(value_regs_get, [23, 27], 6)
		29: Reg	constructor(value_regs_get, [24, 25], 7)
		30: Reg	constructor(value_regs_get, [24, 27], 8)
		31: MInst	make_variant(MInst::CSel, [21, 1, 26, 29])
		32: MInst	make_variant(MInst::CSel, [22, 1, 28, 30])
		33: Reg	constructor(writable_reg_to_reg, [21], 0)
		34: Reg	constructor(writable_reg_to_reg, [22], 0)
		35: ValueRegs	constructor(value_regs, [33, 34], 9)
		36: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [31, 32, 35])
		37: ValueRegs	constructor(with_flags, [0, 36], 10)
		38: Option(Type)	constructor(ty_int_ref_scalar_64, [2], 0)
		39: Type	match_some(38)
		40: ConsumesFlags	constructor(csel, [1, 7, 8], 3)
		41: ValueRegs	constructor(with_flags, [0, 40], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4070
			constraints = [
				3:	some
			]
			prio = 2
			result = 10
			impure = [7, 8, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4072
			constraints = [
				11:	some
			]
			prio = 3
			result = 14
			impure = [7, 8, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4074
			constraints = [
				15:	some
			]
			prio = 0
			result = 19
			impure = [7, 8, 18, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4077
			constraints = [
				2:	const_prim(I128)
			]
			prio = 4
			result = 37
			impure = [21, 22, 23, 24, 26, 28, 29, 30, 35, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4091
			constraints = [
				38:	some
			]
			prio = 1
			result = 41
			impure = [7, 8, 40, 41]
		}
	]
}
term {
	name = aarch64_jump
	bindings = [
		0: BranchTarget	argument(0)
		1: MInst	make_variant(MInst::Jump, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4097
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = jt_sequence
	bindings = [
		0: Reg	argument(0)
		1: MachLabel	argument(1)
		2: BoxVecMachLabel	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: WritableReg	constructor(temp_writable_reg, [3], 2)
		6: MInst	make_variant(MInst::JTSequence, [1, 2, 0, 4, 5])
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4119
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5]
		}
	]
}
term {
	name = cond_br
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: CondBrKind	argument(2)
		3: MInst	make_variant(MInst::CondBr, [0, 1, 2])
		4: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4127
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = test_branch
	bindings = [
		0: TestBitAndBranchKind	argument(0)
		1: BranchTarget	argument(1)
		2: BranchTarget	argument(2)
		3: Reg	argument(3)
		4: u8	argument(4)
		5: MInst	make_variant(MInst::TestBitAndBranch, [0, 1, 2, 3, 4])
		6: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4133
			constraints = [
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = tbnz
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: Reg	argument(2)
		3: u8	argument(3)
		4: TestBitAndBranchKind	make_variant(TestBitAndBranchKind::NZ, [])
		5: SideEffectNoResult	constructor(test_branch, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4138
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = tbz
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: Reg	argument(2)
		3: u8	argument(3)
		4: TestBitAndBranchKind	make_variant(TestBitAndBranchKind::Z, [])
		5: SideEffectNoResult	constructor(test_branch, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4143
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = mov_to_nzcv
	bindings = [
		0: Reg	argument(0)
		1: MInst	make_variant(MInst::MovToNZCV, [0])
		2: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4148
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = emit_island
	bindings = [
		0: CodeOffset	argument(0)
		1: MInst	make_variant(MInst::EmitIsland, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4154
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = br_table_impl
	bindings = [
		0: u64	argument(0)
		1: Option(Imm12)	extractor(imm12_from_u64, 0)
		2: Imm12	match_some(1)
		3: Reg	argument(1)
		4: MachLabel	argument(2)
		5: BoxVecMachLabel	argument(3)
		6: OperandSize	make_variant(OperandSize::Size32, [])
		7: ProducesFlags	constructor(cmp_imm, [6, 3, 2], 1)
		8: ConsumesFlags	constructor(jt_sequence, [3, 4, 5], 2)
		9: SideEffectNoResult	constructor(with_flags_side_effect, [7, 8], 3)
		10: Unit	constructor(emit_side_effect, [9], 4)
		11: Type	const_prim(I64)
		12: ImmExtend	make_variant(ImmExtend::Zero, [])
		13: Reg	constructor(imm, [11, 12, 0], 1)
		14: ProducesFlags	constructor(cmp, [6, 3, 13], 2)
		15: ConsumesFlags	constructor(jt_sequence, [3, 4, 5], 3)
		16: SideEffectNoResult	constructor(with_flags_side_effect, [14, 15], 4)
		17: Unit	constructor(emit_side_effect, [16], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4160
			constraints = [
				1:	some
			]
			prio = 0
			result = 10
			impure = [7, 8, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4164
			constraints = [
			]
			prio = -1
			result = 17
			impure = [13, 14, 15, 16, 17]
		}
	]
}
term {
	name = vec_uzp1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uzp1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4172
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_uzp2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uzp2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4176
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_zip1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4180
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_zip2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4184
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_trn1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Trn1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4188
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_trn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Trn2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4192
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_dup_fp_imm
	bindings = [
		0: ASIMDFPModImm	argument(0)
		1: VectorSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecDupFPImm, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4208
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_load64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4215
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_load128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad128, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4222
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move_128
	bindings = [
		0: Reg	argument(0)
		1: Type	const_prim(I8X16)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::FpuMove128, [2, 0])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst_neon.isle line 4
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = lower
	bindings = [
		0: Inst	argument(0)
		1: Option((Type, Inst))	extractor(has_type, 0)
		2: (Type, Inst)	match_some(1)
		3: Type	match_tuple(2, 0)
		4: Inst	match_tuple(2, 1)
		5: Option(Imm64)	extractor(iconst, 4)
		6: Imm64	match_some(5)
		7: u64	extractor(u64_from_imm64, 6)
		8: ImmExtend	make_variant(ImmExtend::Zero, [])
		9: Reg	constructor(imm, [3, 8, 7], 1)
		10: InstOutput	constructor(output_reg, [9], 2)
		11: Option(())	extractor(null, 4)
		12: ()	match_some(11)
		13: u64	const_int(0, u64)
		14: Reg	constructor(imm, [3, 8, 13], 1)
		15: InstOutput	constructor(output_reg, [14], 2)
		16: Option(Ieee32)	extractor(f32const, 0)
		17: Ieee32	match_some(16)
		18: u32	extractor(u32_from_ieee32, 17)
		19: Reg	constructor(constant_f32, [18], 1)
		20: InstOutput	constructor(output_reg, [19], 2)
		21: Option(Ieee64)	extractor(f64const, 0)
		22: Ieee64	match_some(21)
		23: u64	extractor(u64_from_ieee64, 22)
		24: Reg	constructor(constant_f64, [23], 1)
		25: InstOutput	constructor(output_reg, [24], 2)
		26: Option(())	extractor(nop, 0)
		27: ()	match_some(26)
		28: Reg	constructor(invalid_reg, [], 1)
		29: InstOutput	constructor(output_reg, [28], 2)
		30: Option(Type)	extractor(fits_in_64, 3)
		31: Type	match_some(30)
		32: Option((Value, Value))	extractor(iadd, 4)
		33: (Value, Value)	match_some(32)
		34: Value	match_tuple(33, 0)
		35: Value	match_tuple(33, 1)
		36: Reg	constructor(put_in_reg, [34], 1)
		37: Reg	constructor(put_in_reg, [35], 2)
		38: Reg	constructor(add, [31, 36, 37], 3)
		39: InstOutput	constructor(output_reg, [38], 4)
		40: Option(Imm12)	extractor(imm12_from_value, 35)
		41: Imm12	match_some(40)
		42: Reg	constructor(add_imm, [31, 36, 41], 2)
		43: InstOutput	constructor(output_reg, [42], 3)
		44: Option(Imm12)	extractor(imm12_from_value, 34)
		45: Imm12	match_some(44)
		46: Reg	constructor(put_in_reg, [35], 1)
		47: Reg	constructor(add_imm, [31, 46, 45], 2)
		48: InstOutput	constructor(output_reg, [47], 3)
		49: Option(Imm12)	constructor(imm12_from_negated_value, [35], 0)
		50: Imm12	match_some(49)
		51: Reg	constructor(sub_imm, [31, 36, 50], 2)
		52: InstOutput	constructor(output_reg, [51], 3)
		53: Option(Imm12)	constructor(imm12_from_negated_value, [34], 0)
		54: Imm12	match_some(53)
		55: Reg	constructor(sub_imm, [31, 46, 54], 2)
		56: InstOutput	constructor(output_reg, [55], 3)
		57: Option(ExtendedValue)	extractor(extended_value_from_value, 35)
		58: ExtendedValue	match_some(57)
		59: Reg	constructor(add_extend, [31, 36, 58], 2)
		60: InstOutput	constructor(output_reg, [59], 3)
		61: Option(ExtendedValue)	extractor(extended_value_from_value, 34)
		62: ExtendedValue	match_some(61)
		63: Reg	constructor(add_extend, [31, 46, 62], 2)
		64: InstOutput	constructor(output_reg, [63], 3)
		65: Option(Inst)	extractor(def_inst, 35)
		66: Inst	match_some(65)
		67: Option((Value, Value))	extractor(ishl, 66)
		68: (Value, Value)	match_some(67)
		69: Value	match_tuple(68, 0)
		70: Value	match_tuple(68, 1)
		71: Option(Inst)	extractor(def_inst, 70)
		72: Inst	match_some(71)
		73: Option(Imm64)	extractor(iconst, 72)
		74: Imm64	match_some(73)
		75: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [31, 74], 0)
		76: ShiftOpAndAmt	match_some(75)
		77: Reg	constructor(put_in_reg, [69], 2)
		78: Reg	constructor(add_shift, [31, 36, 77, 76], 3)
		79: InstOutput	constructor(output_reg, [78], 4)
		80: Option(Inst)	extractor(def_inst, 34)
		81: Inst	match_some(80)
		82: Option((Value, Value))	extractor(ishl, 81)
		83: (Value, Value)	match_some(82)
		84: Value	match_tuple(83, 0)
		85: Value	match_tuple(83, 1)
		86: Option(Inst)	extractor(def_inst, 85)
		87: Inst	match_some(86)
		88: Option(Imm64)	extractor(iconst, 87)
		89: Imm64	match_some(88)
		90: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [31, 89], 0)
		91: ShiftOpAndAmt	match_some(90)
		92: Reg	constructor(put_in_reg, [84], 2)
		93: Reg	constructor(add_shift, [31, 46, 92, 91], 3)
		94: InstOutput	constructor(output_reg, [93], 4)
		95: Option((Value, Value))	extractor(imul, 66)
		96: (Value, Value)	match_some(95)
		97: Value	match_tuple(96, 0)
		98: Value	match_tuple(96, 1)
		99: Reg	constructor(put_in_reg, [97], 1)
		100: Reg	constructor(put_in_reg, [98], 2)
		101: Reg	constructor(put_in_reg, [34], 3)
		102: Reg	constructor(madd, [31, 99, 100, 101], 4)
		103: InstOutput	constructor(output_reg, [102], 5)
		104: Option((Value, Value))	extractor(imul, 81)
		105: (Value, Value)	match_some(104)
		106: Value	match_tuple(105, 0)
		107: Value	match_tuple(105, 1)
		108: Reg	constructor(put_in_reg, [106], 1)
		109: Reg	constructor(put_in_reg, [107], 2)
		110: Reg	constructor(put_in_reg, [35], 3)
		111: Reg	constructor(madd, [31, 108, 109, 110], 4)
		112: InstOutput	constructor(output_reg, [111], 5)
		113: Option((Value, Value))	extractor(isub, 4)
		114: (Value, Value)	match_some(113)
		115: Value	match_tuple(114, 0)
		116: Value	match_tuple(114, 1)
		117: Option(Inst)	extractor(def_inst, 116)
		118: Inst	match_some(117)
		119: Option((Value, Value))	extractor(imul, 118)
		120: (Value, Value)	match_some(119)
		121: Value	match_tuple(120, 0)
		122: Value	match_tuple(120, 1)
		123: Reg	constructor(put_in_reg, [121], 1)
		124: Reg	constructor(put_in_reg, [122], 2)
		125: Reg	constructor(put_in_reg, [115], 3)
		126: Reg	constructor(msub, [31, 123, 124, 125], 4)
		127: InstOutput	constructor(output_reg, [126], 5)
		128: Option((u32, u32))	extractor(multi_lane, 3)
		129: (u32, u32)	match_some(128)
		130: u32	match_tuple(129, 0)
		131: u32	match_tuple(129, 1)
		132: VectorSize	constructor(vector_size, [3], 3)
		133: Reg	constructor(add_vec, [36, 37, 132], 4)
		134: InstOutput	constructor(output_reg, [133], 5)
		135: ValueRegs	constructor(put_in_regs, [34], 1)
		136: usize	const_int(0, usize)
		137: Reg	constructor(value_regs_get, [135, 136], 2)
		138: usize	const_int(1, usize)
		139: Reg	constructor(value_regs_get, [135, 138], 3)
		140: ValueRegs	constructor(put_in_regs, [35], 4)
		141: Reg	constructor(value_regs_get, [140, 136], 5)
		142: Reg	constructor(value_regs_get, [140, 138], 6)
		143: Type	const_prim(I64)
		144: ProducesFlags	constructor(add_with_flags_paired, [143, 137, 141], 7)
		145: ConsumesFlags	constructor(adc_paired, [143, 139, 142], 8)
		146: ValueRegs	constructor(with_flags, [144, 145], 9)
		147: InstOutput	constructor(output, [146], 10)
		148: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		149: (Value, Value, Immediate)	match_some(148)
		150: Value	match_tuple(149, 0)
		151: Value	match_tuple(149, 1)
		152: Immediate	match_tuple(149, 2)
		153: Option(u8)	extractor(shuffle_dup8_from_imm, 152)
		154: u8	match_some(153)
		155: Reg	constructor(put_in_reg, [150], 1)
		156: VectorSize	make_variant(VectorSize::Size8x16, [])
		157: Reg	constructor(vec_dup_from_fpu, [155, 156, 154], 2)
		158: InstOutput	constructor(output_reg, [157], 3)
		159: Option(u8)	extractor(shuffle_dup16_from_imm, 152)
		160: u8	match_some(159)
		161: VectorSize	make_variant(VectorSize::Size16x8, [])
		162: Reg	constructor(vec_dup_from_fpu, [155, 161, 160], 2)
		163: InstOutput	constructor(output_reg, [162], 3)
		164: Option(u8)	extractor(shuffle_dup32_from_imm, 152)
		165: u8	match_some(164)
		166: VectorSize	make_variant(VectorSize::Size32x4, [])
		167: Reg	constructor(vec_dup_from_fpu, [155, 166, 165], 2)
		168: InstOutput	constructor(output_reg, [167], 3)
		169: Option(u8)	extractor(shuffle_dup64_from_imm, 152)
		170: u8	match_some(169)
		171: VectorSize	make_variant(VectorSize::Size64x2, [])
		172: Reg	constructor(vec_dup_from_fpu, [155, 171, 170], 2)
		173: InstOutput	constructor(output_reg, [172], 3)
		174: Option(u8)	extractor(vec_extract_imm4_from_immediate, 152)
		175: u8	match_some(174)
		176: Reg	constructor(put_in_reg, [151], 2)
		177: Reg	constructor(vec_extract, [155, 176, 175], 3)
		178: InstOutput	constructor(output_reg, [177], 4)
		179: Option(u128)	extractor(u128_from_immediate, 152)
		180: u128	match_some(179)
		181: Reg	constructor(vec_uzp1, [155, 176, 156], 3)
		182: InstOutput	constructor(output_reg, [181], 4)
		183: Reg	constructor(vec_uzp2, [155, 176, 156], 3)
		184: InstOutput	constructor(output_reg, [183], 4)
		185: Reg	constructor(vec_uzp1, [155, 176, 161], 3)
		186: InstOutput	constructor(output_reg, [185], 4)
		187: Reg	constructor(vec_uzp2, [155, 176, 161], 3)
		188: InstOutput	constructor(output_reg, [187], 4)
		189: Reg	constructor(vec_uzp1, [155, 176, 166], 3)
		190: InstOutput	constructor(output_reg, [189], 4)
		191: Reg	constructor(vec_uzp2, [155, 176, 166], 3)
		192: InstOutput	constructor(output_reg, [191], 4)
		193: Reg	constructor(vec_uzp1, [155, 176, 171], 3)
		194: InstOutput	constructor(output_reg, [193], 4)
		195: Reg	constructor(vec_uzp2, [155, 176, 171], 3)
		196: InstOutput	constructor(output_reg, [195], 4)
		197: Reg	constructor(vec_zip1, [155, 176, 156], 3)
		198: InstOutput	constructor(output_reg, [197], 4)
		199: Reg	constructor(vec_zip2, [155, 176, 156], 3)
		200: InstOutput	constructor(output_reg, [199], 4)
		201: Reg	constructor(vec_zip1, [155, 176, 161], 3)
		202: InstOutput	constructor(output_reg, [201], 4)
		203: Reg	constructor(vec_zip2, [155, 176, 161], 3)
		204: InstOutput	constructor(output_reg, [203], 4)
		205: Reg	constructor(vec_zip1, [155, 176, 166], 3)
		206: InstOutput	constructor(output_reg, [205], 4)
		207: Reg	constructor(vec_zip2, [155, 176, 166], 3)
		208: InstOutput	constructor(output_reg, [207], 4)
		209: Reg	constructor(vec_trn1, [155, 176, 156], 3)
		210: InstOutput	constructor(output_reg, [209], 4)
		211: Reg	constructor(vec_trn2, [155, 176, 156], 3)
		212: InstOutput	constructor(output_reg, [211], 4)
		213: Reg	constructor(vec_trn1, [155, 176, 161], 3)
		214: InstOutput	constructor(output_reg, [213], 4)
		215: Reg	constructor(vec_trn2, [155, 176, 161], 3)
		216: InstOutput	constructor(output_reg, [215], 4)
		217: Reg	constructor(vec_trn1, [155, 176, 166], 3)
		218: InstOutput	constructor(output_reg, [217], 4)
		219: Reg	constructor(vec_trn2, [155, 176, 166], 3)
		220: InstOutput	constructor(output_reg, [219], 4)
		221: Reg	constructor(rev16, [155, 156], 2)
		222: InstOutput	constructor(output_reg, [221], 3)
		223: Reg	constructor(rev32, [155, 156], 2)
		224: InstOutput	constructor(output_reg, [223], 3)
		225: Reg	constructor(rev32, [155, 161], 2)
		226: InstOutput	constructor(output_reg, [225], 3)
		227: Reg	constructor(rev64, [155, 156], 2)
		228: InstOutput	constructor(output_reg, [227], 3)
		229: Reg	constructor(rev64, [155, 161], 2)
		230: InstOutput	constructor(output_reg, [229], 3)
		231: Reg	constructor(rev64, [155, 166], 2)
		232: InstOutput	constructor(output_reg, [231], 3)
		233: Option((Value, Value, Immediate))	extractor(shuffle, 4)
		234: (Value, Value, Immediate)	match_some(233)
		235: Value	match_tuple(234, 0)
		236: Value	match_tuple(234, 1)
		237: Immediate	match_tuple(234, 2)
		238: Option(u128)	extractor(u128_from_immediate, 237)
		239: u128	match_some(238)
		240: Reg	constructor(constant_f128, [239], 1)
		241: Reg	constructor(put_in_reg, [235], 2)
		242: Reg	constructor(put_in_reg, [236], 3)
		243: Reg	constructor(vec_tbl2, [241, 242, 240, 3], 4)
		244: InstOutput	constructor(output_reg, [243], 5)
		245: Option((Value, Value))	extractor(swizzle, 4)
		246: (Value, Value)	match_some(245)
		247: Value	match_tuple(246, 0)
		248: Value	match_tuple(246, 1)
		249: Reg	constructor(put_in_reg, [247], 1)
		250: Reg	constructor(put_in_reg, [248], 2)
		251: Reg	constructor(vec_tbl, [249, 250], 3)
		252: InstOutput	constructor(output_reg, [251], 4)
		253: Option(Value)	extractor(isplit, 0)
		254: Value	match_some(253)
		255: Type	extractor(value_type, 254)
		256: ValueRegs	constructor(put_in_regs, [254], 1)
		257: Reg	constructor(value_regs_get, [256, 136], 2)
		258: ValueRegs	constructor(value_reg, [257], 3)
		259: Reg	constructor(value_regs_get, [256, 138], 4)
		260: ValueRegs	constructor(value_reg, [259], 5)
		261: InstOutput	constructor(output_pair, [258, 260], 6)
		262: Option((Value, Value))	extractor(iconcat, 4)
		263: (Value, Value)	match_some(262)
		264: Value	match_tuple(263, 0)
		265: Value	match_tuple(263, 1)
		266: Reg	constructor(put_in_reg, [264], 1)
		267: Reg	constructor(put_in_reg, [265], 2)
		268: ValueRegs	constructor(value_regs, [266, 267], 3)
		269: InstOutput	constructor(output, [268], 4)
		270: Option(Value)	extractor(scalar_to_vector, 4)
		271: Value	match_some(270)
		272: Reg	constructor(put_in_reg, [271], 1)
		273: ScalarSize	make_variant(ScalarSize::Size32, [])
		274: Reg	constructor(fpu_extend, [272, 273], 2)
		275: InstOutput	constructor(output_reg, [274], 3)
		276: ScalarSize	make_variant(ScalarSize::Size64, [])
		277: Reg	constructor(fpu_extend, [272, 276], 2)
		278: InstOutput	constructor(output_reg, [277], 3)
		279: Option(Value)	extractor(scalar_to_vector, 0)
		280: Value	match_some(279)
		281: Type	extractor(value_type, 280)
		282: Reg	constructor(put_in_reg, [280], 1)
		283: Reg	constructor(mov_to_fpu, [282, 276], 2)
		284: InstOutput	constructor(output_reg, [283], 3)
		285: Option(Type)	extractor(int_fits_in_32, 281)
		286: Type	match_some(285)
		287: Reg	constructor(put_in_reg_zext32, [280], 1)
		288: Reg	constructor(mov_to_fpu, [287, 273], 2)
		289: InstOutput	constructor(output_reg, [288], 3)
		290: Option(Value)	extractor(vall_true, 0)
		291: Value	match_some(290)
		292: Type	extractor(value_type, 291)
		293: Option((u32, u32))	extractor(multi_lane, 292)
		294: (u32, u32)	match_some(293)
		295: u32	match_tuple(294, 0)
		296: u32	match_tuple(294, 1)
		297: Reg	constructor(put_in_reg, [291], 1)
		298: Reg	constructor(cmeq0, [297, 171], 2)
		299: Reg	constructor(addp, [298, 298, 171], 3)
		300: ProducesFlags	constructor(fpu_cmp, [276, 299, 299], 4)
		301: Cond	make_variant(Cond::Eq, [])
		302: ConsumesFlags	constructor(materialize_bool_result, [301], 5)
		303: ValueRegs	constructor(with_flags, [300, 302], 6)
		304: InstOutput	constructor(output, [303], 7)
		305: u8	const_int(0, u8)
		306: Reg	constructor(mov_from_vec, [297, 305, 276], 2)
		307: OperandSize	make_variant(OperandSize::Size64, [])
		308: Reg	constructor(zero_reg, [], 3)
		309: u64	const_int(32, u64)
		310: ProducesFlags	constructor(cmp_rr_shift, [307, 308, 306, 309], 4)
		311: OperandSize	make_variant(OperandSize::Size32, [])
		312: UImm5	constructor(u8_into_uimm5, [305], 5)
		313: bool	const_prim(false)
		314: bool	const_prim(true)
		315: NZCV	constructor(nzcv, [313, 314, 313, 313], 6)
		316: Cond	make_variant(Cond::Ne, [])
		317: ConsumesFlags	constructor(ccmp_imm, [311, 306, 312, 315, 316], 7)
		318: ValueRegs	constructor(with_flags, [310, 317], 8)
		319: InstOutput	constructor(output, [318], 9)
		320: Option(Type)	extractor(lane_fits_in_32, 292)
		321: Type	match_some(320)
		322: Option(Type)	constructor(not_vec32x2, [321], 0)
		323: Type	match_some(322)
		324: VecLanesOp	make_variant(VecLanesOp::Uminv, [])
		325: VectorSize	constructor(vector_size, [321], 2)
		326: Reg	constructor(vec_lanes, [324, 297, 325], 3)
		327: Reg	constructor(mov_from_vec, [326, 305, 276], 4)
		328: Imm12	constructor(u8_into_imm12, [305], 5)
		329: ProducesFlags	constructor(cmp_imm, [307, 327, 328], 6)
		330: ConsumesFlags	constructor(materialize_bool_result, [316], 7)
		331: ValueRegs	constructor(with_flags, [329, 330], 8)
		332: InstOutput	constructor(output, [331], 9)
		333: Option(Value)	extractor(vany_true, 0)
		334: Value	match_some(333)
		335: Type	extractor(value_type, 334)
		336: Reg	constructor(put_in_reg, [334], 1)
		337: ProducesFlags	constructor(vanytrue, [336, 335], 2)
		338: ConsumesFlags	constructor(materialize_bool_result, [316], 3)
		339: ValueRegs	constructor(with_flags, [337, 338], 4)
		340: InstOutput	constructor(output, [339], 5)
		341: Option((Value, Value))	extractor(iadd_pairwise, 4)
		342: (Value, Value)	match_some(341)
		343: Value	match_tuple(342, 0)
		344: Value	match_tuple(342, 1)
		345: Option(Inst)	extractor(def_inst, 343)
		346: Inst	match_some(345)
		347: Option(Value)	extractor(swiden_low, 346)
		348: Value	match_some(347)
		349: Option(Inst)	extractor(def_inst, 344)
		350: Inst	match_some(349)
		351: Option(Value)	extractor(swiden_high, 350)
		352: Value	match_some(351)
		353: Reg	constructor(put_in_reg, [348], 1)
		354: Reg	constructor(saddlp8, [353], 2)
		355: InstOutput	constructor(output_reg, [354], 3)
		356: Reg	constructor(saddlp16, [353], 2)
		357: InstOutput	constructor(output_reg, [356], 3)
		358: Option(Value)	extractor(uwiden_low, 346)
		359: Value	match_some(358)
		360: Option(Value)	extractor(uwiden_high, 350)
		361: Value	match_some(360)
		362: Reg	constructor(put_in_reg, [359], 1)
		363: Reg	constructor(uaddlp8, [362], 2)
		364: InstOutput	constructor(output_reg, [363], 3)
		365: Reg	constructor(uaddlp16, [362], 2)
		366: InstOutput	constructor(output_reg, [365], 3)
		367: Reg	constructor(put_in_reg, [343], 1)
		368: Reg	constructor(put_in_reg, [344], 2)
		369: Reg	constructor(addp, [367, 368, 132], 4)
		370: InstOutput	constructor(output_reg, [369], 5)
		371: Option(Value)	extractor(iabs, 4)
		372: Value	match_some(371)
		373: Reg	constructor(put_in_reg, [372], 1)
		374: VectorSize	constructor(vector_size, [3], 2)
		375: Reg	constructor(vec_abs, [373, 374], 3)
		376: InstOutput	constructor(output_reg, [375], 4)
		377: Reg	constructor(abs, [307, 373], 2)
		378: InstOutput	constructor(output_reg, [377], 3)
		379: Option(Type)	extractor(fits_in_32, 3)
		380: Type	match_some(379)
		381: Reg	constructor(put_in_reg_sext32, [372], 1)
		382: Reg	constructor(abs, [311, 381], 2)
		383: InstOutput	constructor(output_reg, [382], 3)
		384: ValueRegs	constructor(put_in_regs, [372], 1)
		385: Reg	constructor(value_regs_get, [384, 136], 2)
		386: Reg	constructor(value_regs_get, [384, 138], 3)
		387: u8	const_int(63, u8)
		388: ImmShift	constructor(imm_shift_from_u8, [387], 4)
		389: Reg	constructor(asr_imm, [143, 386, 388], 5)
		390: Reg	constructor(eor, [143, 386, 389], 6)
		391: Reg	constructor(eor, [143, 385, 389], 7)
		392: ProducesFlags	constructor(sub_with_flags_paired, [143, 391, 389], 8)
		393: ConsumesFlags	constructor(sbc_paired, [143, 390, 389], 9)
		394: ValueRegs	constructor(with_flags, [392, 393], 10)
		395: InstOutput	constructor(output, [394], 11)
		396: Option((Value, Value))	extractor(avg_round, 4)
		397: (Value, Value)	match_some(396)
		398: Value	match_tuple(397, 0)
		399: Value	match_tuple(397, 1)
		400: u64	const_int(1, u64)
		401: Reg	constructor(splat_const, [400, 171], 1)
		402: Reg	constructor(put_in_reg, [398], 2)
		403: Reg	constructor(put_in_reg, [399], 3)
		404: Reg	constructor(orr_vec, [402, 403, 171], 4)
		405: Reg	constructor(and_vec, [404, 401, 171], 5)
		406: Reg	constructor(put_in_reg, [398], 6)
		407: u8	const_int(1, u8)
		408: Reg	constructor(ushr_vec_imm, [406, 407, 171], 7)
		409: Reg	constructor(put_in_reg, [399], 8)
		410: Reg	constructor(ushr_vec_imm, [409, 407, 171], 9)
		411: Reg	constructor(add_vec, [408, 410, 171], 10)
		412: Reg	constructor(add_vec, [405, 411, 171], 11)
		413: InstOutput	constructor(output_reg, [412], 12)
		414: Option(Type)	extractor(lane_fits_in_32, 3)
		415: Type	match_some(414)
		416: VecALUOp	make_variant(VecALUOp::Urhadd, [])
		417: Reg	constructor(put_in_reg, [398], 1)
		418: Reg	constructor(put_in_reg, [399], 2)
		419: VectorSize	constructor(vector_size, [415], 3)
		420: Reg	constructor(vec_rrr, [416, 417, 418, 419], 4)
		421: InstOutput	constructor(output_reg, [420], 5)
		422: Option((Value, Value))	extractor(sqmul_round_sat, 4)
		423: (Value, Value)	match_some(422)
		424: Value	match_tuple(423, 0)
		425: Value	match_tuple(423, 1)
		426: VecALUOp	make_variant(VecALUOp::Sqrdmulh, [])
		427: Reg	constructor(put_in_reg, [424], 1)
		428: Reg	constructor(put_in_reg, [425], 2)
		429: Reg	constructor(vec_rrr, [426, 427, 428, 132], 4)
		430: InstOutput	constructor(output_reg, [429], 5)
		431: Option((Value, Value))	extractor(fadd, 4)
		432: (Value, Value)	match_some(431)
		433: Value	match_tuple(432, 0)
		434: Value	match_tuple(432, 1)
		435: VecALUOp	make_variant(VecALUOp::Fadd, [])
		436: Reg	constructor(put_in_reg, [433], 1)
		437: Reg	constructor(put_in_reg, [434], 2)
		438: Reg	constructor(vec_rrr, [435, 436, 437, 132], 4)
		439: InstOutput	constructor(output_reg, [438], 5)
		440: Option(Type)	extractor(ty_scalar_float, 3)
		441: Type	match_some(440)
		442: FPUOp2	make_variant(FPUOp2::Add, [])
		443: ScalarSize	constructor(scalar_size, [441], 3)
		444: Reg	constructor(fpu_rrr, [442, 436, 437, 443], 4)
		445: InstOutput	constructor(output_reg, [444], 5)
		446: Option((Value, Value))	extractor(fsub, 4)
		447: (Value, Value)	match_some(446)
		448: Value	match_tuple(447, 0)
		449: Value	match_tuple(447, 1)
		450: VecALUOp	make_variant(VecALUOp::Fsub, [])
		451: Reg	constructor(put_in_reg, [448], 1)
		452: Reg	constructor(put_in_reg, [449], 2)
		453: Reg	constructor(vec_rrr, [450, 451, 452, 132], 4)
		454: InstOutput	constructor(output_reg, [453], 5)
		455: FPUOp2	make_variant(FPUOp2::Sub, [])
		456: Reg	constructor(fpu_rrr, [455, 451, 452, 443], 4)
		457: InstOutput	constructor(output_reg, [456], 5)
		458: Option((Value, Value))	extractor(fmul, 4)
		459: (Value, Value)	match_some(458)
		460: Value	match_tuple(459, 0)
		461: Value	match_tuple(459, 1)
		462: VecALUOp	make_variant(VecALUOp::Fmul, [])
		463: Reg	constructor(put_in_reg, [460], 1)
		464: Reg	constructor(put_in_reg, [461], 2)
		465: Reg	constructor(vec_rrr, [462, 463, 464, 132], 4)
		466: InstOutput	constructor(output_reg, [465], 5)
		467: FPUOp2	make_variant(FPUOp2::Mul, [])
		468: Reg	constructor(fpu_rrr, [467, 463, 464, 443], 4)
		469: InstOutput	constructor(output_reg, [468], 5)
		470: Option((Value, Value))	extractor(fdiv, 4)
		471: (Value, Value)	match_some(470)
		472: Value	match_tuple(471, 0)
		473: Value	match_tuple(471, 1)
		474: VecALUOp	make_variant(VecALUOp::Fdiv, [])
		475: Reg	constructor(put_in_reg, [472], 1)
		476: Reg	constructor(put_in_reg, [473], 2)
		477: Reg	constructor(vec_rrr, [474, 475, 476, 132], 4)
		478: InstOutput	constructor(output_reg, [477], 5)
		479: FPUOp2	make_variant(FPUOp2::Div, [])
		480: Reg	constructor(fpu_rrr, [479, 475, 476, 443], 4)
		481: InstOutput	constructor(output_reg, [480], 5)
		482: Option((Value, Value))	extractor(fmin, 4)
		483: (Value, Value)	match_some(482)
		484: Value	match_tuple(483, 0)
		485: Value	match_tuple(483, 1)
		486: VecALUOp	make_variant(VecALUOp::Fmin, [])
		487: Reg	constructor(put_in_reg, [484], 1)
		488: Reg	constructor(put_in_reg, [485], 2)
		489: Reg	constructor(vec_rrr, [486, 487, 488, 132], 4)
		490: InstOutput	constructor(output_reg, [489], 5)
		491: FPUOp2	make_variant(FPUOp2::Min, [])
		492: Reg	constructor(fpu_rrr, [491, 487, 488, 443], 4)
		493: InstOutput	constructor(output_reg, [492], 5)
		494: Option((Value, Value))	extractor(fmax, 4)
		495: (Value, Value)	match_some(494)
		496: Value	match_tuple(495, 0)
		497: Value	match_tuple(495, 1)
		498: VecALUOp	make_variant(VecALUOp::Fmax, [])
		499: Reg	constructor(put_in_reg, [496], 1)
		500: Reg	constructor(put_in_reg, [497], 2)
		501: Reg	constructor(vec_rrr, [498, 499, 500, 132], 4)
		502: InstOutput	constructor(output_reg, [501], 5)
		503: FPUOp2	make_variant(FPUOp2::Max, [])
		504: Reg	constructor(fpu_rrr, [503, 499, 500, 443], 4)
		505: InstOutput	constructor(output_reg, [504], 5)
		506: Option(Value)	extractor(sqrt, 4)
		507: Value	match_some(506)
		508: VecMisc2	make_variant(VecMisc2::Fsqrt, [])
		509: Reg	constructor(put_in_reg, [507], 1)
		510: Reg	constructor(vec_misc, [508, 509, 374], 3)
		511: InstOutput	constructor(output_reg, [510], 4)
		512: FPUOp1	make_variant(FPUOp1::Sqrt, [])
		513: ScalarSize	constructor(scalar_size, [441], 2)
		514: Reg	constructor(fpu_rr, [512, 509, 513], 3)
		515: InstOutput	constructor(output_reg, [514], 4)
		516: Option(Value)	extractor(fneg, 4)
		517: Value	match_some(516)
		518: VecMisc2	make_variant(VecMisc2::Fneg, [])
		519: Reg	constructor(put_in_reg, [517], 1)
		520: Reg	constructor(vec_misc, [518, 519, 374], 3)
		521: InstOutput	constructor(output_reg, [520], 4)
		522: FPUOp1	make_variant(FPUOp1::Neg, [])
		523: Reg	constructor(fpu_rr, [522, 519, 513], 3)
		524: InstOutput	constructor(output_reg, [523], 4)
		525: Option(Value)	extractor(fabs, 4)
		526: Value	match_some(525)
		527: VecMisc2	make_variant(VecMisc2::Fabs, [])
		528: Reg	constructor(put_in_reg, [526], 1)
		529: Reg	constructor(vec_misc, [527, 528, 374], 3)
		530: InstOutput	constructor(output_reg, [529], 4)
		531: FPUOp1	make_variant(FPUOp1::Abs, [])
		532: Reg	constructor(fpu_rr, [531, 528, 513], 3)
		533: InstOutput	constructor(output_reg, [532], 4)
		534: Option(Value)	extractor(fpromote, 4)
		535: Value	match_some(534)
		536: FPUOp1	make_variant(FPUOp1::Cvt32To64, [])
		537: Reg	constructor(put_in_reg, [535], 1)
		538: Reg	constructor(fpu_rr, [536, 537, 273], 2)
		539: InstOutput	constructor(output_reg, [538], 3)
		540: Option(Value)	extractor(fdemote, 4)
		541: Value	match_some(540)
		542: FPUOp1	make_variant(FPUOp1::Cvt64To32, [])
		543: Reg	constructor(put_in_reg, [541], 1)
		544: Reg	constructor(fpu_rr, [542, 543, 276], 2)
		545: InstOutput	constructor(output_reg, [544], 3)
		546: Option(Value)	extractor(ceil, 4)
		547: Value	match_some(546)
		548: VecMisc2	make_variant(VecMisc2::Frintp, [])
		549: Reg	constructor(put_in_reg, [547], 1)
		550: Reg	constructor(vec_misc, [548, 549, 374], 3)
		551: InstOutput	constructor(output_reg, [550], 4)
		552: FpuRoundMode	make_variant(FpuRoundMode::Plus32, [])
		553: Reg	constructor(fpu_round, [552, 549], 2)
		554: InstOutput	constructor(output_reg, [553], 3)
		555: FpuRoundMode	make_variant(FpuRoundMode::Plus64, [])
		556: Reg	constructor(fpu_round, [555, 549], 2)
		557: InstOutput	constructor(output_reg, [556], 3)
		558: Option(Value)	extractor(floor, 4)
		559: Value	match_some(558)
		560: VecMisc2	make_variant(VecMisc2::Frintm, [])
		561: Reg	constructor(put_in_reg, [559], 1)
		562: Reg	constructor(vec_misc, [560, 561, 374], 3)
		563: InstOutput	constructor(output_reg, [562], 4)
		564: FpuRoundMode	make_variant(FpuRoundMode::Minus32, [])
		565: Reg	constructor(fpu_round, [564, 561], 2)
		566: InstOutput	constructor(output_reg, [565], 3)
		567: FpuRoundMode	make_variant(FpuRoundMode::Minus64, [])
		568: Reg	constructor(fpu_round, [567, 561], 2)
		569: InstOutput	constructor(output_reg, [568], 3)
		570: Option(Value)	extractor(trunc, 4)
		571: Value	match_some(570)
		572: VecMisc2	make_variant(VecMisc2::Frintz, [])
		573: Reg	constructor(put_in_reg, [571], 1)
		574: Reg	constructor(vec_misc, [572, 573, 374], 3)
		575: InstOutput	constructor(output_reg, [574], 4)
		576: FpuRoundMode	make_variant(FpuRoundMode::Zero32, [])
		577: Reg	constructor(fpu_round, [576, 573], 2)
		578: InstOutput	constructor(output_reg, [577], 3)
		579: FpuRoundMode	make_variant(FpuRoundMode::Zero64, [])
		580: Reg	constructor(fpu_round, [579, 573], 2)
		581: InstOutput	constructor(output_reg, [580], 3)
		582: Option(Value)	extractor(nearest, 4)
		583: Value	match_some(582)
		584: VecMisc2	make_variant(VecMisc2::Frintn, [])
		585: Reg	constructor(put_in_reg, [583], 1)
		586: Reg	constructor(vec_misc, [584, 585, 374], 3)
		587: InstOutput	constructor(output_reg, [586], 4)
		588: FpuRoundMode	make_variant(FpuRoundMode::Nearest32, [])
		589: Reg	constructor(fpu_round, [588, 585], 2)
		590: InstOutput	constructor(output_reg, [589], 3)
		591: FpuRoundMode	make_variant(FpuRoundMode::Nearest64, [])
		592: Reg	constructor(fpu_round, [591, 585], 2)
		593: InstOutput	constructor(output_reg, [592], 3)
		594: Option((Value, Value, Value))	extractor(fma, 4)
		595: (Value, Value, Value)	match_some(594)
		596: Value	match_tuple(595, 0)
		597: Value	match_tuple(595, 1)
		598: Value	match_tuple(595, 2)
		599: FPUOp3	make_variant(FPUOp3::MAdd, [])
		600: ScalarSize	constructor(scalar_size, [441], 1)
		601: Reg	constructor(put_in_reg, [596], 2)
		602: Reg	constructor(put_in_reg, [597], 3)
		603: Reg	constructor(put_in_reg, [598], 4)
		604: Reg	constructor(fpu_rrrr, [599, 600, 601, 602, 603], 5)
		605: InstOutput	constructor(output_reg, [604], 6)
		606: VecALUModOp	make_variant(VecALUModOp::Fmla, [])
		607: VectorSize	constructor(vector_size, [3], 1)
		608: Reg	constructor(lower_fmla, [606, 596, 597, 598, 607], 2)
		609: InstOutput	constructor(output_reg, [608], 3)
		610: Option((Value, Value))	extractor(fcopysign, 4)
		611: (Value, Value)	match_some(610)
		612: Value	match_tuple(611, 0)
		613: Value	match_tuple(611, 1)
		614: Reg	constructor(put_in_reg, [612], 1)
		615: Reg	constructor(put_in_reg, [613], 2)
		616: Reg	constructor(fcopy_sign, [614, 615, 3], 3)
		617: InstOutput	constructor(output_reg, [616], 4)
		618: Option(Value)	extractor(fcvt_to_uint, 4)
		619: Value	match_some(618)
		620: Type	extractor(value_type, 619)
		621: FpuToIntOp	make_variant(FpuToIntOp::F32ToU32, [])
		622: Reg	constructor(put_in_reg, [619], 1)
		623: Type	const_prim(F32)
		624: Reg	constructor(fpu_to_int_cvt, [621, 622, 313, 623, 380], 2)
		625: InstOutput	constructor(output_reg, [624], 3)
		626: FpuToIntOp	make_variant(FpuToIntOp::F32ToU64, [])
		627: Reg	constructor(fpu_to_int_cvt, [626, 622, 313, 623, 143], 2)
		628: InstOutput	constructor(output_reg, [627], 3)
		629: FpuToIntOp	make_variant(FpuToIntOp::F64ToU32, [])
		630: Type	const_prim(F64)
		631: Reg	constructor(fpu_to_int_cvt, [629, 622, 313, 630, 380], 2)
		632: InstOutput	constructor(output_reg, [631], 3)
		633: FpuToIntOp	make_variant(FpuToIntOp::F64ToU64, [])
		634: Reg	constructor(fpu_to_int_cvt, [633, 622, 313, 630, 143], 2)
		635: InstOutput	constructor(output_reg, [634], 3)
		636: Option(Value)	extractor(fcvt_to_sint, 4)
		637: Value	match_some(636)
		638: Type	extractor(value_type, 637)
		639: FpuToIntOp	make_variant(FpuToIntOp::F32ToI32, [])
		640: Reg	constructor(put_in_reg, [637], 1)
		641: Reg	constructor(fpu_to_int_cvt, [639, 640, 314, 623, 380], 2)
		642: InstOutput	constructor(output_reg, [641], 3)
		643: FpuToIntOp	make_variant(FpuToIntOp::F32ToI64, [])
		644: Reg	constructor(fpu_to_int_cvt, [643, 640, 314, 623, 143], 2)
		645: InstOutput	constructor(output_reg, [644], 3)
		646: FpuToIntOp	make_variant(FpuToIntOp::F64ToI32, [])
		647: Reg	constructor(fpu_to_int_cvt, [646, 640, 314, 630, 380], 2)
		648: InstOutput	constructor(output_reg, [647], 3)
		649: FpuToIntOp	make_variant(FpuToIntOp::F64ToI64, [])
		650: Reg	constructor(fpu_to_int_cvt, [649, 640, 314, 630, 143], 2)
		651: InstOutput	constructor(output_reg, [650], 3)
		652: Option(Value)	extractor(fcvt_from_uint, 4)
		653: Value	match_some(652)
		654: Type	extractor(value_type, 653)
		655: Option((u32, u32))	extractor(multi_lane, 654)
		656: (u32, u32)	match_some(655)
		657: u32	match_tuple(656, 0)
		658: u32	match_tuple(656, 1)
		659: VecMisc2	make_variant(VecMisc2::Ucvtf, [])
		660: Reg	constructor(put_in_reg, [653], 1)
		661: Reg	constructor(vec_misc, [659, 660, 374], 3)
		662: InstOutput	constructor(output_reg, [661], 4)
		663: Option(Type)	extractor(fits_in_32, 654)
		664: Type	match_some(663)
		665: IntToFpuOp	make_variant(IntToFpuOp::U32ToF32, [])
		666: Reg	constructor(put_in_reg_zext32, [653], 1)
		667: Reg	constructor(int_to_fpu, [665, 666], 2)
		668: InstOutput	constructor(output_reg, [667], 3)
		669: IntToFpuOp	make_variant(IntToFpuOp::U32ToF64, [])
		670: Reg	constructor(int_to_fpu, [669, 666], 2)
		671: InstOutput	constructor(output_reg, [670], 3)
		672: IntToFpuOp	make_variant(IntToFpuOp::U64ToF32, [])
		673: Reg	constructor(int_to_fpu, [672, 660], 2)
		674: InstOutput	constructor(output_reg, [673], 3)
		675: IntToFpuOp	make_variant(IntToFpuOp::U64ToF64, [])
		676: Reg	constructor(int_to_fpu, [675, 660], 2)
		677: InstOutput	constructor(output_reg, [676], 3)
		678: Option(Value)	extractor(fcvt_from_sint, 4)
		679: Value	match_some(678)
		680: Type	extractor(value_type, 679)
		681: Option((u32, u32))	extractor(multi_lane, 680)
		682: (u32, u32)	match_some(681)
		683: u32	match_tuple(682, 0)
		684: u32	match_tuple(682, 1)
		685: VecMisc2	make_variant(VecMisc2::Scvtf, [])
		686: Reg	constructor(put_in_reg, [679], 1)
		687: Reg	constructor(vec_misc, [685, 686, 374], 3)
		688: InstOutput	constructor(output_reg, [687], 4)
		689: Option(Type)	extractor(fits_in_32, 680)
		690: Type	match_some(689)
		691: IntToFpuOp	make_variant(IntToFpuOp::I32ToF32, [])
		692: Reg	constructor(put_in_reg_sext32, [679], 1)
		693: Reg	constructor(int_to_fpu, [691, 692], 2)
		694: InstOutput	constructor(output_reg, [693], 3)
		695: IntToFpuOp	make_variant(IntToFpuOp::I32ToF64, [])
		696: Reg	constructor(int_to_fpu, [695, 692], 2)
		697: InstOutput	constructor(output_reg, [696], 3)
		698: IntToFpuOp	make_variant(IntToFpuOp::I64ToF32, [])
		699: Reg	constructor(int_to_fpu, [698, 686], 2)
		700: InstOutput	constructor(output_reg, [699], 3)
		701: IntToFpuOp	make_variant(IntToFpuOp::I64ToF64, [])
		702: Reg	constructor(int_to_fpu, [701, 686], 2)
		703: InstOutput	constructor(output_reg, [702], 3)
		704: Option(Value)	extractor(fcvt_to_uint_sat, 4)
		705: Value	match_some(704)
		706: Type	extractor(value_type, 705)
		707: Option((u32, u32))	extractor(multi_lane, 706)
		708: (u32, u32)	match_some(707)
		709: u32	match_tuple(708, 0)
		710: u32	match_tuple(708, 1)
		711: VecMisc2	make_variant(VecMisc2::Fcvtzu, [])
		712: Reg	constructor(put_in_reg, [705], 1)
		713: Reg	constructor(vec_misc, [711, 712, 374], 3)
		714: InstOutput	constructor(output_reg, [713], 4)
		715: Reg	constructor(fpu_to_int_cvt_sat, [621, 712, 313, 380], 2)
		716: InstOutput	constructor(output_reg, [715], 3)
		717: Reg	constructor(fpu_to_int_cvt_sat, [626, 712, 313, 143], 2)
		718: InstOutput	constructor(output_reg, [717], 3)
		719: Reg	constructor(fpu_to_int_cvt_sat, [629, 712, 313, 380], 2)
		720: InstOutput	constructor(output_reg, [719], 3)
		721: Reg	constructor(fpu_to_int_cvt_sat, [633, 712, 313, 143], 2)
		722: InstOutput	constructor(output_reg, [721], 3)
		723: Option(Value)	extractor(fcvt_to_sint_sat, 4)
		724: Value	match_some(723)
		725: Type	extractor(value_type, 724)
		726: Option((u32, u32))	extractor(multi_lane, 725)
		727: (u32, u32)	match_some(726)
		728: u32	match_tuple(727, 0)
		729: u32	match_tuple(727, 1)
		730: VecMisc2	make_variant(VecMisc2::Fcvtzs, [])
		731: Reg	constructor(put_in_reg, [724], 1)
		732: Reg	constructor(vec_misc, [730, 731, 374], 3)
		733: InstOutput	constructor(output_reg, [732], 4)
		734: Reg	constructor(fpu_to_int_cvt_sat, [639, 731, 314, 380], 2)
		735: InstOutput	constructor(output_reg, [734], 3)
		736: Reg	constructor(fpu_to_int_cvt_sat, [643, 731, 314, 143], 2)
		737: InstOutput	constructor(output_reg, [736], 3)
		738: Reg	constructor(fpu_to_int_cvt_sat, [646, 731, 314, 380], 2)
		739: InstOutput	constructor(output_reg, [738], 3)
		740: Reg	constructor(fpu_to_int_cvt_sat, [649, 731, 314, 143], 2)
		741: InstOutput	constructor(output_reg, [740], 3)
		742: Reg	constructor(put_in_reg, [115], 1)
		743: Reg	constructor(put_in_reg, [116], 2)
		744: Reg	constructor(sub, [31, 742, 743], 3)
		745: InstOutput	constructor(output_reg, [744], 4)
		746: Option(Imm12)	extractor(imm12_from_value, 116)
		747: Imm12	match_some(746)
		748: Reg	constructor(sub_imm, [31, 742, 747], 2)
		749: InstOutput	constructor(output_reg, [748], 3)
		750: Option(Imm12)	constructor(imm12_from_negated_value, [116], 0)
		751: Imm12	match_some(750)
		752: Reg	constructor(add_imm, [31, 742, 751], 2)
		753: InstOutput	constructor(output_reg, [752], 3)
		754: Option(ExtendedValue)	extractor(extended_value_from_value, 116)
		755: ExtendedValue	match_some(754)
		756: Reg	constructor(sub_extend, [31, 742, 755], 2)
		757: InstOutput	constructor(output_reg, [756], 3)
		758: Option((Value, Value))	extractor(ishl, 118)
		759: (Value, Value)	match_some(758)
		760: Value	match_tuple(759, 0)
		761: Value	match_tuple(759, 1)
		762: Option(Inst)	extractor(def_inst, 761)
		763: Inst	match_some(762)
		764: Option(Imm64)	extractor(iconst, 763)
		765: Imm64	match_some(764)
		766: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [31, 765], 0)
		767: ShiftOpAndAmt	match_some(766)
		768: Reg	constructor(put_in_reg, [760], 2)
		769: Reg	constructor(sub_shift, [31, 742, 768, 767], 3)
		770: InstOutput	constructor(output_reg, [769], 4)
		771: Reg	constructor(sub_vec, [742, 743, 132], 4)
		772: InstOutput	constructor(output_reg, [771], 5)
		773: ValueRegs	constructor(put_in_regs, [115], 1)
		774: ValueRegs	constructor(put_in_regs, [116], 2)
		775: ValueRegs	constructor(sub_i128, [773, 774], 3)
		776: InstOutput	constructor(output, [775], 4)
		777: Option(Type)	extractor(ty_vec128, 3)
		778: Type	match_some(777)
		779: Option((Value, Value))	extractor(uadd_sat, 4)
		780: (Value, Value)	match_some(779)
		781: Value	match_tuple(780, 0)
		782: Value	match_tuple(780, 1)
		783: Reg	constructor(put_in_reg, [781], 1)
		784: Reg	constructor(put_in_reg, [782], 2)
		785: VectorSize	constructor(vector_size, [778], 3)
		786: Reg	constructor(uqadd, [783, 784, 785], 4)
		787: InstOutput	constructor(output_reg, [786], 5)
		788: Option((Value, Value))	extractor(sadd_sat, 4)
		789: (Value, Value)	match_some(788)
		790: Value	match_tuple(789, 0)
		791: Value	match_tuple(789, 1)
		792: Reg	constructor(put_in_reg, [790], 1)
		793: Reg	constructor(put_in_reg, [791], 2)
		794: Reg	constructor(sqadd, [792, 793, 785], 4)
		795: InstOutput	constructor(output_reg, [794], 5)
		796: Option((Value, Value))	extractor(usub_sat, 4)
		797: (Value, Value)	match_some(796)
		798: Value	match_tuple(797, 0)
		799: Value	match_tuple(797, 1)
		800: Reg	constructor(put_in_reg, [798], 1)
		801: Reg	constructor(put_in_reg, [799], 2)
		802: Reg	constructor(uqsub, [800, 801, 785], 4)
		803: InstOutput	constructor(output_reg, [802], 5)
		804: Option((Value, Value))	extractor(ssub_sat, 4)
		805: (Value, Value)	match_some(804)
		806: Value	match_tuple(805, 0)
		807: Value	match_tuple(805, 1)
		808: Reg	constructor(put_in_reg, [806], 1)
		809: Reg	constructor(put_in_reg, [807], 2)
		810: Reg	constructor(sqsub, [808, 809, 785], 4)
		811: InstOutput	constructor(output_reg, [810], 5)
		812: Option(Value)	extractor(ineg, 4)
		813: Value	match_some(812)
		814: Reg	constructor(zero_reg, [], 1)
		815: Reg	constructor(put_in_reg, [813], 2)
		816: Reg	constructor(sub, [31, 814, 815], 3)
		817: InstOutput	constructor(output_reg, [816], 4)
		818: ValueRegs	constructor(value_regs_zero, [], 1)
		819: ValueRegs	constructor(put_in_regs, [813], 2)
		820: ValueRegs	constructor(sub_i128, [818, 819], 3)
		821: InstOutput	constructor(output, [820], 4)
		822: Reg	constructor(put_in_reg, [813], 1)
		823: VectorSize	constructor(vector_size, [778], 2)
		824: Reg	constructor(neg, [822, 823], 3)
		825: InstOutput	constructor(output_reg, [824], 4)
		826: Option((Value, Value))	extractor(imul, 4)
		827: (Value, Value)	match_some(826)
		828: Value	match_tuple(827, 0)
		829: Value	match_tuple(827, 1)
		830: Reg	constructor(put_in_reg, [828], 1)
		831: Reg	constructor(put_in_reg, [829], 2)
		832: Reg	constructor(madd, [31, 830, 831, 308], 4)
		833: InstOutput	constructor(output_reg, [832], 5)
		834: ValueRegs	constructor(put_in_regs, [828], 1)
		835: Reg	constructor(value_regs_get, [834, 136], 2)
		836: Reg	constructor(value_regs_get, [834, 138], 3)
		837: ValueRegs	constructor(put_in_regs, [829], 4)
		838: Reg	constructor(value_regs_get, [837, 136], 5)
		839: Reg	constructor(value_regs_get, [837, 138], 6)
		840: Reg	constructor(umulh, [143, 835, 838], 7)
		841: Reg	constructor(madd, [143, 835, 839, 840], 8)
		842: Reg	constructor(madd, [143, 836, 838, 841], 9)
		843: Reg	constructor(zero_reg, [], 10)
		844: Reg	constructor(madd, [143, 835, 838, 843], 11)
		845: ValueRegs	constructor(value_regs, [844, 842], 12)
		846: InstOutput	constructor(output, [845], 13)
		847: Option(())	extractor(not_i64x2, 778)
		848: ()	match_some(847)
		849: Reg	constructor(mul, [830, 831, 785], 4)
		850: InstOutput	constructor(output_reg, [849], 5)
		851: Reg	constructor(rev64, [831, 166], 3)
		852: Reg	constructor(mul, [851, 830, 166], 4)
		853: Reg	constructor(xtn, [830, 273], 5)
		854: Reg	constructor(addp, [852, 852, 166], 6)
		855: Reg	constructor(xtn, [831, 273], 7)
		856: Reg	constructor(shll32, [854, 313], 8)
		857: Reg	constructor(umlal32, [856, 855, 853, 313], 9)
		858: InstOutput	constructor(output_reg, [857], 10)
		859: Option(Inst)	extractor(def_inst, 828)
		860: Inst	match_some(859)
		861: Option(Value)	extractor(swiden_low, 860)
		862: Value	match_some(861)
		863: Type	extractor(value_type, 862)
		864: Option(Inst)	extractor(def_inst, 829)
		865: Inst	match_some(864)
		866: Option(Value)	extractor(swiden_low, 865)
		867: Value	match_some(866)
		868: Type	extractor(value_type, 867)
		869: Reg	constructor(put_in_reg, [862], 1)
		870: Reg	constructor(put_in_reg, [867], 2)
		871: Reg	constructor(smull8, [869, 870, 313], 3)
		872: InstOutput	constructor(output_reg, [871], 4)
		873: Option(Value)	extractor(swiden_high, 860)
		874: Value	match_some(873)
		875: Type	extractor(value_type, 874)
		876: Option(Value)	extractor(swiden_high, 865)
		877: Value	match_some(876)
		878: Type	extractor(value_type, 877)
		879: Reg	constructor(put_in_reg, [874], 1)
		880: Reg	constructor(put_in_reg, [877], 2)
		881: Reg	constructor(smull8, [879, 880, 314], 3)
		882: InstOutput	constructor(output_reg, [881], 4)
		883: Option(Value)	extractor(uwiden_low, 860)
		884: Value	match_some(883)
		885: Type	extractor(value_type, 884)
		886: Option(Value)	extractor(uwiden_low, 865)
		887: Value	match_some(886)
		888: Type	extractor(value_type, 887)
		889: Reg	constructor(put_in_reg, [884], 1)
		890: Reg	constructor(put_in_reg, [887], 2)
		891: Reg	constructor(umull8, [889, 890, 313], 3)
		892: InstOutput	constructor(output_reg, [891], 4)
		893: Option(Value)	extractor(uwiden_high, 860)
		894: Value	match_some(893)
		895: Type	extractor(value_type, 894)
		896: Option(Value)	extractor(uwiden_high, 865)
		897: Value	match_some(896)
		898: Type	extractor(value_type, 897)
		899: Reg	constructor(put_in_reg, [894], 1)
		900: Reg	constructor(put_in_reg, [897], 2)
		901: Reg	constructor(umull8, [899, 900, 314], 3)
		902: InstOutput	constructor(output_reg, [901], 4)
		903: Reg	constructor(smull16, [869, 870, 313], 3)
		904: InstOutput	constructor(output_reg, [903], 4)
		905: Reg	constructor(smull16, [879, 880, 314], 3)
		906: InstOutput	constructor(output_reg, [905], 4)
		907: Reg	constructor(umull16, [889, 890, 313], 3)
		908: InstOutput	constructor(output_reg, [907], 4)
		909: Reg	constructor(umull16, [899, 900, 314], 3)
		910: InstOutput	constructor(output_reg, [909], 4)
		911: Reg	constructor(smull32, [869, 870, 313], 3)
		912: InstOutput	constructor(output_reg, [911], 4)
		913: Reg	constructor(smull32, [879, 880, 314], 3)
		914: InstOutput	constructor(output_reg, [913], 4)
		915: Reg	constructor(umull32, [889, 890, 313], 3)
		916: InstOutput	constructor(output_reg, [915], 4)
		917: Reg	constructor(umull32, [899, 900, 314], 3)
		918: InstOutput	constructor(output_reg, [917], 4)
		919: Option((Value, Value))	extractor(smulhi, 4)
		920: (Value, Value)	match_some(919)
		921: Value	match_tuple(920, 0)
		922: Value	match_tuple(920, 1)
		923: Reg	constructor(put_in_reg, [921], 1)
		924: Reg	constructor(put_in_reg, [922], 2)
		925: Reg	constructor(smulh, [143, 923, 924], 3)
		926: InstOutput	constructor(output_reg, [925], 4)
		927: Reg	constructor(put_in_reg_sext64, [921], 1)
		928: Reg	constructor(put_in_reg_sext64, [922], 2)
		929: Reg	constructor(madd, [143, 927, 928, 308], 4)
		930: u8	constructor(ty_bits, [380], 0)
		931: ImmShift	constructor(imm_shift_from_u8, [930], 5)
		932: Reg	constructor(asr_imm, [143, 929, 931], 6)
		933: InstOutput	constructor(output_reg, [932], 7)
		934: Option((Value, Value))	extractor(umulhi, 4)
		935: (Value, Value)	match_some(934)
		936: Value	match_tuple(935, 0)
		937: Value	match_tuple(935, 1)
		938: Reg	constructor(put_in_reg, [936], 1)
		939: Reg	constructor(put_in_reg, [937], 2)
		940: Reg	constructor(umulh, [143, 938, 939], 3)
		941: InstOutput	constructor(output_reg, [940], 4)
		942: Reg	constructor(put_in_reg_zext64, [936], 1)
		943: Reg	constructor(put_in_reg_zext64, [937], 2)
		944: Reg	constructor(madd, [143, 942, 943, 308], 4)
		945: Reg	constructor(lsr_imm, [143, 944, 931], 6)
		946: ValueRegs	constructor(value_reg, [945], 7)
		947: InstOutput	constructor(output, [946], 8)
		948: Option((Value, Value))	extractor(udiv, 4)
		949: (Value, Value)	match_some(948)
		950: Value	match_tuple(949, 0)
		951: Value	match_tuple(949, 1)
		952: Reg	constructor(put_in_reg_zext64, [950], 1)
		953: Reg	constructor(put_nonzero_in_reg_zext64, [951], 2)
		954: Reg	constructor(a64_udiv, [143, 952, 953], 3)
		955: InstOutput	constructor(output_reg, [954], 4)
		956: Option((Value, Value))	extractor(sdiv, 4)
		957: (Value, Value)	match_some(956)
		958: Value	match_tuple(957, 0)
		959: Value	match_tuple(957, 1)
		960: Reg	constructor(put_in_reg_sext64, [958], 1)
		961: Reg	constructor(put_nonzero_in_reg_sext64, [959], 2)
		962: Reg	constructor(trap_if_div_overflow, [31, 960, 961], 3)
		963: Reg	constructor(a64_sdiv, [143, 962, 961], 4)
		964: InstOutput	constructor(output_reg, [963], 5)
		965: Option(Inst)	extractor(def_inst, 959)
		966: Inst	match_some(965)
		967: Option(Imm64)	extractor(iconst, 966)
		968: Imm64	match_some(967)
		969: Option(u64)	constructor(safe_divisor_from_imm64, [31, 968], 0)
		970: u64	match_some(969)
		971: ImmExtend	make_variant(ImmExtend::Sign, [])
		972: Reg	constructor(imm, [31, 971, 970], 2)
		973: Reg	constructor(a64_sdiv, [143, 960, 972], 3)
		974: InstOutput	constructor(output_reg, [973], 4)
		975: Option((Value, Value))	extractor(urem, 4)
		976: (Value, Value)	match_some(975)
		977: Value	match_tuple(976, 0)
		978: Value	match_tuple(976, 1)
		979: Reg	constructor(put_in_reg_zext64, [977], 1)
		980: Reg	constructor(put_nonzero_in_reg_zext64, [978], 2)
		981: Reg	constructor(a64_udiv, [143, 979, 980], 3)
		982: Reg	constructor(msub, [143, 981, 980, 979], 4)
		983: InstOutput	constructor(output_reg, [982], 5)
		984: Option((Value, Value))	extractor(srem, 4)
		985: (Value, Value)	match_some(984)
		986: Value	match_tuple(985, 0)
		987: Value	match_tuple(985, 1)
		988: Reg	constructor(put_in_reg_sext64, [986], 1)
		989: Reg	constructor(put_nonzero_in_reg_sext64, [987], 2)
		990: Reg	constructor(a64_sdiv, [143, 988, 989], 3)
		991: Reg	constructor(msub, [143, 990, 989, 988], 4)
		992: InstOutput	constructor(output_reg, [991], 5)
		993: Option(Type)	extractor(ty_int, 3)
		994: Type	match_some(993)
		995: Option((Value, Value))	extractor(umin, 4)
		996: (Value, Value)	match_some(995)
		997: Value	match_tuple(996, 0)
		998: Value	match_tuple(996, 1)
		999: Cond	make_variant(Cond::Lo, [])
		1000: ValueRegs	constructor(cmp_and_choose, [31, 999, 313, 997, 998], 1)
		1001: InstOutput	constructor(output, [1000], 2)
		1002: Option((Value, Value))	extractor(smin, 4)
		1003: (Value, Value)	match_some(1002)
		1004: Value	match_tuple(1003, 0)
		1005: Value	match_tuple(1003, 1)
		1006: Cond	make_variant(Cond::Lt, [])
		1007: ValueRegs	constructor(cmp_and_choose, [31, 1006, 314, 1004, 1005], 1)
		1008: InstOutput	constructor(output, [1007], 2)
		1009: Option((Value, Value))	extractor(umax, 4)
		1010: (Value, Value)	match_some(1009)
		1011: Value	match_tuple(1010, 0)
		1012: Value	match_tuple(1010, 1)
		1013: Cond	make_variant(Cond::Hi, [])
		1014: ValueRegs	constructor(cmp_and_choose, [31, 1013, 313, 1011, 1012], 1)
		1015: InstOutput	constructor(output, [1014], 2)
		1016: Option((Value, Value))	extractor(smax, 4)
		1017: (Value, Value)	match_some(1016)
		1018: Value	match_tuple(1017, 0)
		1019: Value	match_tuple(1017, 1)
		1020: Cond	make_variant(Cond::Gt, [])
		1021: ValueRegs	constructor(cmp_and_choose, [31, 1020, 314, 1018, 1019], 1)
		1022: InstOutput	constructor(output, [1021], 2)
		1023: Option(())	extractor(not_i64x2, 3)
		1024: ()	match_some(1023)
		1025: VecALUOp	make_variant(VecALUOp::Smin, [])
		1026: Reg	constructor(put_in_reg, [1004], 1)
		1027: Reg	constructor(put_in_reg, [1005], 2)
		1028: Reg	constructor(vec_rrr, [1025, 1026, 1027, 132], 4)
		1029: InstOutput	constructor(output_reg, [1028], 5)
		1030: Type	const_prim(I64X2)
		1031: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		1032: Reg	constructor(put_in_reg, [1005], 1)
		1033: Reg	constructor(put_in_reg, [1004], 2)
		1034: Reg	constructor(vec_rrr, [1031, 1032, 1033, 171], 3)
		1035: Reg	constructor(put_in_reg, [1004], 4)
		1036: Reg	constructor(put_in_reg, [1005], 5)
		1037: Reg	constructor(bsl, [1030, 1034, 1035, 1036], 6)
		1038: InstOutput	constructor(output_reg, [1037], 7)
		1039: VecALUOp	make_variant(VecALUOp::Umin, [])
		1040: Reg	constructor(put_in_reg, [997], 1)
		1041: Reg	constructor(put_in_reg, [998], 2)
		1042: Reg	constructor(vec_rrr, [1039, 1040, 1041, 132], 4)
		1043: InstOutput	constructor(output_reg, [1042], 5)
		1044: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		1045: Reg	constructor(put_in_reg, [998], 1)
		1046: Reg	constructor(put_in_reg, [997], 2)
		1047: Reg	constructor(vec_rrr, [1044, 1045, 1046, 171], 3)
		1048: Reg	constructor(put_in_reg, [997], 4)
		1049: Reg	constructor(put_in_reg, [998], 5)
		1050: Reg	constructor(bsl, [1030, 1047, 1048, 1049], 6)
		1051: InstOutput	constructor(output_reg, [1050], 7)
		1052: VecALUOp	make_variant(VecALUOp::Smax, [])
		1053: Reg	constructor(put_in_reg, [1018], 1)
		1054: Reg	constructor(put_in_reg, [1019], 2)
		1055: Reg	constructor(vec_rrr, [1052, 1053, 1054, 132], 4)
		1056: InstOutput	constructor(output_reg, [1055], 5)
		1057: Reg	constructor(vec_rrr, [1031, 1053, 1054, 171], 3)
		1058: Reg	constructor(put_in_reg, [1018], 4)
		1059: Reg	constructor(put_in_reg, [1019], 5)
		1060: Reg	constructor(bsl, [1030, 1057, 1058, 1059], 6)
		1061: InstOutput	constructor(output_reg, [1060], 7)
		1062: VecALUOp	make_variant(VecALUOp::Umax, [])
		1063: Reg	constructor(put_in_reg, [1011], 1)
		1064: Reg	constructor(put_in_reg, [1012], 2)
		1065: Reg	constructor(vec_rrr, [1062, 1063, 1064, 132], 4)
		1066: InstOutput	constructor(output_reg, [1065], 5)
		1067: Reg	constructor(vec_rrr, [1044, 1063, 1064, 171], 3)
		1068: Reg	constructor(put_in_reg, [1011], 4)
		1069: Reg	constructor(put_in_reg, [1012], 5)
		1070: Reg	constructor(bsl, [1030, 1067, 1068, 1069], 6)
		1071: InstOutput	constructor(output_reg, [1070], 7)
		1072: Option(Value)	extractor(uextend, 4)
		1073: Value	match_some(1072)
		1074: Type	extractor(value_type, 1073)
		1075: Reg	constructor(put_in_reg, [1073], 1)
		1076: u8	constructor(ty_bits, [1074], 0)
		1077: u8	constructor(ty_bits, [31], 0)
		1078: Reg	constructor(extend, [1075, 313, 1076, 1077], 2)
		1079: InstOutput	constructor(output_reg, [1078], 3)
		1080: Option(Inst)	extractor(def_inst, 1073)
		1081: Inst	match_some(1080)
		1082: Option((Value, Uimm8))	extractor(extractlane, 1081)
		1083: (Value, Uimm8)	match_some(1082)
		1084: Value	match_tuple(1083, 0)
		1085: Uimm8	match_tuple(1083, 1)
		1086: Type	extractor(value_type, 1084)
		1087: u8	extractor(u8_from_uimm8, 1085)
		1088: Reg	constructor(put_in_reg, [1084], 1)
		1089: ScalarSize	constructor(lane_size, [1086], 2)
		1090: Reg	constructor(mov_from_vec, [1088, 1087, 1089], 3)
		1091: InstOutput	constructor(output_reg, [1090], 4)
		1092: Option((MemFlags, Value))	extractor(atomic_load, 1081)
		1093: (MemFlags, Value)	match_some(1092)
		1094: MemFlags	match_tuple(1093, 0)
		1095: Value	match_tuple(1093, 1)
		1096: Option(Inst)	constructor(is_sinkable_inst, [1073], 0)
		1097: Inst	match_some(1096)
		1098: Reg	constructor(sink_atomic_load, [1097], 1)
		1099: Reg	constructor(load_acquire, [1074, 1094, 1098], 2)
		1100: InstOutput	constructor(output_reg, [1099], 3)
		1101: Reg	constructor(put_in_reg_zext64, [1073], 1)
		1102: Reg	constructor(imm, [143, 8, 13], 2)
		1103: ValueRegs	constructor(value_regs, [1101, 1102], 3)
		1104: InstOutput	constructor(output, [1103], 4)
		1105: Reg	constructor(imm, [143, 8, 13], 4)
		1106: ValueRegs	constructor(value_regs, [1090, 1105], 5)
		1107: InstOutput	constructor(output, [1106], 6)
		1108: Option(Value)	extractor(sextend, 4)
		1109: Value	match_some(1108)
		1110: Type	extractor(value_type, 1109)
		1111: Reg	constructor(put_in_reg, [1109], 1)
		1112: u8	constructor(ty_bits, [1110], 0)
		1113: Reg	constructor(extend, [1111, 314, 1112, 1077], 2)
		1114: InstOutput	constructor(output_reg, [1113], 3)
		1115: Option(Inst)	extractor(def_inst, 1109)
		1116: Inst	match_some(1115)
		1117: Option((Value, Uimm8))	extractor(extractlane, 1116)
		1118: (Value, Uimm8)	match_some(1117)
		1119: Value	match_tuple(1118, 0)
		1120: Uimm8	match_tuple(1118, 1)
		1121: Type	extractor(value_type, 1119)
		1122: u8	extractor(u8_from_uimm8, 1120)
		1123: Reg	constructor(put_in_reg, [1119], 1)
		1124: VectorSize	constructor(vector_size, [1121], 2)
		1125: OperandSize	constructor(size_from_ty, [31], 3)
		1126: Reg	constructor(mov_from_vec_signed, [1123, 1122, 1124, 1125], 4)
		1127: InstOutput	constructor(output_reg, [1126], 5)
		1128: Reg	constructor(put_in_reg_sext64, [1109], 1)
		1129: ImmShift	constructor(imm_shift_from_u8, [387], 2)
		1130: Reg	constructor(asr_imm, [143, 1128, 1129], 3)
		1131: ValueRegs	constructor(value_regs, [1128, 1130], 4)
		1132: InstOutput	constructor(output, [1131], 5)
		1133: Option(())	extractor(not_i64x2, 1121)
		1134: ()	match_some(1133)
		1135: OperandSize	constructor(size_from_ty, [143], 3)
		1136: Reg	constructor(mov_from_vec_signed, [1123, 1122, 1124, 1135], 4)
		1137: ImmShift	constructor(imm_shift_from_u8, [387], 5)
		1138: Reg	constructor(asr_imm, [143, 1136, 1137], 6)
		1139: ValueRegs	constructor(value_regs, [1136, 1138], 7)
		1140: InstOutput	constructor(output, [1139], 8)
		1141: Reg	constructor(mov_from_vec, [1123, 1122, 276], 2)
		1142: ImmShift	constructor(imm_shift_from_u8, [387], 3)
		1143: Reg	constructor(asr_imm, [143, 1141, 1142], 4)
		1144: ValueRegs	constructor(value_regs, [1141, 1143], 5)
		1145: InstOutput	constructor(output, [1144], 6)
		1146: Option(Value)	extractor(bnot, 4)
		1147: Value	match_some(1146)
		1148: Reg	constructor(put_in_reg, [1147], 2)
		1149: Reg	constructor(orr_not, [31, 814, 1148], 3)
		1150: InstOutput	constructor(output_reg, [1149], 4)
		1151: Option(Inst)	extractor(def_inst, 1147)
		1152: Inst	match_some(1151)
		1153: Option((Value, Value))	extractor(ishl, 1152)
		1154: (Value, Value)	match_some(1153)
		1155: Value	match_tuple(1154, 0)
		1156: Value	match_tuple(1154, 1)
		1157: Option(Inst)	extractor(def_inst, 1156)
		1158: Inst	match_some(1157)
		1159: Option(Imm64)	extractor(iconst, 1158)
		1160: Imm64	match_some(1159)
		1161: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [31, 1160], 0)
		1162: ShiftOpAndAmt	match_some(1161)
		1163: Reg	constructor(put_in_reg, [1155], 2)
		1164: Reg	constructor(orr_not_shift, [31, 814, 1163, 1162], 3)
		1165: InstOutput	constructor(output_reg, [1164], 4)
		1166: ValueRegs	constructor(put_in_regs, [1147], 1)
		1167: Reg	constructor(value_regs_get, [1166, 136], 2)
		1168: Reg	constructor(value_regs_get, [1166, 138], 3)
		1169: Reg	constructor(zero_reg, [], 4)
		1170: Reg	constructor(orr_not, [143, 1169, 1167], 5)
		1171: Reg	constructor(zero_reg, [], 6)
		1172: Reg	constructor(orr_not, [143, 1171, 1168], 7)
		1173: ValueRegs	constructor(value_regs, [1170, 1172], 8)
		1174: InstOutput	constructor(output, [1173], 9)
		1175: Reg	constructor(put_in_reg, [1147], 1)
		1176: Reg	constructor(not, [1175, 823], 3)
		1177: InstOutput	constructor(output_reg, [1176], 4)
		1178: Option((Value, Value))	extractor(bxor, 1152)
		1179: (Value, Value)	match_some(1178)
		1180: Value	match_tuple(1179, 0)
		1181: Value	match_tuple(1179, 1)
		1182: ALUOp	make_variant(ALUOp::EorNot, [])
		1183: Reg	constructor(alu_rs_imm_logic, [1182, 31, 1180, 1181], 1)
		1184: InstOutput	constructor(output_reg, [1183], 2)
		1185: ValueRegs	constructor(i128_alu_bitop, [1182, 143, 1180, 1181], 1)
		1186: InstOutput	constructor(output, [1185], 2)
		1187: Option((Value, Value))	extractor(band, 4)
		1188: (Value, Value)	match_some(1187)
		1189: Value	match_tuple(1188, 0)
		1190: Value	match_tuple(1188, 1)
		1191: ALUOp	make_variant(ALUOp::And, [])
		1192: Reg	constructor(alu_rs_imm_logic_commutative, [1191, 31, 1189, 1190], 1)
		1193: InstOutput	constructor(output_reg, [1192], 2)
		1194: ValueRegs	constructor(i128_alu_bitop, [1191, 143, 1189, 1190], 1)
		1195: InstOutput	constructor(output, [1194], 2)
		1196: Reg	constructor(put_in_reg, [1189], 1)
		1197: Reg	constructor(put_in_reg, [1190], 2)
		1198: Reg	constructor(and_vec, [1196, 1197, 785], 4)
		1199: InstOutput	constructor(output_reg, [1198], 5)
		1200: Option(Inst)	extractor(def_inst, 1190)
		1201: Inst	match_some(1200)
		1202: Option(Value)	extractor(bnot, 1201)
		1203: Value	match_some(1202)
		1204: ALUOp	make_variant(ALUOp::AndNot, [])
		1205: Reg	constructor(alu_rs_imm_logic, [1204, 31, 1189, 1203], 1)
		1206: InstOutput	constructor(output_reg, [1205], 2)
		1207: Option(Inst)	extractor(def_inst, 1189)
		1208: Inst	match_some(1207)
		1209: Option(Value)	extractor(bnot, 1208)
		1210: Value	match_some(1209)
		1211: Reg	constructor(alu_rs_imm_logic, [1204, 31, 1190, 1210], 1)
		1212: InstOutput	constructor(output_reg, [1211], 2)
		1213: ValueRegs	constructor(i128_alu_bitop, [1204, 143, 1189, 1203], 1)
		1214: InstOutput	constructor(output, [1213], 2)
		1215: ValueRegs	constructor(i128_alu_bitop, [1204, 143, 1190, 1210], 1)
		1216: InstOutput	constructor(output, [1215], 2)
		1217: Reg	constructor(put_in_reg, [1203], 2)
		1218: Reg	constructor(bic_vec, [1196, 1217, 785], 4)
		1219: InstOutput	constructor(output_reg, [1218], 5)
		1220: Reg	constructor(put_in_reg, [1190], 1)
		1221: Reg	constructor(put_in_reg, [1210], 2)
		1222: Reg	constructor(bic_vec, [1220, 1221, 785], 4)
		1223: InstOutput	constructor(output_reg, [1222], 5)
		1224: Option((Value, Value))	extractor(bor, 4)
		1225: (Value, Value)	match_some(1224)
		1226: Value	match_tuple(1225, 0)
		1227: Value	match_tuple(1225, 1)
		1228: ALUOp	make_variant(ALUOp::Orr, [])
		1229: Reg	constructor(alu_rs_imm_logic_commutative, [1228, 31, 1226, 1227], 1)
		1230: InstOutput	constructor(output_reg, [1229], 2)
		1231: ValueRegs	constructor(i128_alu_bitop, [1228, 143, 1226, 1227], 1)
		1232: InstOutput	constructor(output, [1231], 2)
		1233: Reg	constructor(put_in_reg, [1226], 1)
		1234: Reg	constructor(put_in_reg, [1227], 2)
		1235: Reg	constructor(orr_vec, [1233, 1234, 785], 4)
		1236: InstOutput	constructor(output_reg, [1235], 5)
		1237: Option(Inst)	extractor(def_inst, 1227)
		1238: Inst	match_some(1237)
		1239: Option(Value)	extractor(bnot, 1238)
		1240: Value	match_some(1239)
		1241: ALUOp	make_variant(ALUOp::OrrNot, [])
		1242: Reg	constructor(alu_rs_imm_logic, [1241, 31, 1226, 1240], 1)
		1243: InstOutput	constructor(output_reg, [1242], 2)
		1244: Option(Inst)	extractor(def_inst, 1226)
		1245: Inst	match_some(1244)
		1246: Option(Value)	extractor(bnot, 1245)
		1247: Value	match_some(1246)
		1248: Reg	constructor(alu_rs_imm_logic, [1241, 31, 1227, 1247], 1)
		1249: InstOutput	constructor(output_reg, [1248], 2)
		1250: ValueRegs	constructor(i128_alu_bitop, [1241, 143, 1226, 1240], 1)
		1251: InstOutput	constructor(output, [1250], 2)
		1252: ValueRegs	constructor(i128_alu_bitop, [1241, 143, 1227, 1247], 1)
		1253: InstOutput	constructor(output, [1252], 2)
		1254: Option((Value, Value))	extractor(bxor, 4)
		1255: (Value, Value)	match_some(1254)
		1256: Value	match_tuple(1255, 0)
		1257: Value	match_tuple(1255, 1)
		1258: ALUOp	make_variant(ALUOp::Eor, [])
		1259: Reg	constructor(alu_rs_imm_logic_commutative, [1258, 31, 1256, 1257], 1)
		1260: InstOutput	constructor(output_reg, [1259], 2)
		1261: ValueRegs	constructor(i128_alu_bitop, [1258, 143, 1256, 1257], 1)
		1262: InstOutput	constructor(output, [1261], 2)
		1263: Reg	constructor(put_in_reg, [1256], 1)
		1264: Reg	constructor(put_in_reg, [1257], 2)
		1265: Reg	constructor(eor_vec, [1263, 1264, 785], 4)
		1266: InstOutput	constructor(output_reg, [1265], 5)
		1267: Option(Inst)	extractor(def_inst, 1257)
		1268: Inst	match_some(1267)
		1269: Option(Value)	extractor(bnot, 1268)
		1270: Value	match_some(1269)
		1271: Reg	constructor(alu_rs_imm_logic, [1182, 31, 1256, 1270], 1)
		1272: InstOutput	constructor(output_reg, [1271], 2)
		1273: Option(Inst)	extractor(def_inst, 1256)
		1274: Inst	match_some(1273)
		1275: Option(Value)	extractor(bnot, 1274)
		1276: Value	match_some(1275)
		1277: Reg	constructor(alu_rs_imm_logic, [1182, 31, 1257, 1276], 1)
		1278: InstOutput	constructor(output_reg, [1277], 2)
		1279: ValueRegs	constructor(i128_alu_bitop, [1182, 143, 1256, 1270], 1)
		1280: InstOutput	constructor(output, [1279], 2)
		1281: ValueRegs	constructor(i128_alu_bitop, [1182, 143, 1257, 1276], 1)
		1282: InstOutput	constructor(output, [1281], 2)
		1283: Option((Value, Value))	extractor(ishl, 4)
		1284: (Value, Value)	match_some(1283)
		1285: Value	match_tuple(1284, 0)
		1286: Value	match_tuple(1284, 1)
		1287: ALUOp	make_variant(ALUOp::Lsl, [])
		1288: Reg	constructor(put_in_reg, [1285], 1)
		1289: Reg	constructor(do_shift, [1287, 380, 1288, 1286], 2)
		1290: InstOutput	constructor(output_reg, [1289], 3)
		1291: Reg	constructor(do_shift, [1287, 143, 1288, 1286], 2)
		1292: InstOutput	constructor(output_reg, [1291], 3)
		1293: ValueRegs	constructor(put_in_regs, [1285], 1)
		1294: ValueRegs	constructor(put_in_regs, [1286], 2)
		1295: Reg	constructor(value_regs_get, [1294, 136], 3)
		1296: ValueRegs	constructor(lower_shl128, [1293, 1295], 4)
		1297: InstOutput	constructor(output, [1296], 5)
		1298: VectorSize	constructor(vector_size, [778], 1)
		1299: Type	const_prim(I32)
		1300: Reg	constructor(put_in_reg, [1286], 2)
		1301: ImmLogic	constructor(shift_mask, [778], 3)
		1302: Reg	constructor(and_imm, [1299, 1300, 1301], 4)
		1303: Reg	constructor(vec_dup, [1302, 1298], 5)
		1304: Reg	constructor(put_in_reg, [1285], 6)
		1305: Reg	constructor(sshl, [1304, 1303, 1298], 7)
		1306: InstOutput	constructor(output_reg, [1305], 8)
		1307: Option(Inst)	extractor(def_inst, 1286)
		1308: Inst	match_some(1307)
		1309: Option(Imm64)	extractor(iconst, 1308)
		1310: Imm64	match_some(1309)
		1311: u64	extractor(u64_from_imm64, 1310)
		1312: u8	constructor(shift_masked_imm, [778, 1311], 0)
		1313: Reg	constructor(ushl_vec_imm, [1288, 1312, 823], 3)
		1314: InstOutput	constructor(output_reg, [1313], 4)
		1315: Option((Value, Value))	extractor(ushr, 4)
		1316: (Value, Value)	match_some(1315)
		1317: Value	match_tuple(1316, 0)
		1318: Value	match_tuple(1316, 1)
		1319: ALUOp	make_variant(ALUOp::Lsr, [])
		1320: Reg	constructor(put_in_reg_zext32, [1317], 1)
		1321: Reg	constructor(do_shift, [1319, 380, 1320, 1318], 2)
		1322: InstOutput	constructor(output_reg, [1321], 3)
		1323: Reg	constructor(put_in_reg_zext64, [1317], 1)
		1324: Reg	constructor(do_shift, [1319, 143, 1323, 1318], 2)
		1325: InstOutput	constructor(output_reg, [1324], 3)
		1326: ValueRegs	constructor(put_in_regs, [1317], 1)
		1327: ValueRegs	constructor(put_in_regs, [1318], 2)
		1328: Reg	constructor(value_regs_get, [1327, 136], 3)
		1329: ValueRegs	constructor(lower_ushr128, [1326, 1328], 4)
		1330: InstOutput	constructor(output, [1329], 5)
		1331: Reg	constructor(put_in_reg, [1318], 2)
		1332: Reg	constructor(and_imm, [1299, 1331, 1301], 4)
		1333: Reg	constructor(zero_reg, [], 5)
		1334: Reg	constructor(sub, [143, 1333, 1332], 6)
		1335: Reg	constructor(vec_dup, [1334, 1298], 7)
		1336: Reg	constructor(put_in_reg, [1317], 8)
		1337: Reg	constructor(ushl, [1336, 1335, 1298], 9)
		1338: InstOutput	constructor(output_reg, [1337], 10)
		1339: Option(Inst)	extractor(def_inst, 1318)
		1340: Inst	match_some(1339)
		1341: Option(Imm64)	extractor(iconst, 1340)
		1342: Imm64	match_some(1341)
		1343: u64	extractor(u64_from_imm64, 1342)
		1344: Reg	constructor(put_in_reg, [1317], 1)
		1345: u8	constructor(shift_masked_imm, [778, 1343], 0)
		1346: Reg	constructor(ushr_vec_imm, [1344, 1345, 823], 3)
		1347: InstOutput	constructor(output_reg, [1346], 4)
		1348: InstOutput	constructor(output_value, [1317], 1)
		1349: Option((Value, Value))	extractor(sshr, 4)
		1350: (Value, Value)	match_some(1349)
		1351: Value	match_tuple(1350, 0)
		1352: Value	match_tuple(1350, 1)
		1353: ALUOp	make_variant(ALUOp::Asr, [])
		1354: Reg	constructor(put_in_reg_sext32, [1351], 1)
		1355: Reg	constructor(do_shift, [1353, 380, 1354, 1352], 2)
		1356: InstOutput	constructor(output_reg, [1355], 3)
		1357: Reg	constructor(put_in_reg_sext64, [1351], 1)
		1358: Reg	constructor(do_shift, [1353, 143, 1357, 1352], 2)
		1359: InstOutput	constructor(output_reg, [1358], 3)
		1360: ValueRegs	constructor(put_in_regs, [1351], 1)
		1361: ValueRegs	constructor(put_in_regs, [1352], 2)
		1362: Reg	constructor(value_regs_get, [1361, 136], 3)
		1363: ValueRegs	constructor(lower_sshr128, [1360, 1362], 4)
		1364: InstOutput	constructor(output, [1363], 5)
		1365: Reg	constructor(put_in_reg, [1352], 2)
		1366: Reg	constructor(and_imm, [1299, 1365, 1301], 4)
		1367: Reg	constructor(sub, [143, 1333, 1366], 6)
		1368: Reg	constructor(vec_dup, [1367, 1298], 7)
		1369: Reg	constructor(put_in_reg, [1351], 8)
		1370: Reg	constructor(sshl, [1369, 1368, 1298], 9)
		1371: InstOutput	constructor(output_reg, [1370], 10)
		1372: Option(Inst)	extractor(def_inst, 1352)
		1373: Inst	match_some(1372)
		1374: Option(Imm64)	extractor(iconst, 1373)
		1375: Imm64	match_some(1374)
		1376: u64	extractor(u64_from_imm64, 1375)
		1377: Reg	constructor(put_in_reg, [1351], 1)
		1378: u8	constructor(shift_masked_imm, [778, 1376], 0)
		1379: Reg	constructor(sshr_vec_imm, [1377, 1378, 823], 3)
		1380: InstOutput	constructor(output_reg, [1379], 4)
		1381: InstOutput	constructor(output_value, [1351], 1)
		1382: Option(Type)	extractor(fits_in_16, 3)
		1383: Type	match_some(1382)
		1384: Option((Value, Value))	extractor(rotl, 4)
		1385: (Value, Value)	match_some(1384)
		1386: Value	match_tuple(1385, 0)
		1387: Value	match_tuple(1385, 1)
		1388: ValueRegs	constructor(put_in_regs, [1387], 1)
		1389: Reg	constructor(value_regs_get, [1388, 136], 2)
		1390: Reg	constructor(sub, [1299, 308, 1389], 4)
		1391: Reg	constructor(put_in_reg_zext32, [1386], 5)
		1392: Reg	constructor(small_rotr, [1383, 1391, 1390], 6)
		1393: InstOutput	constructor(output_reg, [1392], 7)
		1394: Option(Inst)	extractor(def_inst, 1387)
		1395: Inst	match_some(1394)
		1396: Option(Imm64)	extractor(iconst, 1395)
		1397: Imm64	match_some(1396)
		1398: Option(ImmShift)	constructor(imm_shift_from_imm64, [1383, 1397], 0)
		1399: ImmShift	match_some(1398)
		1400: Reg	constructor(put_in_reg_zext32, [1386], 1)
		1401: ImmShift	constructor(negate_imm_shift, [1383, 1399], 2)
		1402: Reg	constructor(small_rotr_imm, [1383, 1400, 1401], 3)
		1403: InstOutput	constructor(output_reg, [1402], 4)
		1404: Reg	constructor(put_in_reg, [1386], 5)
		1405: Reg	constructor(a64_rotr, [1299, 1404, 1390], 6)
		1406: InstOutput	constructor(output_reg, [1405], 7)
		1407: Reg	constructor(sub, [143, 308, 1389], 4)
		1408: Reg	constructor(a64_rotr, [143, 1404, 1407], 6)
		1409: InstOutput	constructor(output_reg, [1408], 7)
		1410: Option(ImmShift)	constructor(imm_shift_from_imm64, [1299, 1397], 0)
		1411: ImmShift	match_some(1410)
		1412: Reg	constructor(put_in_reg, [1386], 1)
		1413: ImmShift	constructor(negate_imm_shift, [1299, 1411], 2)
		1414: Reg	constructor(a64_rotr_imm, [1299, 1412, 1413], 3)
		1415: InstOutput	constructor(output_reg, [1414], 4)
		1416: Option(ImmShift)	constructor(imm_shift_from_imm64, [143, 1397], 0)
		1417: ImmShift	match_some(1416)
		1418: ImmShift	constructor(negate_imm_shift, [143, 1417], 2)
		1419: Reg	constructor(a64_rotr_imm, [143, 1412, 1418], 3)
		1420: InstOutput	constructor(output_reg, [1419], 4)
		1421: ValueRegs	constructor(put_in_regs, [1386], 1)
		1422: ValueRegs	constructor(put_in_regs, [1387], 2)
		1423: Reg	constructor(value_regs_get, [1422, 136], 3)
		1424: u64	const_int(128, u64)
		1425: Reg	constructor(imm, [143, 8, 1424], 4)
		1426: Reg	constructor(sub, [143, 1425, 1423], 5)
		1427: ValueRegs	constructor(lower_shl128, [1421, 1423], 6)
		1428: ValueRegs	constructor(lower_ushr128, [1421, 1426], 7)
		1429: Reg	constructor(value_regs_get, [1427, 136], 8)
		1430: Reg	constructor(value_regs_get, [1428, 136], 9)
		1431: Reg	constructor(orr, [143, 1429, 1430], 10)
		1432: Reg	constructor(value_regs_get, [1427, 138], 11)
		1433: Reg	constructor(value_regs_get, [1428, 138], 12)
		1434: Reg	constructor(orr, [143, 1432, 1433], 13)
		1435: ValueRegs	constructor(value_regs, [1431, 1434], 14)
		1436: InstOutput	constructor(output, [1435], 15)
		1437: Option((Value, Value))	extractor(rotr, 4)
		1438: (Value, Value)	match_some(1437)
		1439: Value	match_tuple(1438, 0)
		1440: Value	match_tuple(1438, 1)
		1441: Reg	constructor(put_in_reg_zext32, [1439], 1)
		1442: ValueRegs	constructor(put_in_regs, [1440], 2)
		1443: Reg	constructor(value_regs_get, [1442, 136], 3)
		1444: Reg	constructor(small_rotr, [1383, 1441, 1443], 4)
		1445: InstOutput	constructor(output_reg, [1444], 5)
		1446: Reg	constructor(put_in_reg, [1439], 1)
		1447: Reg	constructor(a64_rotr, [1299, 1446, 1443], 4)
		1448: InstOutput	constructor(output_reg, [1447], 5)
		1449: Reg	constructor(a64_rotr, [143, 1446, 1443], 4)
		1450: InstOutput	constructor(output_reg, [1449], 5)
		1451: Option(Inst)	extractor(def_inst, 1440)
		1452: Inst	match_some(1451)
		1453: Option(Imm64)	extractor(iconst, 1452)
		1454: Imm64	match_some(1453)
		1455: Option(ImmShift)	constructor(imm_shift_from_imm64, [1383, 1454], 0)
		1456: ImmShift	match_some(1455)
		1457: Reg	constructor(small_rotr_imm, [1383, 1441, 1456], 2)
		1458: InstOutput	constructor(output_reg, [1457], 3)
		1459: Option(ImmShift)	constructor(imm_shift_from_imm64, [1299, 1454], 0)
		1460: ImmShift	match_some(1459)
		1461: Reg	constructor(a64_rotr_imm, [1299, 1446, 1460], 2)
		1462: InstOutput	constructor(output_reg, [1461], 3)
		1463: Option(ImmShift)	constructor(imm_shift_from_imm64, [143, 1454], 0)
		1464: ImmShift	match_some(1463)
		1465: Reg	constructor(a64_rotr_imm, [143, 1446, 1464], 2)
		1466: InstOutput	constructor(output_reg, [1465], 3)
		1467: ValueRegs	constructor(put_in_regs, [1439], 1)
		1468: Reg	constructor(sub, [143, 1425, 1443], 5)
		1469: ValueRegs	constructor(lower_ushr128, [1467, 1443], 6)
		1470: ValueRegs	constructor(lower_shl128, [1467, 1468], 7)
		1471: Reg	constructor(value_regs_get, [1469, 138], 8)
		1472: Reg	constructor(value_regs_get, [1470, 138], 9)
		1473: Reg	constructor(orr, [143, 1471, 1472], 10)
		1474: Reg	constructor(value_regs_get, [1469, 136], 11)
		1475: Reg	constructor(value_regs_get, [1470, 136], 12)
		1476: Reg	constructor(orr, [143, 1474, 1475], 13)
		1477: ValueRegs	constructor(value_regs, [1476, 1473], 14)
		1478: InstOutput	constructor(output, [1477], 15)
		1479: Option(Value)	extractor(bitrev, 4)
		1480: Value	match_some(1479)
		1481: Reg	constructor(put_in_reg, [1480], 1)
		1482: Reg	constructor(rbit, [1299, 1481], 2)
		1483: u8	const_int(24, u8)
		1484: ImmShift	constructor(imm_shift_from_u8, [1483], 3)
		1485: Reg	constructor(lsr_imm, [1299, 1482, 1484], 4)
		1486: InstOutput	constructor(output_reg, [1485], 5)
		1487: u8	const_int(16, u8)
		1488: ImmShift	constructor(imm_shift_from_u8, [1487], 3)
		1489: Reg	constructor(lsr_imm, [1299, 1482, 1488], 4)
		1490: InstOutput	constructor(output_reg, [1489], 5)
		1491: ValueRegs	constructor(put_in_regs, [1480], 1)
		1492: Reg	constructor(value_regs_get, [1491, 136], 2)
		1493: Reg	constructor(rbit, [143, 1492], 3)
		1494: Reg	constructor(value_regs_get, [1491, 138], 4)
		1495: Reg	constructor(rbit, [143, 1494], 5)
		1496: ValueRegs	constructor(value_regs, [1495, 1493], 6)
		1497: InstOutput	constructor(output, [1496], 7)
		1498: Reg	constructor(rbit, [3, 1481], 2)
		1499: InstOutput	constructor(output_reg, [1498], 3)
		1500: Option(Value)	extractor(clz, 4)
		1501: Value	match_some(1500)
		1502: Reg	constructor(put_in_reg_zext32, [1501], 1)
		1503: Reg	constructor(a64_clz, [1299, 1502], 2)
		1504: Imm12	constructor(u8_into_imm12, [1483], 3)
		1505: Reg	constructor(sub_imm, [1299, 1503, 1504], 4)
		1506: InstOutput	constructor(output_reg, [1505], 5)
		1507: Imm12	constructor(u8_into_imm12, [1487], 3)
		1508: Reg	constructor(sub_imm, [1299, 1503, 1507], 4)
		1509: InstOutput	constructor(output_reg, [1508], 5)
		1510: ValueRegs	constructor(put_in_regs, [1501], 1)
		1511: ValueRegs	constructor(lower_clz128, [1510], 2)
		1512: InstOutput	constructor(output, [1511], 3)
		1513: Reg	constructor(put_in_reg, [1501], 1)
		1514: Reg	constructor(a64_clz, [3, 1513], 2)
		1515: InstOutput	constructor(output_reg, [1514], 3)
		1516: Option(Value)	extractor(ctz, 4)
		1517: Value	match_some(1516)
		1518: Reg	constructor(put_in_reg, [1517], 1)
		1519: Reg	constructor(rbit, [1299, 1518], 2)
		1520: u64	const_int(8388608, u64)
		1521: ImmLogic	constructor(u64_into_imm_logic, [1299, 1520], 3)
		1522: Reg	constructor(orr_imm, [1299, 1519, 1521], 4)
		1523: Reg	constructor(a64_clz, [1299, 1522], 5)
		1524: InstOutput	constructor(output_reg, [1523], 6)
		1525: u64	const_int(32768, u64)
		1526: ImmLogic	constructor(u64_into_imm_logic, [1299, 1525], 3)
		1527: Reg	constructor(orr_imm, [1299, 1519, 1526], 4)
		1528: Reg	constructor(a64_clz, [1299, 1527], 5)
		1529: InstOutput	constructor(output_reg, [1528], 6)
		1530: ValueRegs	constructor(put_in_regs, [1517], 1)
		1531: Reg	constructor(value_regs_get, [1530, 136], 2)
		1532: Reg	constructor(rbit, [143, 1531], 3)
		1533: Reg	constructor(value_regs_get, [1530, 138], 4)
		1534: Reg	constructor(rbit, [143, 1533], 5)
		1535: ValueRegs	constructor(value_regs, [1534, 1532], 6)
		1536: ValueRegs	constructor(lower_clz128, [1535], 7)
		1537: InstOutput	constructor(output, [1536], 8)
		1538: Reg	constructor(rbit, [3, 1518], 2)
		1539: Reg	constructor(a64_clz, [3, 1538], 3)
		1540: InstOutput	constructor(output_reg, [1539], 4)
		1541: Option(Value)	extractor(cls, 4)
		1542: Value	match_some(1541)
		1543: Reg	constructor(put_in_reg_sext32, [1542], 1)
		1544: Reg	constructor(a64_cls, [1299, 1543], 2)
		1545: Reg	constructor(sub_imm, [1299, 1544, 1504], 4)
		1546: InstOutput	constructor(output_reg, [1545], 5)
		1547: Reg	constructor(sub_imm, [1299, 1544, 1507], 4)
		1548: InstOutput	constructor(output_reg, [1547], 5)
		1549: ValueRegs	constructor(put_in_regs, [1542], 1)
		1550: Reg	constructor(value_regs_get, [1549, 136], 2)
		1551: Reg	constructor(value_regs_get, [1549, 138], 3)
		1552: Reg	constructor(a64_cls, [143, 1550], 4)
		1553: Reg	constructor(a64_cls, [143, 1551], 5)
		1554: Reg	constructor(eon, [143, 1551, 1550], 6)
		1555: ImmShift	constructor(imm_shift_from_u8, [387], 7)
		1556: Reg	constructor(lsr_imm, [143, 1554, 1555], 8)
		1557: Reg	constructor(madd, [143, 1552, 1556, 1556], 9)
		1558: Imm12	constructor(u8_into_imm12, [387], 10)
		1559: ProducesFlags	constructor(cmp64_imm, [1553, 1558], 11)
		1560: Reg	constructor(zero_reg, [], 12)
		1561: ConsumesFlags	constructor(csel, [301, 1557, 1560], 13)
		1562: Reg	constructor(with_flags_reg, [1559, 1561], 14)
		1563: Reg	constructor(add, [143, 1562, 1553], 15)
		1564: Reg	constructor(imm, [143, 8, 13], 16)
		1565: ValueRegs	constructor(value_regs, [1563, 1564], 17)
		1566: InstOutput	constructor(output, [1565], 18)
		1567: Reg	constructor(put_in_reg, [1542], 1)
		1568: Reg	constructor(a64_cls, [3, 1567], 2)
		1569: InstOutput	constructor(output_reg, [1568], 3)
		1570: Option(Value)	extractor(bswap, 4)
		1571: Value	match_some(1570)
		1572: Type	const_prim(I16)
		1573: Reg	constructor(put_in_reg, [1571], 1)
		1574: Reg	constructor(a64_rev16, [1572, 1573], 2)
		1575: InstOutput	constructor(output_reg, [1574], 3)
		1576: Reg	constructor(a64_rev32, [1299, 1573], 2)
		1577: InstOutput	constructor(output_reg, [1576], 3)
		1578: Reg	constructor(a64_rev64, [143, 1573], 2)
		1579: InstOutput	constructor(output_reg, [1578], 3)
		1580: ValueRegs	constructor(put_in_regs, [1571], 1)
		1581: Reg	constructor(value_regs_get, [1580, 138], 2)
		1582: Reg	constructor(a64_rev64, [143, 1581], 3)
		1583: ValueRegs	constructor(put_in_regs, [1571], 4)
		1584: Reg	constructor(value_regs_get, [1583, 136], 5)
		1585: Reg	constructor(a64_rev64, [143, 1584], 6)
		1586: ValueRegs	constructor(value_regs, [1582, 1585], 7)
		1587: InstOutput	constructor(output, [1586], 8)
		1588: Option(Value)	extractor(bmask, 4)
		1589: Value	match_some(1588)
		1590: Type	extractor(value_type, 1589)
		1591: ValueRegs	constructor(put_in_regs, [1589], 1)
		1592: ValueRegs	constructor(lower_bmask, [3, 1590, 1591], 2)
		1593: InstOutput	constructor(output, [1592], 3)
		1594: Option(Value)	extractor(popcnt, 4)
		1595: Value	match_some(1594)
		1596: Reg	constructor(put_in_reg, [1595], 1)
		1597: Reg	constructor(mov_to_fpu, [1596, 273], 2)
		1598: VectorSize	make_variant(VectorSize::Size8x8, [])
		1599: Reg	constructor(vec_cnt, [1597, 1598], 3)
		1600: ScalarSize	make_variant(ScalarSize::Size8, [])
		1601: Reg	constructor(mov_from_vec, [1599, 305, 1600], 4)
		1602: InstOutput	constructor(output_reg, [1601], 5)
		1603: Reg	constructor(addp, [1599, 1599, 1598], 4)
		1604: Reg	constructor(mov_from_vec, [1603, 305, 1600], 5)
		1605: InstOutput	constructor(output_reg, [1604], 6)
		1606: Reg	constructor(addv, [1599, 1598], 4)
		1607: Reg	constructor(mov_from_vec, [1606, 305, 1600], 5)
		1608: InstOutput	constructor(output_reg, [1607], 6)
		1609: Reg	constructor(mov_to_fpu, [1596, 276], 2)
		1610: Reg	constructor(vec_cnt, [1609, 1598], 3)
		1611: Reg	constructor(addv, [1610, 1598], 4)
		1612: Reg	constructor(mov_from_vec, [1611, 305, 1600], 5)
		1613: InstOutput	constructor(output_reg, [1612], 6)
		1614: ValueRegs	constructor(put_in_regs, [1595], 1)
		1615: Reg	constructor(value_regs_get, [1614, 136], 2)
		1616: Reg	constructor(mov_to_fpu, [1615, 276], 3)
		1617: Reg	constructor(value_regs_get, [1614, 138], 4)
		1618: Reg	constructor(mov_to_vec, [1616, 1617, 407, 171], 5)
		1619: Reg	constructor(vec_cnt, [1618, 156], 6)
		1620: Reg	constructor(addv, [1619, 156], 7)
		1621: Reg	constructor(mov_from_vec, [1620, 305, 1600], 8)
		1622: Reg	constructor(imm, [143, 8, 13], 9)
		1623: ValueRegs	constructor(value_regs, [1621, 1622], 10)
		1624: InstOutput	constructor(output, [1623], 11)
		1625: Reg	constructor(vec_cnt, [1596, 156], 2)
		1626: InstOutput	constructor(output_reg, [1625], 3)
		1627: Option((Value, Value, Value))	extractor(bitselect, 4)
		1628: (Value, Value, Value)	match_some(1627)
		1629: Value	match_tuple(1628, 0)
		1630: Value	match_tuple(1628, 1)
		1631: Value	match_tuple(1628, 2)
		1632: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		1633: Type	match_some(1632)
		1634: Reg	constructor(put_in_reg, [1630], 1)
		1635: Reg	constructor(put_in_reg, [1629], 2)
		1636: Reg	constructor(and_reg, [3, 1634, 1635], 3)
		1637: Reg	constructor(put_in_reg, [1631], 4)
		1638: Reg	constructor(put_in_reg, [1629], 5)
		1639: Reg	constructor(bic, [3, 1637, 1638], 6)
		1640: Reg	constructor(orr, [3, 1636, 1639], 7)
		1641: InstOutput	constructor(output_reg, [1640], 8)
		1642: Reg	constructor(put_in_reg, [1629], 1)
		1643: Reg	constructor(put_in_reg, [1630], 2)
		1644: Reg	constructor(put_in_reg, [1631], 3)
		1645: Reg	constructor(bsl, [778, 1642, 1643, 1644], 4)
		1646: InstOutput	constructor(output_reg, [1645], 5)
		1647: Option(Value)	extractor(ireduce, 4)
		1648: Value	match_some(1647)
		1649: ValueRegs	constructor(put_in_regs, [1648], 1)
		1650: Reg	constructor(value_regs_get, [1649, 136], 2)
		1651: InstOutput	constructor(output_reg, [1650], 3)
		1652: Option((FloatCC, Value, Value))	extractor(fcmp, 4)
		1653: (FloatCC, Value, Value)	match_some(1652)
		1654: FloatCC	match_tuple(1653, 0)
		1655: Value	match_tuple(1653, 1)
		1656: Value	match_tuple(1653, 2)
		1657: Option(FloatCC)	extractor(fcmp_zero_cond_not_eq, 1654)
		1658: FloatCC	match_some(1657)
		1659: Option(Value)	constructor(zero_value, [1656], 0)
		1660: Value	match_some(1659)
		1661: Reg	constructor(put_in_reg, [1655], 1)
		1662: Reg	constructor(fcmeq0, [1661, 374], 3)
		1663: Reg	constructor(not, [1662, 374], 4)
		1664: ValueRegs	constructor(value_reg, [1663], 5)
		1665: InstOutput	constructor(output, [1664], 6)
		1666: Option(FloatCC)	extractor(fcmp_zero_cond, 1654)
		1667: FloatCC	match_some(1666)
		1668: Reg	constructor(float_cmp_zero, [1667, 1661, 374], 3)
		1669: ValueRegs	constructor(value_reg, [1668], 4)
		1670: InstOutput	constructor(output, [1669], 5)
		1671: Option(Value)	constructor(zero_value, [1655], 0)
		1672: Value	match_some(1671)
		1673: Reg	constructor(put_in_reg, [1656], 1)
		1674: Reg	constructor(fcmeq0, [1673, 374], 3)
		1675: Reg	constructor(not, [1674, 374], 4)
		1676: ValueRegs	constructor(value_reg, [1675], 5)
		1677: InstOutput	constructor(output, [1676], 6)
		1678: Reg	constructor(float_cmp_zero_swap, [1667, 1673, 374], 3)
		1679: ValueRegs	constructor(value_reg, [1678], 4)
		1680: InstOutput	constructor(output, [1679], 5)
		1681: Type	extractor(value_type, 1655)
		1682: Option(Type)	extractor(ty_scalar_float, 1681)
		1683: Type	match_some(1682)
		1684: ScalarSize	constructor(scalar_size, [1683], 1)
		1685: Reg	constructor(put_in_reg, [1655], 2)
		1686: Reg	constructor(put_in_reg, [1656], 3)
		1687: ProducesFlags	constructor(fpu_cmp, [1684, 1685, 1686], 4)
		1688: Cond	constructor(fp_cond_code, [1654], 5)
		1689: ConsumesFlags	constructor(materialize_bool_result, [1688], 6)
		1690: ValueRegs	constructor(with_flags, [1687, 1689], 7)
		1691: InstOutput	constructor(output, [1690], 8)
		1692: Option(Type)	constructor(ty_vector_float, [1681], 0)
		1693: Type	match_some(1692)
		1694: Reg	constructor(put_in_reg, [1656], 2)
		1695: Cond	constructor(fp_cond_code, [1654], 3)
		1696: Reg	constructor(vec_cmp, [1661, 1694, 1681, 1695], 4)
		1697: InstOutput	constructor(output_reg, [1696], 5)
		1698: Option((IntCC, Value, Value))	extractor(icmp, 4)
		1699: (IntCC, Value, Value)	match_some(1698)
		1700: IntCC	match_tuple(1699, 0)
		1701: Value	match_tuple(1699, 1)
		1702: Value	match_tuple(1699, 2)
		1703: Option(IntCC)	extractor(icmp_zero_cond_not_eq, 1700)
		1704: IntCC	match_some(1703)
		1705: Option(Value)	constructor(zero_value, [1702], 0)
		1706: Value	match_some(1705)
		1707: Reg	constructor(put_in_reg, [1701], 1)
		1708: Reg	constructor(cmeq0, [1707, 374], 3)
		1709: Reg	constructor(not, [1708, 374], 4)
		1710: ValueRegs	constructor(value_reg, [1709], 5)
		1711: InstOutput	constructor(output, [1710], 6)
		1712: Option(IntCC)	extractor(icmp_zero_cond, 1700)
		1713: IntCC	match_some(1712)
		1714: Reg	constructor(int_cmp_zero, [1713, 1707, 374], 3)
		1715: ValueRegs	constructor(value_reg, [1714], 4)
		1716: InstOutput	constructor(output, [1715], 5)
		1717: Option(Value)	constructor(zero_value, [1701], 0)
		1718: Value	match_some(1717)
		1719: Reg	constructor(put_in_reg, [1702], 1)
		1720: Reg	constructor(cmeq0, [1719, 374], 3)
		1721: Reg	constructor(not, [1720, 374], 4)
		1722: ValueRegs	constructor(value_reg, [1721], 5)
		1723: InstOutput	constructor(output, [1722], 6)
		1724: Reg	constructor(int_cmp_zero_swap, [1713, 1719, 374], 3)
		1725: ValueRegs	constructor(value_reg, [1724], 4)
		1726: InstOutput	constructor(output, [1725], 5)
		1727: Option((IntCC, Value, Value))	extractor(icmp, 0)
		1728: (IntCC, Value, Value)	match_some(1727)
		1729: IntCC	match_tuple(1728, 0)
		1730: Value	match_tuple(1728, 1)
		1731: Value	match_tuple(1728, 2)
		1732: Type	extractor(value_type, 1730)
		1733: Type	const_prim(I8)
		1734: ValueRegs	constructor(lower_icmp_into_reg, [1729, 1730, 1731, 1732, 1733], 1)
		1735: InstOutput	constructor(output, [1734], 2)
		1736: Option(TrapCode)	extractor(trap, 0)
		1737: TrapCode	match_some(1736)
		1738: SideEffectNoResult	constructor(udf, [1737], 1)
		1739: InstOutput	constructor(side_effect, [1738], 2)
		1740: Option(TrapCode)	extractor(resumable_trap, 0)
		1741: TrapCode	match_some(1740)
		1742: SideEffectNoResult	constructor(udf, [1741], 1)
		1743: InstOutput	constructor(side_effect, [1742], 2)
		1744: Option((Value, Value, Value))	extractor(select, 4)
		1745: (Value, Value, Value)	match_some(1744)
		1746: Value	match_tuple(1745, 0)
		1747: Value	match_tuple(1745, 1)
		1748: Value	match_tuple(1745, 2)
		1749: Option(Value)	extractor(maybe_uextend, 1746)
		1750: Value	match_some(1749)
		1751: Option(Inst)	extractor(def_inst, 1750)
		1752: Inst	match_some(1751)
		1753: Option((IntCC, Value, Value))	extractor(icmp, 1752)
		1754: (IntCC, Value, Value)	match_some(1753)
		1755: IntCC	match_tuple(1754, 0)
		1756: Value	match_tuple(1754, 1)
		1757: Value	match_tuple(1754, 2)
		1758: Type	extractor(value_type, 1756)
		1759: FlagsAndCC	constructor(lower_icmp_into_flags, [1755, 1756, 1757, 1758], 1)
		1760: ProducesFlags	constructor(flags_and_cc_flags, [1759], 2)
		1761: IntCC	constructor(flags_and_cc_cc, [1759], 3)
		1762: Cond	constructor(cond_code, [1761], 4)
		1763: ValueRegs	constructor(lower_select, [1760, 1762, 3, 1747, 1748], 5)
		1764: InstOutput	constructor(output, [1763], 6)
		1765: Option((FloatCC, Value, Value))	extractor(fcmp, 1752)
		1766: (FloatCC, Value, Value)	match_some(1765)
		1767: FloatCC	match_tuple(1766, 0)
		1768: Value	match_tuple(1766, 1)
		1769: Value	match_tuple(1766, 2)
		1770: Type	extractor(value_type, 1768)
		1771: Cond	constructor(fp_cond_code, [1767], 1)
		1772: ScalarSize	constructor(scalar_size, [1770], 2)
		1773: Reg	constructor(put_in_reg, [1768], 3)
		1774: Reg	constructor(put_in_reg, [1769], 4)
		1775: ProducesFlags	constructor(fpu_cmp, [1772, 1773, 1774], 5)
		1776: ValueRegs	constructor(lower_select, [1775, 1771, 3, 1747, 1748], 6)
		1777: InstOutput	constructor(output, [1776], 7)
		1778: Type	extractor(value_type, 1746)
		1779: Reg	constructor(put_in_reg, [1746], 1)
		1780: u64	const_int(255, u64)
		1781: ImmLogic	constructor(u64_into_imm_logic, [1299, 1780], 2)
		1782: ProducesFlags	constructor(tst_imm, [1299, 1779, 1781], 3)
		1783: ValueRegs	constructor(lower_select, [1782, 316, 3, 1747, 1748], 4)
		1784: InstOutput	constructor(output, [1783], 5)
		1785: Option(Type)	extractor(fits_in_32, 1778)
		1786: Type	match_some(1785)
		1787: Reg	constructor(put_in_reg_zext32, [1746], 1)
		1788: Reg	constructor(zero_reg, [], 2)
		1789: ProducesFlags	constructor(cmp, [311, 1787, 1788], 3)
		1790: ValueRegs	constructor(lower_select, [1789, 316, 3, 1747, 1748], 4)
		1791: InstOutput	constructor(output, [1790], 5)
		1792: Option(Type)	extractor(fits_in_64, 1778)
		1793: Type	match_some(1792)
		1794: Reg	constructor(put_in_reg_zext64, [1746], 1)
		1795: ProducesFlags	constructor(cmp, [307, 1794, 1788], 3)
		1796: ValueRegs	constructor(lower_select, [1795, 316, 3, 1747, 1748], 4)
		1797: InstOutput	constructor(output, [1796], 5)
		1798: ValueRegs	constructor(put_in_regs, [1746], 1)
		1799: Reg	constructor(value_regs_get, [1798, 136], 2)
		1800: Reg	constructor(value_regs_get, [1798, 138], 3)
		1801: Reg	constructor(orr, [143, 1799, 1800], 4)
		1802: ProducesFlags	constructor(cmp, [307, 1801, 1333], 6)
		1803: ValueRegs	constructor(lower_select, [1802, 316, 3, 1747, 1748], 7)
		1804: InstOutput	constructor(output, [1803], 8)
		1805: Option((Value, Value, Value))	extractor(select_spectre_guard, 4)
		1806: (Value, Value, Value)	match_some(1805)
		1807: Value	match_tuple(1806, 0)
		1808: Value	match_tuple(1806, 1)
		1809: Value	match_tuple(1806, 2)
		1810: Option(Value)	extractor(maybe_uextend, 1807)
		1811: Value	match_some(1810)
		1812: Option(Inst)	extractor(def_inst, 1811)
		1813: Inst	match_some(1812)
		1814: Option((IntCC, Value, Value))	extractor(icmp, 1813)
		1815: (IntCC, Value, Value)	match_some(1814)
		1816: IntCC	match_tuple(1815, 0)
		1817: Value	match_tuple(1815, 1)
		1818: Value	match_tuple(1815, 2)
		1819: Type	extractor(value_type, 1817)
		1820: FlagsAndCC	constructor(lower_icmp_into_flags, [1816, 1817, 1818, 1819], 1)
		1821: ProducesFlags	constructor(flags_and_cc_flags, [1820], 2)
		1822: IntCC	constructor(flags_and_cc_cc, [1820], 3)
		1823: Cond	constructor(cond_code, [1822], 4)
		1824: ValueRegs	constructor(lower_select, [1821, 1823, 3, 1808, 1809], 5)
		1825: SideEffectNoResult	constructor(csdb, [], 6)
		1826: InstOutput	constructor(side_effect, [1825], 7)
		1827: InstOutput	constructor(output, [1824], 8)
		1828: Type	extractor(value_type, 1807)
		1829: Option(Type)	extractor(fits_in_64, 1828)
		1830: Type	match_some(1829)
		1831: Reg	constructor(put_in_reg_zext64, [1807], 1)
		1832: ProducesFlags	constructor(cmp, [307, 1831, 1788], 3)
		1833: ValueRegs	constructor(lower_select, [1832, 316, 3, 1808, 1809], 4)
		1834: InstOutput	constructor(output, [1833], 5)
		1835: ValueRegs	constructor(put_in_regs, [1807], 1)
		1836: Reg	constructor(value_regs_get, [1835, 136], 2)
		1837: Reg	constructor(value_regs_get, [1835, 138], 3)
		1838: Reg	constructor(orr, [143, 1836, 1837], 4)
		1839: ProducesFlags	constructor(cmp, [307, 1838, 1333], 6)
		1840: ValueRegs	constructor(lower_select, [1839, 316, 3, 1808, 1809], 7)
		1841: InstOutput	constructor(output, [1840], 8)
		1842: Option(Constant)	extractor(vconst, 4)
		1843: Constant	match_some(1842)
		1844: Option(u128)	extractor(u128_from_constant, 1843)
		1845: u128	match_some(1844)
		1846: Reg	constructor(constant_f128, [1845], 1)
		1847: InstOutput	constructor(output_reg, [1846], 2)
		1848: Option(u64)	extractor(u64_from_constant, 1843)
		1849: u64	match_some(1848)
		1850: Option(Type)	constructor(ty_vec64, [3], 0)
		1851: Type	match_some(1850)
		1852: Reg	constructor(constant_f64, [1849], 1)
		1853: InstOutput	constructor(output_reg, [1852], 2)
		1854: Option(Value)	extractor(splat, 4)
		1855: Value	match_some(1854)
		1856: Type	extractor(value_type, 1855)
		1857: Option(Type)	constructor(ty_int_ref_scalar_64, [1856], 0)
		1858: Type	match_some(1857)
		1859: Reg	constructor(put_in_reg, [1855], 1)
		1860: Reg	constructor(vec_dup, [1859, 374], 3)
		1861: InstOutput	constructor(output_reg, [1860], 4)
		1862: Option(Type)	extractor(ty_scalar_float, 1856)
		1863: Type	match_some(1862)
		1864: Reg	constructor(vec_dup_from_fpu, [1859, 374, 305], 3)
		1865: InstOutput	constructor(output_reg, [1864], 4)
		1866: Option(Inst)	extractor(def_inst, 1855)
		1867: Inst	match_some(1866)
		1868: Option(Ieee32)	extractor(f32const, 1867)
		1869: Ieee32	match_some(1868)
		1870: u32	extractor(u32_from_ieee32, 1869)
		1871: u64	constructor(u32_as_u64, [1870], 0)
		1872: Reg	constructor(splat_const, [1871, 607], 2)
		1873: InstOutput	constructor(output_reg, [1872], 3)
		1874: Option(Ieee64)	extractor(f64const, 1867)
		1875: Ieee64	match_some(1874)
		1876: u64	extractor(u64_from_ieee64, 1875)
		1877: Reg	constructor(splat_const, [1876, 607], 2)
		1878: InstOutput	constructor(output_reg, [1877], 3)
		1879: Option(Imm64)	extractor(iconst, 1867)
		1880: Imm64	match_some(1879)
		1881: u64	extractor(u64_from_imm64, 1880)
		1882: Reg	constructor(splat_const, [1881, 607], 2)
		1883: InstOutput	constructor(output_reg, [1882], 3)
		1884: Option(Value)	extractor(ireduce, 1867)
		1885: Value	match_some(1884)
		1886: Option(Inst)	extractor(def_inst, 1885)
		1887: Inst	match_some(1886)
		1888: Option(Imm64)	extractor(iconst, 1887)
		1889: Imm64	match_some(1888)
		1890: u64	extractor(u64_from_imm64, 1889)
		1891: Reg	constructor(splat_const, [1890, 607], 2)
		1892: InstOutput	constructor(output_reg, [1891], 3)
		1893: Option((MemFlags, Value, Offset32))	extractor(load, 1867)
		1894: (MemFlags, Value, Offset32)	match_some(1893)
		1895: MemFlags	match_tuple(1894, 0)
		1896: Value	match_tuple(1894, 1)
		1897: Offset32	match_tuple(1894, 2)
		1898: Option(Inst)	constructor(is_sinkable_inst, [1855], 0)
		1899: Inst	match_some(1898)
		1900: Type	constructor(lane_type, [3], 0)
		1901: Reg	constructor(sink_load_into_addr, [1900, 1899], 1)
		1902: Reg	constructor(ld1r, [1901, 374, 1895], 3)
		1903: InstOutput	constructor(output_reg, [1902], 4)
		1904: Option(Type)	extractor(valid_atomic_transaction, 3)
		1905: Type	match_some(1904)
		1906: Option((MemFlags, Value))	extractor(atomic_load, 4)
		1907: (MemFlags, Value)	match_some(1906)
		1908: MemFlags	match_tuple(1907, 0)
		1909: Value	match_tuple(1907, 1)
		1910: Reg	constructor(put_in_reg, [1909], 1)
		1911: Reg	constructor(load_acquire, [1905, 1908, 1910], 2)
		1912: InstOutput	constructor(output_reg, [1911], 3)
		1913: Option((MemFlags, Value, Value))	extractor(atomic_store, 0)
		1914: (MemFlags, Value, Value)	match_some(1913)
		1915: MemFlags	match_tuple(1914, 0)
		1916: Value	match_tuple(1914, 1)
		1917: Value	match_tuple(1914, 2)
		1918: Type	extractor(value_type, 1916)
		1919: Option(Type)	extractor(valid_atomic_transaction, 1918)
		1920: Type	match_some(1919)
		1921: Reg	constructor(put_in_reg, [1916], 1)
		1922: Reg	constructor(put_in_reg, [1917], 2)
		1923: SideEffectNoResult	constructor(store_release, [1920, 1915, 1921, 1922], 3)
		1924: InstOutput	constructor(side_effect, [1923], 4)
		1925: Option(())	extractor(use_lse, 0)
		1926: ()	match_some(1925)
		1927: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 4)
		1928: (MemFlags, AtomicRmwOp, Value, Value)	match_some(1927)
		1929: MemFlags	match_tuple(1928, 0)
		1930: AtomicRmwOp	match_tuple(1928, 1)
		1931: Value	match_tuple(1928, 2)
		1932: Value	match_tuple(1928, 3)
		1933: AtomicRMWOp	make_variant(AtomicRMWOp::Add, [])
		1934: Reg	constructor(put_in_reg, [1932], 1)
		1935: Reg	constructor(lse_atomic_rmw, [1933, 1931, 1934, 1905, 1929], 2)
		1936: InstOutput	constructor(output_reg, [1935], 3)
		1937: AtomicRMWOp	make_variant(AtomicRMWOp::Eor, [])
		1938: Reg	constructor(lse_atomic_rmw, [1937, 1931, 1934, 1905, 1929], 2)
		1939: InstOutput	constructor(output_reg, [1938], 3)
		1940: AtomicRMWOp	make_variant(AtomicRMWOp::Set, [])
		1941: Reg	constructor(lse_atomic_rmw, [1940, 1931, 1934, 1905, 1929], 2)
		1942: InstOutput	constructor(output_reg, [1941], 3)
		1943: AtomicRMWOp	make_variant(AtomicRMWOp::Smax, [])
		1944: Reg	constructor(lse_atomic_rmw, [1943, 1931, 1934, 1905, 1929], 2)
		1945: InstOutput	constructor(output_reg, [1944], 3)
		1946: AtomicRMWOp	make_variant(AtomicRMWOp::Smin, [])
		1947: Reg	constructor(lse_atomic_rmw, [1946, 1931, 1934, 1905, 1929], 2)
		1948: InstOutput	constructor(output_reg, [1947], 3)
		1949: AtomicRMWOp	make_variant(AtomicRMWOp::Umax, [])
		1950: Reg	constructor(lse_atomic_rmw, [1949, 1931, 1934, 1905, 1929], 2)
		1951: InstOutput	constructor(output_reg, [1950], 3)
		1952: AtomicRMWOp	make_variant(AtomicRMWOp::Umin, [])
		1953: Reg	constructor(lse_atomic_rmw, [1952, 1931, 1934, 1905, 1929], 2)
		1954: InstOutput	constructor(output_reg, [1953], 3)
		1955: Reg	constructor(put_in_reg, [1932], 2)
		1956: Reg	constructor(sub, [1905, 814, 1955], 3)
		1957: Reg	constructor(lse_atomic_rmw, [1933, 1931, 1956, 1905, 1929], 4)
		1958: InstOutput	constructor(output_reg, [1957], 5)
		1959: AtomicRMWOp	make_variant(AtomicRMWOp::Clr, [])
		1960: Reg	constructor(eon, [1905, 1934, 1788], 3)
		1961: Reg	constructor(lse_atomic_rmw, [1959, 1931, 1960, 1905, 1929], 4)
		1962: InstOutput	constructor(output_reg, [1961], 5)
		1963: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Add, [])
		1964: Reg	constructor(put_in_reg, [1931], 1)
		1965: Reg	constructor(atomic_rmw_loop, [1963, 1964, 1955, 1905, 1929], 3)
		1966: InstOutput	constructor(output_reg, [1965], 4)
		1967: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Sub, [])
		1968: Reg	constructor(atomic_rmw_loop, [1967, 1964, 1955, 1905, 1929], 3)
		1969: InstOutput	constructor(output_reg, [1968], 4)
		1970: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::And, [])
		1971: Reg	constructor(atomic_rmw_loop, [1970, 1964, 1955, 1905, 1929], 3)
		1972: InstOutput	constructor(output_reg, [1971], 4)
		1973: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Nand, [])
		1974: Reg	constructor(atomic_rmw_loop, [1973, 1964, 1955, 1905, 1929], 3)
		1975: InstOutput	constructor(output_reg, [1974], 4)
		1976: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Orr, [])
		1977: Reg	constructor(atomic_rmw_loop, [1976, 1964, 1955, 1905, 1929], 3)
		1978: InstOutput	constructor(output_reg, [1977], 4)
		1979: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Eor, [])
		1980: Reg	constructor(atomic_rmw_loop, [1979, 1964, 1955, 1905, 1929], 3)
		1981: InstOutput	constructor(output_reg, [1980], 4)
		1982: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smin, [])
		1983: Reg	constructor(atomic_rmw_loop, [1982, 1964, 1955, 1905, 1929], 3)
		1984: InstOutput	constructor(output_reg, [1983], 4)
		1985: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smax, [])
		1986: Reg	constructor(atomic_rmw_loop, [1985, 1964, 1955, 1905, 1929], 3)
		1987: InstOutput	constructor(output_reg, [1986], 4)
		1988: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umin, [])
		1989: Reg	constructor(atomic_rmw_loop, [1988, 1964, 1955, 1905, 1929], 3)
		1990: InstOutput	constructor(output_reg, [1989], 4)
		1991: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umax, [])
		1992: Reg	constructor(atomic_rmw_loop, [1991, 1964, 1955, 1905, 1929], 3)
		1993: InstOutput	constructor(output_reg, [1992], 4)
		1994: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Xchg, [])
		1995: Reg	constructor(atomic_rmw_loop, [1994, 1964, 1955, 1905, 1929], 3)
		1996: InstOutput	constructor(output_reg, [1995], 4)
		1997: Option((MemFlags, Value, Value, Value))	extractor(atomic_cas, 4)
		1998: (MemFlags, Value, Value, Value)	match_some(1997)
		1999: MemFlags	match_tuple(1998, 0)
		2000: Value	match_tuple(1998, 1)
		2001: Value	match_tuple(1998, 2)
		2002: Value	match_tuple(1998, 3)
		2003: Reg	constructor(put_in_reg, [2000], 1)
		2004: Reg	constructor(put_in_reg, [2001], 2)
		2005: Reg	constructor(put_in_reg, [2002], 3)
		2006: Reg	constructor(lse_atomic_cas, [2003, 2004, 2005, 1905, 1999], 4)
		2007: InstOutput	constructor(output_reg, [2006], 5)
		2008: Reg	constructor(atomic_cas_loop, [2003, 2004, 2005, 1905, 1999], 4)
		2009: InstOutput	constructor(output_reg, [2008], 5)
		2010: Option(Value)	extractor(fvdemote, 0)
		2011: Value	match_some(2010)
		2012: Reg	constructor(put_in_reg, [2011], 1)
		2013: Reg	constructor(fcvtn, [2012, 273], 2)
		2014: InstOutput	constructor(output_reg, [2013], 3)
		2015: Option(Type)	extractor(ty_vec128_int, 3)
		2016: Type	match_some(2015)
		2017: Option((Value, Value))	extractor(snarrow, 4)
		2018: (Value, Value)	match_some(2017)
		2019: Value	match_tuple(2018, 0)
		2020: Value	match_tuple(2018, 1)
		2021: Option(Value)	constructor(zero_value, [2020], 0)
		2022: Value	match_some(2021)
		2023: Reg	constructor(put_in_reg, [2019], 1)
		2024: ScalarSize	constructor(lane_size, [2016], 2)
		2025: Reg	constructor(sqxtn, [2023, 2024], 3)
		2026: InstOutput	constructor(output_reg, [2025], 4)
		2027: Option(Type)	extractor(ty_vec64_int, 3)
		2028: Type	match_some(2027)
		2029: Reg	constructor(put_in_reg, [2020], 2)
		2030: Reg	constructor(mov_vec_elem, [2023, 2029, 407, 305, 171], 3)
		2031: ScalarSize	constructor(lane_size, [2028], 4)
		2032: Reg	constructor(sqxtn, [2030, 2031], 5)
		2033: InstOutput	constructor(output_reg, [2032], 6)
		2034: Reg	constructor(put_in_reg, [2020], 4)
		2035: ScalarSize	constructor(lane_size, [2016], 5)
		2036: Reg	constructor(sqxtn2, [2025, 2034, 2035], 6)
		2037: InstOutput	constructor(output_reg, [2036], 7)
		2038: Option((Value, Value))	extractor(unarrow, 4)
		2039: (Value, Value)	match_some(2038)
		2040: Value	match_tuple(2039, 0)
		2041: Value	match_tuple(2039, 1)
		2042: Option(Value)	constructor(zero_value, [2041], 0)
		2043: Value	match_some(2042)
		2044: Reg	constructor(put_in_reg, [2040], 1)
		2045: Reg	constructor(sqxtun, [2044, 2024], 3)
		2046: InstOutput	constructor(output_reg, [2045], 4)
		2047: Reg	constructor(put_in_reg, [2041], 2)
		2048: Reg	constructor(mov_vec_elem, [2044, 2047, 407, 305, 171], 3)
		2049: Reg	constructor(sqxtun, [2048, 2031], 5)
		2050: InstOutput	constructor(output_reg, [2049], 6)
		2051: Reg	constructor(put_in_reg, [2041], 4)
		2052: Reg	constructor(sqxtun2, [2045, 2051, 2035], 6)
		2053: InstOutput	constructor(output_reg, [2052], 7)
		2054: Option((Value, Value))	extractor(uunarrow, 4)
		2055: (Value, Value)	match_some(2054)
		2056: Value	match_tuple(2055, 0)
		2057: Value	match_tuple(2055, 1)
		2058: Option(Value)	constructor(zero_value, [2057], 0)
		2059: Value	match_some(2058)
		2060: Reg	constructor(put_in_reg, [2056], 1)
		2061: Reg	constructor(uqxtn, [2060, 2024], 3)
		2062: InstOutput	constructor(output_reg, [2061], 4)
		2063: Reg	constructor(put_in_reg, [2057], 2)
		2064: Reg	constructor(mov_vec_elem, [2060, 2063, 407, 305, 171], 3)
		2065: Reg	constructor(uqxtn, [2064, 2031], 5)
		2066: InstOutput	constructor(output_reg, [2065], 6)
		2067: Reg	constructor(put_in_reg, [2057], 4)
		2068: Reg	constructor(uqxtn2, [2061, 2067, 2035], 6)
		2069: InstOutput	constructor(output_reg, [2068], 7)
		2070: Option(Value)	extractor(swiden_low, 4)
		2071: Value	match_some(2070)
		2072: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		2073: Reg	constructor(put_in_reg, [2071], 1)
		2074: ScalarSize	constructor(lane_size, [3], 2)
		2075: Reg	constructor(vec_extend, [2072, 2073, 313, 2074], 3)
		2076: InstOutput	constructor(output_reg, [2075], 4)
		2077: Option(Value)	extractor(swiden_high, 4)
		2078: Value	match_some(2077)
		2079: Reg	constructor(put_in_reg, [2078], 1)
		2080: ScalarSize	constructor(lane_size, [778], 2)
		2081: Reg	constructor(vec_extend, [2072, 2079, 314, 2080], 3)
		2082: InstOutput	constructor(output_reg, [2081], 4)
		2083: VectorSize	make_variant(VectorSize::Size32x2, [])
		2084: Reg	constructor(fpu_move_from_vec, [2079, 407, 2083], 2)
		2085: ScalarSize	constructor(lane_size, [3], 3)
		2086: Reg	constructor(vec_extend, [2072, 2084, 313, 2085], 4)
		2087: InstOutput	constructor(output_reg, [2086], 5)
		2088: Option(Value)	extractor(uwiden_low, 4)
		2089: Value	match_some(2088)
		2090: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		2091: Reg	constructor(put_in_reg, [2089], 1)
		2092: Reg	constructor(vec_extend, [2090, 2091, 313, 2074], 3)
		2093: InstOutput	constructor(output_reg, [2092], 4)
		2094: Option(Value)	extractor(uwiden_high, 4)
		2095: Value	match_some(2094)
		2096: Reg	constructor(put_in_reg, [2095], 1)
		2097: Reg	constructor(vec_extend, [2090, 2096, 314, 2080], 3)
		2098: InstOutput	constructor(output_reg, [2097], 4)
		2099: Reg	constructor(fpu_move_from_vec, [2096, 407, 2083], 2)
		2100: Reg	constructor(vec_extend, [2090, 2099, 313, 2085], 4)
		2101: InstOutput	constructor(output_reg, [2100], 5)
		2102: Option(())	extractor(fence, 0)
		2103: ()	match_some(2102)
		2104: SideEffectNoResult	constructor(aarch64_fence, [], 1)
		2105: InstOutput	constructor(side_effect, [2104], 2)
		2106: Option(Value)	extractor(is_null, 0)
		2107: Value	match_some(2106)
		2108: Type	extractor(value_type, 2107)
		2109: OperandSize	constructor(operand_size, [2108], 1)
		2110: Reg	constructor(put_in_reg, [2107], 2)
		2111: Imm12	constructor(u8_into_imm12, [305], 3)
		2112: ProducesFlags	constructor(cmp_imm, [2109, 2110, 2111], 4)
		2113: ValueRegs	constructor(with_flags, [2112, 302], 6)
		2114: InstOutput	constructor(output, [2113], 7)
		2115: Option(Value)	extractor(is_invalid, 0)
		2116: Value	match_some(2115)
		2117: Type	extractor(value_type, 2116)
		2118: OperandSize	constructor(operand_size, [2117], 1)
		2119: Reg	constructor(put_in_reg, [2116], 2)
		2120: Imm12	constructor(u8_into_imm12, [407], 3)
		2121: ProducesFlags	constructor(cmn_imm, [2118, 2119, 2120], 4)
		2122: ValueRegs	constructor(with_flags, [2121, 302], 6)
		2123: InstOutput	constructor(output, [2122], 7)
		2124: Option(())	extractor(debugtrap, 0)
		2125: ()	match_some(2124)
		2126: SideEffectNoResult	constructor(brk, [], 1)
		2127: InstOutput	constructor(side_effect, [2126], 2)
		2128: Option(FuncRef)	extractor(func_addr, 0)
		2129: FuncRef	match_some(2128)
		2130: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 2129)
		2131: SigRef	match_tuple(2130, 0)
		2132: ExternalName	match_tuple(2130, 1)
		2133: RelocDistance	match_tuple(2130, 2)
		2134: BoxExternalName	constructor(box_external_name, [2132], 1)
		2135: i64	const_int(0, i64)
		2136: Reg	constructor(load_ext_name, [2134, 2135], 2)
		2137: InstOutput	constructor(output_reg, [2136], 3)
		2138: Option(GlobalValue)	extractor(symbol_value, 0)
		2139: GlobalValue	match_some(2138)
		2140: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 2139)
		2141: (ExternalName, RelocDistance, i64)	match_some(2140)
		2142: ExternalName	match_tuple(2141, 0)
		2143: RelocDistance	match_tuple(2141, 1)
		2144: i64	match_tuple(2141, 2)
		2145: BoxExternalName	constructor(box_external_name, [2142], 1)
		2146: Reg	constructor(load_ext_name, [2145, 2144], 2)
		2147: InstOutput	constructor(output_reg, [2146], 3)
		2148: Option(())	extractor(get_frame_pointer, 0)
		2149: ()	match_some(2148)
		2150: Reg	constructor(aarch64_fp, [], 1)
		2151: InstOutput	constructor(output_reg, [2150], 2)
		2152: Option(())	extractor(get_stack_pointer, 0)
		2153: ()	match_some(2152)
		2154: Reg	constructor(aarch64_sp, [], 1)
		2155: InstOutput	constructor(output_reg, [2154], 2)
		2156: Option(())	extractor(get_return_address, 0)
		2157: ()	match_some(2156)
		2158: Reg	constructor(aarch64_link, [], 1)
		2159: InstOutput	constructor(output_reg, [2158], 2)
		2160: Option((FuncRef, ValueSlice))	extractor(call, 0)
		2161: (FuncRef, ValueSlice)	match_some(2160)
		2162: FuncRef	match_tuple(2161, 0)
		2163: ValueSlice	match_tuple(2161, 1)
		2164: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 2162)
		2165: SigRef	match_tuple(2164, 0)
		2166: ExternalName	match_tuple(2164, 1)
		2167: RelocDistance	match_tuple(2164, 2)
		2168: InstOutput	constructor(gen_call, [2165, 2166, 2167, 2163], 1)
		2169: Option((SigRef, Value, ValueSlice))	extractor(call_indirect, 0)
		2170: (SigRef, Value, ValueSlice)	match_some(2169)
		2171: SigRef	match_tuple(2170, 0)
		2172: Value	match_tuple(2170, 1)
		2173: ValueSlice	match_tuple(2170, 2)
		2174: InstOutput	constructor(gen_call_indirect, [2171, 2172, 2173], 1)
		2175: Option(ValueSlice)	extractor(return, 0)
		2176: ValueSlice	match_some(2175)
		2177: InstOutput	constructor(lower_return, [2176], 1)
		2178: Option((FuncRef, ValueSlice))	extractor(return_call, 0)
		2179: (FuncRef, ValueSlice)	match_some(2178)
		2180: FuncRef	match_tuple(2179, 0)
		2181: ValueSlice	match_tuple(2179, 1)
		2182: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 2180)
		2183: SigRef	match_tuple(2182, 0)
		2184: ExternalName	match_tuple(2182, 1)
		2185: RelocDistance	match_tuple(2182, 2)
		2186: InstOutput	constructor(gen_return_call, [2183, 2184, 2185, 2181], 1)
		2187: Option((SigRef, Value, ValueSlice))	extractor(return_call_indirect, 0)
		2188: (SigRef, Value, ValueSlice)	match_some(2187)
		2189: SigRef	match_tuple(2188, 0)
		2190: Value	match_tuple(2188, 1)
		2191: ValueSlice	match_tuple(2188, 2)
		2192: InstOutput	constructor(gen_return_call_indirect, [2189, 2190, 2191], 1)
		2193: Option((MemFlags, Value, Offset32))	extractor(load, 4)
		2194: (MemFlags, Value, Offset32)	match_some(2193)
		2195: MemFlags	match_tuple(2194, 0)
		2196: Value	match_tuple(2194, 1)
		2197: Offset32	match_tuple(2194, 2)
		2198: i32	constructor(offset32_to_i32, [2197], 0)
		2199: AMode	constructor(amode, [1733, 2196, 2198], 1)
		2200: Reg	constructor(aarch64_uload8, [2199, 2195], 2)
		2201: InstOutput	constructor(output_reg, [2200], 3)
		2202: AMode	constructor(amode, [1572, 2196, 2198], 1)
		2203: Reg	constructor(aarch64_uload16, [2202, 2195], 2)
		2204: InstOutput	constructor(output_reg, [2203], 3)
		2205: AMode	constructor(amode, [1299, 2196, 2198], 1)
		2206: Reg	constructor(aarch64_uload32, [2205, 2195], 2)
		2207: InstOutput	constructor(output_reg, [2206], 3)
		2208: AMode	constructor(amode, [143, 2196, 2198], 1)
		2209: Reg	constructor(aarch64_uload64, [2208, 2195], 2)
		2210: InstOutput	constructor(output_reg, [2209], 3)
		2211: AMode	constructor(amode, [623, 2196, 2198], 1)
		2212: Reg	constructor(aarch64_fpuload32, [2211, 2195], 2)
		2213: InstOutput	constructor(output_reg, [2212], 3)
		2214: AMode	constructor(amode, [630, 2196, 2198], 1)
		2215: Reg	constructor(aarch64_fpuload64, [2214, 2195], 2)
		2216: InstOutput	constructor(output_reg, [2215], 3)
		2217: PairAMode	constructor(pair_amode, [2196, 2198], 1)
		2218: ValueRegs	constructor(aarch64_loadp64, [2217, 2195], 2)
		2219: InstOutput	constructor(output, [2218], 3)
		2220: Option(Type)	extractor(ty_vec64, 3)
		2221: Type	match_some(2220)
		2222: Type	const_prim(I8X16)
		2223: AMode	constructor(amode, [2222, 2196, 2198], 1)
		2224: Reg	constructor(aarch64_fpuload128, [2223, 2195], 2)
		2225: InstOutput	constructor(output_reg, [2224], 3)
		2226: Option(Type)	extractor(ty_dyn_vec64, 3)
		2227: Type	match_some(2226)
		2228: Option(Type)	extractor(ty_dyn_vec128, 3)
		2229: Type	match_some(2228)
		2230: Option((MemFlags, Value, Offset32))	extractor(uload8, 0)
		2231: (MemFlags, Value, Offset32)	match_some(2230)
		2232: MemFlags	match_tuple(2231, 0)
		2233: Value	match_tuple(2231, 1)
		2234: Offset32	match_tuple(2231, 2)
		2235: i32	constructor(offset32_to_i32, [2234], 0)
		2236: AMode	constructor(amode, [1733, 2233, 2235], 1)
		2237: Reg	constructor(aarch64_uload8, [2236, 2232], 2)
		2238: InstOutput	constructor(output_reg, [2237], 3)
		2239: Option((MemFlags, Value, Offset32))	extractor(sload8, 0)
		2240: (MemFlags, Value, Offset32)	match_some(2239)
		2241: MemFlags	match_tuple(2240, 0)
		2242: Value	match_tuple(2240, 1)
		2243: Offset32	match_tuple(2240, 2)
		2244: i32	constructor(offset32_to_i32, [2243], 0)
		2245: AMode	constructor(amode, [1733, 2242, 2244], 1)
		2246: Reg	constructor(aarch64_sload8, [2245, 2241], 2)
		2247: InstOutput	constructor(output_reg, [2246], 3)
		2248: Option((MemFlags, Value, Offset32))	extractor(uload16, 0)
		2249: (MemFlags, Value, Offset32)	match_some(2248)
		2250: MemFlags	match_tuple(2249, 0)
		2251: Value	match_tuple(2249, 1)
		2252: Offset32	match_tuple(2249, 2)
		2253: i32	constructor(offset32_to_i32, [2252], 0)
		2254: AMode	constructor(amode, [1572, 2251, 2253], 1)
		2255: Reg	constructor(aarch64_uload16, [2254, 2250], 2)
		2256: InstOutput	constructor(output_reg, [2255], 3)
		2257: Option((MemFlags, Value, Offset32))	extractor(sload16, 0)
		2258: (MemFlags, Value, Offset32)	match_some(2257)
		2259: MemFlags	match_tuple(2258, 0)
		2260: Value	match_tuple(2258, 1)
		2261: Offset32	match_tuple(2258, 2)
		2262: i32	constructor(offset32_to_i32, [2261], 0)
		2263: AMode	constructor(amode, [1572, 2260, 2262], 1)
		2264: Reg	constructor(aarch64_sload16, [2263, 2259], 2)
		2265: InstOutput	constructor(output_reg, [2264], 3)
		2266: Option((MemFlags, Value, Offset32))	extractor(uload32, 0)
		2267: (MemFlags, Value, Offset32)	match_some(2266)
		2268: MemFlags	match_tuple(2267, 0)
		2269: Value	match_tuple(2267, 1)
		2270: Offset32	match_tuple(2267, 2)
		2271: i32	constructor(offset32_to_i32, [2270], 0)
		2272: AMode	constructor(amode, [1299, 2269, 2271], 1)
		2273: Reg	constructor(aarch64_uload32, [2272, 2268], 2)
		2274: InstOutput	constructor(output_reg, [2273], 3)
		2275: Option((MemFlags, Value, Offset32))	extractor(sload32, 0)
		2276: (MemFlags, Value, Offset32)	match_some(2275)
		2277: MemFlags	match_tuple(2276, 0)
		2278: Value	match_tuple(2276, 1)
		2279: Offset32	match_tuple(2276, 2)
		2280: i32	constructor(offset32_to_i32, [2279], 0)
		2281: AMode	constructor(amode, [1299, 2278, 2280], 1)
		2282: Reg	constructor(aarch64_sload32, [2281, 2277], 2)
		2283: InstOutput	constructor(output_reg, [2282], 3)
		2284: Option((MemFlags, Value, Offset32))	extractor(sload8x8, 0)
		2285: (MemFlags, Value, Offset32)	match_some(2284)
		2286: MemFlags	match_tuple(2285, 0)
		2287: Value	match_tuple(2285, 1)
		2288: Offset32	match_tuple(2285, 2)
		2289: i32	constructor(offset32_to_i32, [2288], 0)
		2290: AMode	constructor(amode, [630, 2287, 2289], 1)
		2291: Reg	constructor(aarch64_fpuload64, [2290, 2286], 2)
		2292: ScalarSize	make_variant(ScalarSize::Size16, [])
		2293: Reg	constructor(vec_extend, [2072, 2291, 313, 2292], 3)
		2294: InstOutput	constructor(output_reg, [2293], 4)
		2295: Option((MemFlags, Value, Offset32))	extractor(uload8x8, 0)
		2296: (MemFlags, Value, Offset32)	match_some(2295)
		2297: MemFlags	match_tuple(2296, 0)
		2298: Value	match_tuple(2296, 1)
		2299: Offset32	match_tuple(2296, 2)
		2300: i32	constructor(offset32_to_i32, [2299], 0)
		2301: AMode	constructor(amode, [630, 2298, 2300], 1)
		2302: Reg	constructor(aarch64_fpuload64, [2301, 2297], 2)
		2303: Reg	constructor(vec_extend, [2090, 2302, 313, 2292], 3)
		2304: InstOutput	constructor(output_reg, [2303], 4)
		2305: Option((MemFlags, Value, Offset32))	extractor(sload16x4, 0)
		2306: (MemFlags, Value, Offset32)	match_some(2305)
		2307: MemFlags	match_tuple(2306, 0)
		2308: Value	match_tuple(2306, 1)
		2309: Offset32	match_tuple(2306, 2)
		2310: i32	constructor(offset32_to_i32, [2309], 0)
		2311: AMode	constructor(amode, [630, 2308, 2310], 1)
		2312: Reg	constructor(aarch64_fpuload64, [2311, 2307], 2)
		2313: Reg	constructor(vec_extend, [2072, 2312, 313, 273], 3)
		2314: InstOutput	constructor(output_reg, [2313], 4)
		2315: Option((MemFlags, Value, Offset32))	extractor(uload16x4, 0)
		2316: (MemFlags, Value, Offset32)	match_some(2315)
		2317: MemFlags	match_tuple(2316, 0)
		2318: Value	match_tuple(2316, 1)
		2319: Offset32	match_tuple(2316, 2)
		2320: i32	constructor(offset32_to_i32, [2319], 0)
		2321: AMode	constructor(amode, [630, 2318, 2320], 1)
		2322: Reg	constructor(aarch64_fpuload64, [2321, 2317], 2)
		2323: Reg	constructor(vec_extend, [2090, 2322, 313, 273], 3)
		2324: InstOutput	constructor(output_reg, [2323], 4)
		2325: Option((MemFlags, Value, Offset32))	extractor(sload32x2, 0)
		2326: (MemFlags, Value, Offset32)	match_some(2325)
		2327: MemFlags	match_tuple(2326, 0)
		2328: Value	match_tuple(2326, 1)
		2329: Offset32	match_tuple(2326, 2)
		2330: i32	constructor(offset32_to_i32, [2329], 0)
		2331: AMode	constructor(amode, [630, 2328, 2330], 1)
		2332: Reg	constructor(aarch64_fpuload64, [2331, 2327], 2)
		2333: Reg	constructor(vec_extend, [2072, 2332, 313, 276], 3)
		2334: InstOutput	constructor(output_reg, [2333], 4)
		2335: Option((MemFlags, Value, Offset32))	extractor(uload32x2, 0)
		2336: (MemFlags, Value, Offset32)	match_some(2335)
		2337: MemFlags	match_tuple(2336, 0)
		2338: Value	match_tuple(2336, 1)
		2339: Offset32	match_tuple(2336, 2)
		2340: i32	constructor(offset32_to_i32, [2339], 0)
		2341: AMode	constructor(amode, [630, 2338, 2340], 1)
		2342: Reg	constructor(aarch64_fpuload64, [2341, 2337], 2)
		2343: Reg	constructor(vec_extend, [2090, 2342, 313, 276], 3)
		2344: InstOutput	constructor(output_reg, [2343], 4)
		2345: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		2346: (MemFlags, Value, Value, Offset32)	match_some(2345)
		2347: MemFlags	match_tuple(2346, 0)
		2348: Value	match_tuple(2346, 1)
		2349: Value	match_tuple(2346, 2)
		2350: Offset32	match_tuple(2346, 3)
		2351: Type	extractor(value_type, 2348)
		2352: i32	constructor(offset32_to_i32, [2350], 0)
		2353: AMode	constructor(amode, [1733, 2349, 2352], 1)
		2354: Reg	constructor(put_in_reg, [2348], 2)
		2355: SideEffectNoResult	constructor(aarch64_store8, [2353, 2347, 2354], 3)
		2356: InstOutput	constructor(side_effect, [2355], 4)
		2357: AMode	constructor(amode, [1572, 2349, 2352], 1)
		2358: SideEffectNoResult	constructor(aarch64_store16, [2357, 2347, 2354], 3)
		2359: InstOutput	constructor(side_effect, [2358], 4)
		2360: AMode	constructor(amode, [1299, 2349, 2352], 1)
		2361: SideEffectNoResult	constructor(aarch64_store32, [2360, 2347, 2354], 3)
		2362: InstOutput	constructor(side_effect, [2361], 4)
		2363: AMode	constructor(amode, [143, 2349, 2352], 1)
		2364: SideEffectNoResult	constructor(aarch64_store64, [2363, 2347, 2354], 3)
		2365: InstOutput	constructor(side_effect, [2364], 4)
		2366: Option((MemFlags, Value, Value, Offset32))	extractor(istore8, 0)
		2367: (MemFlags, Value, Value, Offset32)	match_some(2366)
		2368: MemFlags	match_tuple(2367, 0)
		2369: Value	match_tuple(2367, 1)
		2370: Value	match_tuple(2367, 2)
		2371: Offset32	match_tuple(2367, 3)
		2372: i32	constructor(offset32_to_i32, [2371], 0)
		2373: AMode	constructor(amode, [1733, 2370, 2372], 1)
		2374: Reg	constructor(put_in_reg, [2369], 2)
		2375: SideEffectNoResult	constructor(aarch64_store8, [2373, 2368, 2374], 3)
		2376: InstOutput	constructor(side_effect, [2375], 4)
		2377: Option((MemFlags, Value, Value, Offset32))	extractor(istore16, 0)
		2378: (MemFlags, Value, Value, Offset32)	match_some(2377)
		2379: MemFlags	match_tuple(2378, 0)
		2380: Value	match_tuple(2378, 1)
		2381: Value	match_tuple(2378, 2)
		2382: Offset32	match_tuple(2378, 3)
		2383: i32	constructor(offset32_to_i32, [2382], 0)
		2384: AMode	constructor(amode, [1572, 2381, 2383], 1)
		2385: Reg	constructor(put_in_reg, [2380], 2)
		2386: SideEffectNoResult	constructor(aarch64_store16, [2384, 2379, 2385], 3)
		2387: InstOutput	constructor(side_effect, [2386], 4)
		2388: Option((MemFlags, Value, Value, Offset32))	extractor(istore32, 0)
		2389: (MemFlags, Value, Value, Offset32)	match_some(2388)
		2390: MemFlags	match_tuple(2389, 0)
		2391: Value	match_tuple(2389, 1)
		2392: Value	match_tuple(2389, 2)
		2393: Offset32	match_tuple(2389, 3)
		2394: i32	constructor(offset32_to_i32, [2393], 0)
		2395: AMode	constructor(amode, [1299, 2392, 2394], 1)
		2396: Reg	constructor(put_in_reg, [2391], 2)
		2397: SideEffectNoResult	constructor(aarch64_store32, [2395, 2390, 2396], 3)
		2398: InstOutput	constructor(side_effect, [2397], 4)
		2399: AMode	constructor(amode, [623, 2349, 2352], 1)
		2400: SideEffectNoResult	constructor(aarch64_fpustore32, [2399, 2347, 2354], 3)
		2401: InstOutput	constructor(side_effect, [2400], 4)
		2402: AMode	constructor(amode, [630, 2349, 2352], 1)
		2403: SideEffectNoResult	constructor(aarch64_fpustore64, [2402, 2347, 2354], 3)
		2404: InstOutput	constructor(side_effect, [2403], 4)
		2405: PairAMode	constructor(pair_amode, [2349, 2352], 1)
		2406: ValueRegs	constructor(put_in_regs, [2348], 2)
		2407: Reg	constructor(value_regs_get, [2406, 136], 3)
		2408: ValueRegs	constructor(put_in_regs, [2348], 4)
		2409: Reg	constructor(value_regs_get, [2408, 138], 5)
		2410: SideEffectNoResult	constructor(aarch64_storep64, [2405, 2347, 2407, 2409], 6)
		2411: InstOutput	constructor(side_effect, [2410], 7)
		2412: Option(Type)	extractor(ty_vec64, 2351)
		2413: Type	match_some(2412)
		2414: Option(Type)	extractor(ty_vec128, 2351)
		2415: Type	match_some(2414)
		2416: AMode	constructor(amode, [2222, 2349, 2352], 1)
		2417: SideEffectNoResult	constructor(aarch64_fpustore128, [2416, 2347, 2354], 3)
		2418: InstOutput	constructor(side_effect, [2417], 4)
		2419: Option(Type)	extractor(ty_dyn_vec64, 2351)
		2420: Type	match_some(2419)
		2421: Option(Type)	extractor(ty_dyn_vec128, 2351)
		2422: Type	match_some(2421)
		2423: Option(())	extractor(get_pinned_reg, 0)
		2424: ()	match_some(2423)
		2425: PReg	constructor(preg_pinned, [], 1)
		2426: Reg	constructor(mov_from_preg, [2425], 2)
		2427: InstOutput	constructor(output_reg, [2426], 3)
		2428: Option(Value)	extractor(set_pinned_reg, 0)
		2429: Value	match_some(2428)
		2430: Reg	constructor(put_in_reg, [2429], 1)
		2431: SideEffectNoResult	constructor(write_pinned_reg, [2430], 2)
		2432: InstOutput	constructor(side_effect, [2431], 3)
		2433: Option(Type)	extractor(ty_float_or_vec, 3)
		2434: Type	match_some(2433)
		2435: Option((MemFlags, Value))	extractor(bitcast, 4)
		2436: (MemFlags, Value)	match_some(2435)
		2437: MemFlags	match_tuple(2436, 0)
		2438: Value	match_tuple(2436, 1)
		2439: Type	extractor(value_type, 2438)
		2440: Option(Type)	extractor(ty_float_or_vec, 2439)
		2441: Type	match_some(2440)
		2442: InstOutput	constructor(output_value, [2438], 1)
		2443: Option(Type)	constructor(ty_int_ref_scalar_64, [2439], 0)
		2444: Type	match_some(2443)
		2445: Reg	constructor(put_in_reg, [2438], 1)
		2446: ScalarSize	constructor(scalar_size, [2439], 2)
		2447: Reg	constructor(mov_to_fpu, [2445, 2446], 3)
		2448: InstOutput	constructor(output_reg, [2447], 4)
		2449: Option(Type)	extractor(fits_in_64, 2439)
		2450: Type	match_some(2449)
		2451: Option(Type)	extractor(ty_float_or_vec, 2450)
		2452: Type	match_some(2451)
		2453: ScalarSize	constructor(scalar_size, [3], 2)
		2454: Reg	constructor(mov_from_vec, [2445, 305, 2453], 3)
		2455: InstOutput	constructor(output_reg, [2454], 4)
		2456: bool	constructor(is_ref_type, [2439], 0)
		2457: bool	constructor(is_ref_type, [3], 0)
		2458: Reg	constructor(copy_reg, [3, 2445], 2)
		2459: InstOutput	constructor(output_reg, [2458], 3)
		2460: Reg	constructor(copy_reg, [2439, 2445], 2)
		2461: InstOutput	constructor(output_reg, [2460], 3)
		2462: Option((Value, Uimm8))	extractor(extractlane, 4)
		2463: (Value, Uimm8)	match_some(2462)
		2464: Value	match_tuple(2463, 0)
		2465: Uimm8	match_tuple(2463, 1)
		2466: u8	extractor(u8_from_uimm8, 2465)
		2467: InstOutput	constructor(output_value, [2464], 1)
		2468: Reg	constructor(put_in_reg, [2464], 1)
		2469: ScalarSize	constructor(scalar_size, [994], 2)
		2470: Reg	constructor(mov_from_vec, [2468, 2466, 2469], 3)
		2471: InstOutput	constructor(output_reg, [2470], 4)
		2472: Type	extractor(value_type, 2464)
		2473: VectorSize	constructor(vector_size, [2472], 2)
		2474: Reg	constructor(fpu_move_from_vec, [2468, 2466, 2473], 3)
		2475: InstOutput	constructor(output_reg, [2474], 4)
		2476: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		2477: (Value, Value, Uimm8)	match_some(2476)
		2478: Value	match_tuple(2477, 0)
		2479: Value	match_tuple(2477, 1)
		2480: Uimm8	match_tuple(2477, 2)
		2481: Type	extractor(value_type, 2478)
		2482: Type	extractor(value_type, 2479)
		2483: Option(Type)	extractor(ty_int, 2482)
		2484: Type	match_some(2483)
		2485: u8	extractor(u8_from_uimm8, 2480)
		2486: Reg	constructor(put_in_reg, [2478], 1)
		2487: Reg	constructor(put_in_reg, [2479], 2)
		2488: VectorSize	constructor(vector_size, [2481], 3)
		2489: Reg	constructor(mov_to_vec, [2486, 2487, 2485, 2488], 4)
		2490: InstOutput	constructor(output_reg, [2489], 5)
		2491: Option(Type)	extractor(ty_scalar_float, 2482)
		2492: Type	match_some(2491)
		2493: Reg	constructor(mov_vec_elem, [2486, 2487, 2485, 305, 2488], 4)
		2494: InstOutput	constructor(output_reg, [2493], 5)
		2495: Option((StackSlot, Offset32))	extractor(stack_addr, 0)
		2496: (StackSlot, Offset32)	match_some(2495)
		2497: StackSlot	match_tuple(2496, 0)
		2498: Offset32	match_tuple(2496, 1)
		2499: Reg	constructor(compute_stack_addr, [2497, 2498], 1)
		2500: InstOutput	constructor(output_reg, [2499], 2)
		2501: Option(Value)	extractor(vhigh_bits, 0)
		2502: Value	match_some(2501)
		2503: Type	extractor(value_type, 2502)
		2504: Reg	constructor(put_in_reg, [2502], 1)
		2505: u8	const_int(7, u8)
		2506: Reg	constructor(sshr_vec_imm, [2504, 2505, 156], 2)
		2507: u128	const_int(-169808226154284360427508033573982305791, u128)
		2508: Reg	constructor(constant_f128, [2507], 3)
		2509: Reg	constructor(and_vec, [2506, 2508, 156], 4)
		2510: u8	const_int(8, u8)
		2511: Reg	constructor(vec_extract, [2509, 2509, 2510], 5)
		2512: Reg	constructor(zip1, [2509, 2511, 156], 6)
		2513: Reg	constructor(addv, [2512, 161], 7)
		2514: Reg	constructor(mov_from_vec, [2513, 305, 2292], 8)
		2515: InstOutput	constructor(output_reg, [2514], 9)
		2516: u8	const_int(15, u8)
		2517: Reg	constructor(sshr_vec_imm, [2504, 2516, 161], 2)
		2518: u128	const_int(664619068533544770747334646890102785, u128)
		2519: Reg	constructor(constant_f128, [2518], 3)
		2520: Reg	constructor(and_vec, [2517, 2519, 161], 4)
		2521: Reg	constructor(addv, [2520, 161], 5)
		2522: Reg	constructor(mov_from_vec, [2521, 305, 2292], 6)
		2523: InstOutput	constructor(output_reg, [2522], 7)
		2524: u8	const_int(31, u8)
		2525: Reg	constructor(sshr_vec_imm, [2504, 2524, 166], 2)
		2526: u128	const_int(633825300187901677051779743745, u128)
		2527: Reg	constructor(constant_f128, [2526], 3)
		2528: Reg	constructor(and_vec, [2525, 2527, 166], 4)
		2529: Reg	constructor(addv, [2528, 166], 5)
		2530: Reg	constructor(mov_from_vec, [2529, 305, 273], 6)
		2531: InstOutput	constructor(output_reg, [2530], 7)
		2532: Reg	constructor(mov_from_vec, [2504, 407, 276], 2)
		2533: Reg	constructor(put_in_reg, [2502], 3)
		2534: Reg	constructor(mov_from_vec, [2533, 305, 276], 4)
		2535: Reg	constructor(lsr_imm, [143, 2532, 1137], 6)
		2536: Reg	constructor(lsr_imm, [143, 2534, 1555], 8)
		2537: Option(ShiftOpAndAmt)	constructor(lshl_from_u64, [143, 400], 0)
		2538: ShiftOpAndAmt	match_some(2537)
		2539: Reg	constructor(add_shift, [143, 2536, 2535, 2538], 9)
		2540: InstOutput	constructor(output_reg, [2539], 10)
		2541: Option((Value, Value, TrapCode))	extractor(uadd_overflow_trap, 4)
		2542: (Value, Value, TrapCode)	match_some(2541)
		2543: Value	match_tuple(2542, 0)
		2544: Value	match_tuple(2542, 1)
		2545: TrapCode	match_tuple(2542, 2)
		2546: Reg	constructor(put_in_reg, [2543], 1)
		2547: Reg	constructor(put_in_reg, [2544], 2)
		2548: ProducesFlags	constructor(add_with_flags_paired, [31, 2546, 2547], 3)
		2549: Reg	constructor(trap_if_overflow, [2548, 2545], 4)
		2550: InstOutput	constructor(output_reg, [2549], 5)
		2551: Option((Value, Value))	extractor(uadd_overflow, 4)
		2552: (Value, Value)	match_some(2551)
		2553: Value	match_tuple(2552, 0)
		2554: Value	match_tuple(2552, 1)
		2555: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		2556: ALUOp	make_variant(ALUOp::Add, [])
		2557: InstOutput	constructor(overflow_op_small, [1383, 2553, 2554, 2555, 2556], 1)
		2558: Option(Type)	extractor(ty_32_or_64, 3)
		2559: Type	match_some(2558)
		2560: ALUOp	make_variant(ALUOp::AddS, [])
		2561: Cond	make_variant(Cond::Hs, [])
		2562: InstOutput	constructor(overflow_op_normal, [2559, 2553, 2554, 2560, 2561], 1)
		2563: ALUOp	make_variant(ALUOp::AdcS, [])
		2564: InstOutput	constructor(overflow_op_128, [2553, 2554, 2560, 2563, 2561], 1)
		2565: Option((Value, Value))	extractor(sadd_overflow, 4)
		2566: (Value, Value)	match_some(2565)
		2567: Value	match_tuple(2566, 0)
		2568: Value	match_tuple(2566, 1)
		2569: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		2570: InstOutput	constructor(overflow_op_small, [1383, 2567, 2568, 2569, 2556], 1)
		2571: Cond	make_variant(Cond::Vs, [])
		2572: InstOutput	constructor(overflow_op_normal, [2559, 2567, 2568, 2560, 2571], 1)
		2573: InstOutput	constructor(overflow_op_128, [2567, 2568, 2560, 2563, 2571], 1)
		2574: Option((Value, Value))	extractor(usub_overflow, 4)
		2575: (Value, Value)	match_some(2574)
		2576: Value	match_tuple(2575, 0)
		2577: Value	match_tuple(2575, 1)
		2578: ALUOp	make_variant(ALUOp::Sub, [])
		2579: InstOutput	constructor(overflow_op_small, [1383, 2576, 2577, 2555, 2578], 1)
		2580: ALUOp	make_variant(ALUOp::SubS, [])
		2581: InstOutput	constructor(overflow_op_normal, [2559, 2576, 2577, 2580, 999], 1)
		2582: ALUOp	make_variant(ALUOp::SbcS, [])
		2583: InstOutput	constructor(overflow_op_128, [2576, 2577, 2580, 2582, 999], 1)
		2584: Option((Value, Value))	extractor(ssub_overflow, 4)
		2585: (Value, Value)	match_some(2584)
		2586: Value	match_tuple(2585, 0)
		2587: Value	match_tuple(2585, 1)
		2588: InstOutput	constructor(overflow_op_small, [1383, 2586, 2587, 2569, 2578], 1)
		2589: InstOutput	constructor(overflow_op_normal, [2559, 2586, 2587, 2580, 2571], 1)
		2590: InstOutput	constructor(overflow_op_128, [2586, 2587, 2580, 2582, 2571], 1)
		2591: Option((Value, Value))	extractor(umul_overflow, 4)
		2592: (Value, Value)	match_some(2591)
		2593: Value	match_tuple(2592, 0)
		2594: Value	match_tuple(2592, 1)
		2595: ExtendOp	constructor(lower_extend_op, [1383, 2555], 1)
		2596: Reg	constructor(put_in_reg_zext32, [2593], 2)
		2597: Reg	constructor(put_in_reg_zext32, [2594], 3)
		2598: Reg	constructor(madd, [1383, 2596, 2597, 1169], 5)
		2599: ProducesFlags	constructor(cmp_extend, [311, 2598, 2598, 2595], 6)
		2600: ConsumesFlags	constructor(cset, [316], 7)
		2601: Reg	constructor(with_flags_reg, [2599, 2600], 8)
		2602: ValueRegs	constructor(value_reg, [2598], 9)
		2603: ValueRegs	constructor(value_reg, [2601], 10)
		2604: InstOutput	constructor(output_pair, [2602, 2603], 11)
		2605: Reg	constructor(put_in_reg, [2593], 1)
		2606: Reg	constructor(put_in_reg, [2594], 2)
		2607: Reg	constructor(umaddl, [2605, 2606, 308], 4)
		2608: ExtendOp	make_variant(ExtendOp::UXTW, [])
		2609: ProducesFlags	constructor(cmp_extend, [307, 2607, 2607, 2608], 5)
		2610: ConsumesFlags	constructor(cset, [316], 6)
		2611: Reg	constructor(with_flags_reg, [2609, 2610], 7)
		2612: ValueRegs	constructor(value_reg, [2607], 8)
		2613: ValueRegs	constructor(value_reg, [2611], 9)
		2614: InstOutput	constructor(output_pair, [2612, 2613], 10)
		2615: Reg	constructor(madd, [143, 2605, 2606, 308], 4)
		2616: Reg	constructor(put_in_reg, [2593], 5)
		2617: Reg	constructor(put_in_reg, [2594], 6)
		2618: Reg	constructor(umulh, [143, 2616, 2617], 7)
		2619: Imm12	constructor(u8_into_imm12, [305], 8)
		2620: ProducesFlags	constructor(cmp64_imm, [2618, 2619], 9)
		2621: ConsumesFlags	constructor(cset, [316], 10)
		2622: Reg	constructor(with_flags_reg, [2620, 2621], 11)
		2623: ValueRegs	constructor(value_reg, [2615], 12)
		2624: ValueRegs	constructor(value_reg, [2622], 13)
		2625: InstOutput	constructor(output_pair, [2623, 2624], 14)
		2626: Option((Value, Value))	extractor(smul_overflow, 4)
		2627: (Value, Value)	match_some(2626)
		2628: Value	match_tuple(2627, 0)
		2629: Value	match_tuple(2627, 1)
		2630: ExtendOp	constructor(lower_extend_op, [1383, 2569], 1)
		2631: Reg	constructor(put_in_reg_sext32, [2628], 2)
		2632: Reg	constructor(put_in_reg_sext32, [2629], 3)
		2633: Reg	constructor(madd, [1383, 2631, 2632, 1169], 5)
		2634: ProducesFlags	constructor(cmp_extend, [311, 2633, 2633, 2630], 6)
		2635: Reg	constructor(with_flags_reg, [2634, 2600], 8)
		2636: ValueRegs	constructor(value_reg, [2633], 9)
		2637: ValueRegs	constructor(value_reg, [2635], 10)
		2638: InstOutput	constructor(output_pair, [2636, 2637], 11)
		2639: Reg	constructor(put_in_reg, [2628], 1)
		2640: Reg	constructor(put_in_reg, [2629], 2)
		2641: Reg	constructor(smaddl, [2639, 2640, 308], 4)
		2642: ExtendOp	make_variant(ExtendOp::SXTW, [])
		2643: ProducesFlags	constructor(cmp_extend, [307, 2641, 2641, 2642], 5)
		2644: Reg	constructor(with_flags_reg, [2643, 2610], 7)
		2645: ValueRegs	constructor(value_reg, [2641], 8)
		2646: ValueRegs	constructor(value_reg, [2644], 9)
		2647: InstOutput	constructor(output_pair, [2645, 2646], 10)
		2648: Reg	constructor(madd, [143, 2639, 2640, 308], 4)
		2649: Reg	constructor(put_in_reg, [2628], 5)
		2650: Reg	constructor(put_in_reg, [2629], 6)
		2651: Reg	constructor(smulh, [143, 2649, 2650], 7)
		2652: u64	const_int(63, u64)
		2653: ProducesFlags	constructor(cmp_rr_shift_asr, [307, 2651, 2648, 2652], 8)
		2654: ConsumesFlags	constructor(cset, [316], 9)
		2655: Reg	constructor(with_flags_reg, [2653, 2654], 10)
		2656: ValueRegs	constructor(value_reg, [2648], 11)
		2657: ValueRegs	constructor(value_reg, [2655], 12)
		2658: InstOutput	constructor(output_pair, [2656, 2657], 13)
		2659: TlsModel	extractor(tls_model, 3)
		2660: Option(GlobalValue)	extractor(tls_value, 4)
		2661: GlobalValue	match_some(2660)
		2662: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 2661)
		2663: (ExternalName, RelocDistance, i64)	match_some(2662)
		2664: ExternalName	match_tuple(2663, 0)
		2665: RelocDistance	match_tuple(2663, 1)
		2666: i64	match_tuple(2663, 2)
		2667: Reg	constructor(elf_tls_get_addr, [2664], 1)
		2668: InstOutput	constructor(output_reg, [2667], 2)
		2669: Reg	constructor(macho_tls_get_addr, [2664], 1)
		2670: InstOutput	constructor(output_reg, [2669], 2)
		2671: Option(Value)	extractor(fvpromote_low, 0)
		2672: Value	match_some(2671)
		2673: VecRRLongOp	make_variant(VecRRLongOp::Fcvtl32, [])
		2674: Reg	constructor(put_in_reg, [2672], 1)
		2675: Reg	constructor(vec_rr_long, [2673, 2674, 313], 2)
		2676: InstOutput	constructor(output_reg, [2675], 3)
		2677: Option((u32, u32))	extractor(dynamic_lane, 3)
		2678: (u32, u32)	match_some(2677)
		2679: u32	match_tuple(2678, 0)
		2680: u32	match_tuple(2678, 1)
		2681: ValueRegs	constructor(value_reg, [133], 5)
		2682: InstOutput	constructor(output, [2681], 6)
		2683: ValueRegs	constructor(value_reg, [771], 5)
		2684: InstOutput	constructor(output, [2683], 6)
		2685: Option((u32, u32))	extractor(dynamic_lane, 415)
		2686: (u32, u32)	match_some(2685)
		2687: u32	match_tuple(2686, 0)
		2688: u32	match_tuple(2686, 1)
		2689: VecALUOp	make_variant(VecALUOp::Mul, [])
		2690: Reg	constructor(vec_rrr, [2689, 830, 831, 419], 4)
		2691: ValueRegs	constructor(value_reg, [2690], 5)
		2692: InstOutput	constructor(output, [2691], 6)
		2693: ValueRegs	constructor(value_reg, [438], 5)
		2694: InstOutput	constructor(output, [2693], 6)
		2695: ValueRegs	constructor(value_reg, [453], 5)
		2696: InstOutput	constructor(output, [2695], 6)
		2697: ValueRegs	constructor(value_reg, [465], 5)
		2698: InstOutput	constructor(output, [2697], 6)
		2699: ValueRegs	constructor(value_reg, [477], 5)
		2700: InstOutput	constructor(output, [2699], 6)
		2701: ValueRegs	constructor(value_reg, [489], 5)
		2702: InstOutput	constructor(output, [2701], 6)
		2703: ValueRegs	constructor(value_reg, [501], 5)
		2704: InstOutput	constructor(output, [2703], 6)
		2705: Option(Type)	extractor(ty_dyn128_int, 3)
		2706: Type	match_some(2705)
		2707: ScalarSize	constructor(lane_size, [2706], 2)
		2708: Reg	constructor(sqxtn, [2023, 2707], 3)
		2709: InstOutput	constructor(output_reg, [2708], 4)
		2710: Option(Type)	extractor(ty_dyn64_int, 3)
		2711: Type	match_some(2710)
		2712: ScalarSize	constructor(lane_size, [2711], 4)
		2713: Reg	constructor(sqxtn, [2030, 2712], 5)
		2714: InstOutput	constructor(output_reg, [2713], 6)
		2715: ScalarSize	constructor(lane_size, [2706], 5)
		2716: Reg	constructor(sqxtn2, [2708, 2034, 2715], 6)
		2717: InstOutput	constructor(output_reg, [2716], 7)
		2718: Reg	constructor(sqxtun, [2044, 2707], 3)
		2719: InstOutput	constructor(output_reg, [2718], 4)
		2720: Reg	constructor(sqxtun, [2048, 2712], 5)
		2721: InstOutput	constructor(output_reg, [2720], 6)
		2722: Reg	constructor(sqxtun2, [2718, 2051, 2715], 6)
		2723: InstOutput	constructor(output_reg, [2722], 7)
		2724: Reg	constructor(uqxtn, [2060, 2707], 3)
		2725: InstOutput	constructor(output_reg, [2724], 4)
		2726: Reg	constructor(uqxtn, [2064, 2712], 5)
		2727: InstOutput	constructor(output_reg, [2726], 6)
		2728: Reg	constructor(uqxtn2, [2724, 2067, 2715], 6)
		2729: InstOutput	constructor(output_reg, [2728], 7)
		2730: Option(DynamicStackSlot)	extractor(dynamic_stack_addr, 0)
		2731: DynamicStackSlot	match_some(2730)
		2732: WritableReg	constructor(temp_writable_reg, [143], 1)
		2733: MInst	constructor(abi_dynamic_stackslot_addr, [2732, 2731], 2)
		2734: Unit	constructor(emit, [2733], 3)
		2735: Reg	constructor(writable_reg_to_reg, [2732], 0)
		2736: ValueRegs	constructor(value_reg, [2735], 4)
		2737: InstOutput	constructor(output, [2736], 5)
		2738: Option((Value, Uimm8))	extractor(extract_vector, 0)
		2739: (Value, Uimm8)	match_some(2738)
		2740: Value	match_tuple(2739, 0)
		2741: Uimm8	match_tuple(2739, 1)
		2742: Reg	constructor(put_in_reg, [2740], 1)
		2743: ValueRegs	constructor(value_reg, [2742], 2)
		2744: InstOutput	constructor(output, [2743], 3)
		2745: Reg	constructor(vec_extend, [2072, 2079, 314, 2074], 3)
		2746: InstOutput	constructor(output_reg, [2745], 4)
		2747: Reg	constructor(vec_extend, [2090, 2096, 314, 2074], 3)
		2748: InstOutput	constructor(output_reg, [2747], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 19
			constraints = [
				1:	some
				5:	some
			]
			prio = 0
			result = 10
			impure = [9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 24
			constraints = [
				1:	some
				11:	some
			]
			prio = 0
			result = 15
			impure = [14, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 29
			constraints = [
				16:	some
			]
			prio = 0
			result = 20
			impure = [19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 34
			constraints = [
				21:	some
			]
			prio = 0
			result = 25
			impure = [24, 25]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 39
			constraints = [
				26:	some
			]
			prio = 0
			result = 29
			impure = [28, 29]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 47
			constraints = [
				1:	some
				30:	some
				32:	some
			]
			prio = -1
			result = 39
			impure = [36, 37, 38, 39]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 51
			constraints = [
				1:	some
				30:	some
				32:	some
				40:	some
			]
			prio = 4
			result = 43
			impure = [36, 42, 43]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 54
			constraints = [
				1:	some
				30:	some
				32:	some
				44:	some
			]
			prio = 5
			result = 48
			impure = [46, 47, 48]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 59
			constraints = [
				1:	some
				30:	some
				32:	some
				49:	some
			]
			prio = 2
			result = 52
			impure = [36, 51, 52]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 63
			constraints = [
				1:	some
				30:	some
				32:	some
				53:	some
			]
			prio = 3
			result = 56
			impure = [46, 55, 56]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 69
			constraints = [
				1:	some
				30:	some
				32:	some
				57:	some
			]
			prio = 0
			result = 60
			impure = [36, 59, 60]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 72
			constraints = [
				1:	some
				30:	some
				32:	some
				61:	some
			]
			prio = 1
			result = 64
			impure = [46, 63, 64]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 77
			constraints = [
				1:	some
				30:	some
				32:	some
				65:	some
				67:	some
				71:	some
				73:	some
				75:	some
			]
			prio = 7
			result = 79
			impure = [36, 77, 78, 79]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 82
			constraints = [
				1:	some
				30:	some
				32:	some
				80:	some
				82:	some
				86:	some
				88:	some
				90:	some
			]
			prio = 6
			result = 94
			impure = [46, 92, 93, 94]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 88
			constraints = [
				1:	some
				30:	some
				32:	some
				65:	some
				95:	some
			]
			prio = 7
			result = 103
			impure = [99, 100, 101, 102, 103]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 91
			constraints = [
				1:	some
				30:	some
				32:	some
				80:	some
				104:	some
			]
			prio = 6
			result = 112
			impure = [108, 109, 110, 111, 112]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 95
			constraints = [
				1:	some
				30:	some
				113:	some
				117:	some
				119:	some
			]
			prio = 0
			result = 127
			impure = [123, 124, 125, 126, 127]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 100
			constraints = [
				1:	some
				32:	some
				128:	some
			]
			prio = -2
			result = 134
			impure = [36, 37, 132, 133, 134]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 104
			constraints = [
				1:	some
				3:	const_prim(I128)
				32:	some
			]
			prio = -3
			result = 147
			impure = [135, 137, 139, 140, 141, 142, 144, 145, 146, 147]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 127
			constraints = [
				148:	some
				153:	some
			]
			prio = 6
			result = 158
			impure = [155, 157, 158]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 129
			constraints = [
				148:	some
				159:	some
			]
			prio = 5
			result = 163
			impure = [155, 162, 163]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 131
			constraints = [
				148:	some
				164:	some
			]
			prio = 4
			result = 168
			impure = [155, 167, 168]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 133
			constraints = [
				148:	some
				169:	some
			]
			prio = 3
			result = 173
			impure = [155, 172, 173]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 152
			constraints = [
				148:	some
				174:	some
			]
			prio = 2
			result = 178
			impure = [155, 176, 177, 178]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 165
			constraints = [
				148:	some
				179:	some
				180:	const_int(40022753436544980677706866553451184640)
			]
			prio = 1
			result = 182
			impure = [155, 176, 181, 182]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 167
			constraints = [
				148:	some
				179:	some
				180:	const_int(41357194091136896220700492464948314881)
			]
			prio = 1
			result = 184
			impure = [155, 176, 183, 184]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 169
			constraints = [
				148:	some
				179:	some
				180:	const_int(38693505158040971420872748913983226112)
			]
			prio = 1
			result = 186
			impure = [155, 176, 185, 186]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 171
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362386467224802506860000736977486594)
			]
			prio = 1
			result = 188
			impure = [155, 176, 187, 188]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 173
			constraints = [
				148:	some
				179:	some
				180:	const_int(36024664572132682148381476266902159616)
			]
			prio = 1
			result = 190
			impure = [155, 176, 189, 190]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 175
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362427190500344320355979912890680580)
			]
			prio = 1
			result = 192
			impure = [155, 176, 191, 192]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 177
			constraints = [
				148:	some
				179:	some
				180:	const_int(30686901955007814682223719185998020864)
			]
			prio = 1
			result = 194
			impure = [155, 176, 193, 194]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 179
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362427191743139026172726477975062792)
			]
			prio = 1
			result = 196
			impure = [155, 176, 195, 196]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 184
			constraints = [
				148:	some
				179:	some
				180:	const_int(30609036675948388650355540050116153344)
			]
			prio = 1
			result = 198
			impure = [155, 176, 197, 198]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 186
			constraints = [
				148:	some
				179:	some
				180:	const_int(41284561912683712994304547342093195272)
			]
			prio = 1
			result = 200
			impure = [155, 176, 199, 200]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 188
			constraints = [
				148:	some
				179:	some
				180:	const_int(30686616892700419341528320311204774144)
			]
			prio = 1
			result = 202
			impure = [155, 176, 201, 202]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 190
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362142129435743685477327603181816072)
			]
			prio = 1
			result = 204
			impure = [155, 176, 203, 204]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 192
			constraints = [
				148:	some
				179:	some
				180:	const_int(30686901951279430565641561564801794304)
			]
			prio = 1
			result = 206
			impure = [155, 176, 205, 206]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 194
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362427188014754909590568856778836232)
			]
			prio = 1
			result = 208
			impure = [155, 176, 207, 208]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 202
			constraints = [
				148:	some
				179:	some
				180:	const_int(39950100895832629191365197868744970240)
			]
			prio = 1
			result = 210
			impure = [155, 176, 209, 210]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 204
			constraints = [
				148:	some
				179:	some
				180:	const_int(41284541550424544734358823780242100481)
			]
			prio = 1
			result = 212
			impure = [155, 176, 211, 212]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 206
			constraints = [
				148:	some
				179:	some
				180:	const_int(38693260819630515246292341806293057792)
			]
			prio = 1
			result = 214
			impure = [155, 176, 213, 214]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 208
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362142128814346332279593629287318274)
			]
			prio = 1
			result = 216
			impure = [155, 176, 215, 216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 210
			constraints = [
				148:	some
				179:	some
				180:	const_int(36024664569647092737326704519438008576)
			]
			prio = 1
			result = 218
			impure = [155, 176, 217, 218]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 212
			constraints = [
				148:	some
				179:	some
				180:	const_int(41362427188014754909301208165426529540)
			]
			prio = 1
			result = 220
			impure = [155, 176, 219, 220]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 222
			constraints = [
				148:	some
				179:	some
				180:	const_int(18687320815856387368178823909286805505)
			]
			prio = 1
			result = 222
			impure = [155, 221, 222]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 224
			constraints = [
				148:	some
				179:	some
				180:	const_int(16018520953223639909183530438118932995)
			]
			prio = 1
			result = 224
			impure = [155, 223, 224]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 226
			constraints = [
				148:	some
				179:	some
				180:	const_int(17342576855639742879858139805557719810)
			]
			prio = 1
			result = 226
			impure = [155, 225, 226]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 228
			constraints = [
				148:	some
				179:	some
				180:	const_int(10680758337341567148842519922299176455)
			]
			prio = 1
			result = 228
			impure = [155, 227, 228]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 230
			constraints = [
				148:	some
				179:	some
				180:	const_int(12004814239757670119517129289737963270)
			]
			prio = 1
			result = 230
			impure = [155, 229, 230]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 232
			constraints = [
				148:	some
				179:	some
				180:	const_int(14673614102390417578512422760905835780)
			]
			prio = 1
			result = 232
			impure = [155, 231, 232]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 235
			constraints = [
				1:	some
				233:	some
				238:	some
			]
			prio = 0
			result = 244
			impure = [240, 241, 242, 243, 244]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 241
			constraints = [
				1:	some
				245:	some
			]
			prio = 0
			result = 252
			impure = [249, 250, 251, 252]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 246
			constraints = [
				253:	some
				255:	const_prim(I128)
			]
			prio = 0
			result = 261
			impure = [256, 257, 258, 259, 260, 261]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 255
			constraints = [
				1:	some
				3:	const_prim(I128)
				262:	some
			]
			prio = 0
			result = 269
			impure = [266, 267, 268, 269]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 260
			constraints = [
				1:	some
				3:	const_prim(F32X4)
				270:	some
			]
			prio = 0
			result = 275
			impure = [272, 274, 275]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 263
			constraints = [
				1:	some
				3:	const_prim(F64X2)
				270:	some
			]
			prio = 0
			result = 278
			impure = [272, 277, 278]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 266
			constraints = [
				279:	some
				281:	const_prim(I64)
			]
			prio = -1
			result = 284
			impure = [282, 283, 284]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 269
			constraints = [
				279:	some
				285:	some
			]
			prio = -2
			result = 289
			impure = [287, 288, 289]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 283
			constraints = [
				290:	some
				293:	some
				295:	const_int(64)
				296:	const_int(2)
			]
			prio = 0
			result = 304
			impure = [297, 298, 299, 300, 302, 303, 304]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 289
			constraints = [
				290:	some
				293:	some
				295:	const_int(32)
				296:	const_int(2)
			]
			prio = 0
			result = 319
			impure = [297, 306, 308, 310, 312, 315, 317, 318, 319]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 306
			constraints = [
				290:	some
				320:	some
				322:	some
			]
			prio = -1
			result = 332
			impure = [297, 325, 326, 327, 328, 329, 330, 331, 332]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 315
			constraints = [
				333:	some
			]
			prio = 0
			result = 340
			impure = [336, 337, 338, 339, 340]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 322
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				341:	some
				345:	some
				347:	some
				349:	some
				351:	some
			]
			equals = [
				348 == 352
			]
			prio = 0
			result = 355
			impure = [353, 354, 355]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 326
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				341:	some
				345:	some
				347:	some
				349:	some
				351:	some
			]
			equals = [
				348 == 352
			]
			prio = 0
			result = 357
			impure = [353, 356, 357]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 330
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				341:	some
				345:	some
				349:	some
				358:	some
				360:	some
			]
			equals = [
				359 == 361
			]
			prio = 0
			result = 364
			impure = [362, 363, 364]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 334
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				341:	some
				345:	some
				349:	some
				358:	some
				360:	some
			]
			equals = [
				359 == 361
			]
			prio = 0
			result = 366
			impure = [362, 365, 366]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 337
			constraints = [
				1:	some
				341:	some
			]
			prio = -1
			result = 370
			impure = [367, 368, 132, 369, 370]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 342
			constraints = [
				1:	some
				128:	some
				371:	some
			]
			prio = -1
			result = 376
			impure = [373, 374, 375, 376]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 345
			constraints = [
				1:	some
				3:	const_prim(I64)
				371:	some
			]
			prio = 2
			result = 378
			impure = [373, 377, 378]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 348
			constraints = [
				1:	some
				371:	some
				379:	some
			]
			prio = 1
			result = 383
			impure = [381, 382, 383]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 358
			constraints = [
				1:	some
				3:	const_prim(I128)
				371:	some
			]
			prio = 0
			result = 395
			impure = [384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 371
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				396:	some
			]
			prio = 0
			result = 413
			impure = [401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 380
			constraints = [
				1:	some
				396:	some
				414:	some
			]
			prio = -1
			result = 421
			impure = [417, 418, 419, 420, 421]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 385
			constraints = [
				1:	some
				128:	some
				422:	some
			]
			prio = 0
			result = 430
			impure = [427, 428, 132, 429, 430]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 390
			constraints = [
				1:	some
				128:	some
				431:	some
			]
			prio = -1
			result = 439
			impure = [436, 437, 132, 438, 439]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 393
			constraints = [
				1:	some
				431:	some
				440:	some
			]
			prio = 0
			result = 445
			impure = [436, 437, 443, 444, 445]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 398
			constraints = [
				1:	some
				128:	some
				446:	some
			]
			prio = -1
			result = 454
			impure = [451, 452, 132, 453, 454]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 401
			constraints = [
				1:	some
				440:	some
				446:	some
			]
			prio = 0
			result = 457
			impure = [451, 452, 443, 456, 457]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 406
			constraints = [
				1:	some
				128:	some
				458:	some
			]
			prio = -1
			result = 466
			impure = [463, 464, 132, 465, 466]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 409
			constraints = [
				1:	some
				440:	some
				458:	some
			]
			prio = 0
			result = 469
			impure = [463, 464, 443, 468, 469]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 414
			constraints = [
				1:	some
				128:	some
				470:	some
			]
			prio = -1
			result = 478
			impure = [475, 476, 132, 477, 478]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 417
			constraints = [
				1:	some
				440:	some
				470:	some
			]
			prio = 0
			result = 481
			impure = [475, 476, 443, 480, 481]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 422
			constraints = [
				1:	some
				128:	some
				482:	some
			]
			prio = -1
			result = 490
			impure = [487, 488, 132, 489, 490]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 425
			constraints = [
				1:	some
				440:	some
				482:	some
			]
			prio = 0
			result = 493
			impure = [487, 488, 443, 492, 493]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 430
			constraints = [
				1:	some
				128:	some
				494:	some
			]
			prio = -1
			result = 502
			impure = [499, 500, 132, 501, 502]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 433
			constraints = [
				1:	some
				440:	some
				494:	some
			]
			prio = 0
			result = 505
			impure = [499, 500, 443, 504, 505]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 438
			constraints = [
				1:	some
				128:	some
				506:	some
			]
			prio = -1
			result = 511
			impure = [509, 374, 510, 511]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 441
			constraints = [
				1:	some
				440:	some
				506:	some
			]
			prio = 0
			result = 515
			impure = [509, 513, 514, 515]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 446
			constraints = [
				1:	some
				128:	some
				516:	some
			]
			prio = -1
			result = 521
			impure = [519, 374, 520, 521]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 449
			constraints = [
				1:	some
				440:	some
				516:	some
			]
			prio = 0
			result = 524
			impure = [519, 513, 523, 524]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 454
			constraints = [
				1:	some
				128:	some
				525:	some
			]
			prio = -1
			result = 530
			impure = [528, 374, 529, 530]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 457
			constraints = [
				1:	some
				440:	some
				525:	some
			]
			prio = 0
			result = 533
			impure = [528, 513, 532, 533]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 462
			constraints = [
				1:	some
				3:	const_prim(F64)
				534:	some
			]
			prio = 0
			result = 539
			impure = [537, 538, 539]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 467
			constraints = [
				1:	some
				3:	const_prim(F32)
				540:	some
			]
			prio = 0
			result = 545
			impure = [543, 544, 545]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 472
			constraints = [
				1:	some
				128:	some
				546:	some
			]
			prio = -1
			result = 551
			impure = [549, 374, 550, 551]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 475
			constraints = [
				1:	some
				3:	const_prim(F32)
				546:	some
			]
			prio = 0
			result = 554
			impure = [549, 553, 554]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 478
			constraints = [
				1:	some
				3:	const_prim(F64)
				546:	some
			]
			prio = 0
			result = 557
			impure = [549, 556, 557]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 483
			constraints = [
				1:	some
				128:	some
				558:	some
			]
			prio = -1
			result = 563
			impure = [561, 374, 562, 563]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 486
			constraints = [
				1:	some
				3:	const_prim(F32)
				558:	some
			]
			prio = 0
			result = 566
			impure = [561, 565, 566]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 489
			constraints = [
				1:	some
				3:	const_prim(F64)
				558:	some
			]
			prio = 0
			result = 569
			impure = [561, 568, 569]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 494
			constraints = [
				1:	some
				128:	some
				570:	some
			]
			prio = -1
			result = 575
			impure = [573, 374, 574, 575]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 497
			constraints = [
				1:	some
				3:	const_prim(F32)
				570:	some
			]
			prio = 0
			result = 578
			impure = [573, 577, 578]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 500
			constraints = [
				1:	some
				3:	const_prim(F64)
				570:	some
			]
			prio = 0
			result = 581
			impure = [573, 580, 581]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 505
			constraints = [
				1:	some
				128:	some
				582:	some
			]
			prio = -1
			result = 587
			impure = [585, 374, 586, 587]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 508
			constraints = [
				1:	some
				3:	const_prim(F32)
				582:	some
			]
			prio = 0
			result = 590
			impure = [585, 589, 590]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 511
			constraints = [
				1:	some
				3:	const_prim(F64)
				582:	some
			]
			prio = 0
			result = 593
			impure = [585, 592, 593]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 516
			constraints = [
				1:	some
				440:	some
				594:	some
			]
			prio = 0
			result = 605
			impure = [600, 601, 602, 603, 604, 605]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 520
			constraints = [
				1:	some
				128:	some
				594:	some
			]
			prio = 1
			result = 609
			impure = [607, 608, 609]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 575
			constraints = [
				1:	some
				610:	some
			]
			prio = 0
			result = 617
			impure = [614, 615, 616, 617]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 580
			constraints = [
				1:	some
				379:	some
				618:	some
				620:	const_prim(F32)
			]
			prio = 0
			result = 625
			impure = [622, 624, 625]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 583
			constraints = [
				1:	some
				3:	const_prim(I64)
				618:	some
				620:	const_prim(F32)
			]
			prio = 1
			result = 628
			impure = [622, 627, 628]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 586
			constraints = [
				1:	some
				379:	some
				618:	some
				620:	const_prim(F64)
			]
			prio = 0
			result = 632
			impure = [622, 631, 632]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 589
			constraints = [
				1:	some
				3:	const_prim(I64)
				618:	some
				620:	const_prim(F64)
			]
			prio = 1
			result = 635
			impure = [622, 634, 635]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 594
			constraints = [
				1:	some
				379:	some
				636:	some
				638:	const_prim(F32)
			]
			prio = 0
			result = 642
			impure = [640, 641, 642]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 597
			constraints = [
				1:	some
				3:	const_prim(I64)
				636:	some
				638:	const_prim(F32)
			]
			prio = 1
			result = 645
			impure = [640, 644, 645]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 600
			constraints = [
				1:	some
				379:	some
				636:	some
				638:	const_prim(F64)
			]
			prio = 0
			result = 648
			impure = [640, 647, 648]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 603
			constraints = [
				1:	some
				3:	const_prim(I64)
				636:	some
				638:	const_prim(F64)
			]
			prio = 1
			result = 651
			impure = [640, 650, 651]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 608
			constraints = [
				1:	some
				128:	some
				130:	const_int(32)
				652:	some
				655:	some
				657:	const_int(32)
			]
			prio = -1
			result = 662
			impure = [660, 374, 661, 662]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 611
			constraints = [
				1:	some
				128:	some
				130:	const_int(64)
				652:	some
				655:	some
				657:	const_int(64)
			]
			prio = -1
			result = 662
			impure = [660, 374, 661, 662]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 614
			constraints = [
				1:	some
				3:	const_prim(F32)
				652:	some
				663:	some
			]
			prio = 0
			result = 668
			impure = [666, 667, 668]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 617
			constraints = [
				1:	some
				3:	const_prim(F64)
				652:	some
				663:	some
			]
			prio = 0
			result = 671
			impure = [666, 670, 671]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 620
			constraints = [
				1:	some
				3:	const_prim(F32)
				652:	some
				654:	const_prim(I64)
			]
			prio = 1
			result = 674
			impure = [660, 673, 674]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 623
			constraints = [
				1:	some
				3:	const_prim(F64)
				652:	some
				654:	const_prim(I64)
			]
			prio = 1
			result = 677
			impure = [660, 676, 677]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 628
			constraints = [
				1:	some
				128:	some
				130:	const_int(32)
				678:	some
				681:	some
				683:	const_int(32)
			]
			prio = -1
			result = 688
			impure = [686, 374, 687, 688]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 631
			constraints = [
				1:	some
				128:	some
				130:	const_int(64)
				678:	some
				681:	some
				683:	const_int(64)
			]
			prio = -1
			result = 688
			impure = [686, 374, 687, 688]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 634
			constraints = [
				1:	some
				3:	const_prim(F32)
				678:	some
				689:	some
			]
			prio = 0
			result = 694
			impure = [692, 693, 694]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 637
			constraints = [
				1:	some
				3:	const_prim(F64)
				678:	some
				689:	some
			]
			prio = 0
			result = 697
			impure = [692, 696, 697]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 640
			constraints = [
				1:	some
				3:	const_prim(F32)
				678:	some
				680:	const_prim(I64)
			]
			prio = 1
			result = 700
			impure = [686, 699, 700]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 643
			constraints = [
				1:	some
				3:	const_prim(F64)
				678:	some
				680:	const_prim(I64)
			]
			prio = 1
			result = 703
			impure = [686, 702, 703]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 648
			constraints = [
				1:	some
				128:	some
				130:	const_int(32)
				704:	some
				707:	some
				709:	const_int(32)
			]
			prio = -1
			result = 714
			impure = [712, 374, 713, 714]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 651
			constraints = [
				1:	some
				128:	some
				130:	const_int(64)
				704:	some
				707:	some
				709:	const_int(64)
			]
			prio = -1
			result = 714
			impure = [712, 374, 713, 714]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 654
			constraints = [
				1:	some
				379:	some
				704:	some
				706:	const_prim(F32)
			]
			prio = 0
			result = 716
			impure = [712, 715, 716]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 657
			constraints = [
				1:	some
				3:	const_prim(I64)
				704:	some
				706:	const_prim(F32)
			]
			prio = 1
			result = 718
			impure = [712, 717, 718]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 660
			constraints = [
				1:	some
				379:	some
				704:	some
				706:	const_prim(F64)
			]
			prio = 0
			result = 720
			impure = [712, 719, 720]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 663
			constraints = [
				1:	some
				3:	const_prim(I64)
				704:	some
				706:	const_prim(F64)
			]
			prio = 1
			result = 722
			impure = [712, 721, 722]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 668
			constraints = [
				1:	some
				128:	some
				130:	const_int(32)
				723:	some
				726:	some
				728:	const_int(32)
			]
			prio = -1
			result = 733
			impure = [731, 374, 732, 733]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 671
			constraints = [
				1:	some
				128:	some
				130:	const_int(64)
				723:	some
				726:	some
				728:	const_int(64)
			]
			prio = -1
			result = 733
			impure = [731, 374, 732, 733]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 674
			constraints = [
				1:	some
				379:	some
				723:	some
				725:	const_prim(F32)
			]
			prio = 0
			result = 735
			impure = [731, 734, 735]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 677
			constraints = [
				1:	some
				3:	const_prim(I64)
				723:	some
				725:	const_prim(F32)
			]
			prio = 1
			result = 737
			impure = [731, 736, 737]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 680
			constraints = [
				1:	some
				379:	some
				723:	some
				725:	const_prim(F64)
			]
			prio = 0
			result = 739
			impure = [731, 738, 739]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 683
			constraints = [
				1:	some
				3:	const_prim(I64)
				723:	some
				725:	const_prim(F64)
			]
			prio = 1
			result = 741
			impure = [731, 740, 741]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 691
			constraints = [
				1:	some
				30:	some
				113:	some
			]
			prio = -4
			result = 745
			impure = [742, 743, 744, 745]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 695
			constraints = [
				1:	some
				30:	some
				113:	some
				746:	some
			]
			prio = 0
			result = 749
			impure = [742, 748, 749]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 700
			constraints = [
				1:	some
				30:	some
				113:	some
				750:	some
			]
			prio = 2
			result = 753
			impure = [742, 752, 753]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 706
			constraints = [
				1:	some
				30:	some
				113:	some
				754:	some
			]
			prio = 1
			result = 757
			impure = [742, 756, 757]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 711
			constraints = [
				1:	some
				30:	some
				113:	some
				117:	some
				758:	some
				762:	some
				764:	some
				766:	some
			]
			prio = -3
			result = 770
			impure = [742, 768, 769, 770]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 717
			constraints = [
				1:	some
				113:	some
				128:	some
			]
			prio = -2
			result = 772
			impure = [742, 743, 132, 771, 772]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 721
			constraints = [
				1:	some
				3:	const_prim(I128)
				113:	some
			]
			prio = -1
			result = 776
			impure = [773, 774, 775, 776]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 726
			constraints = [
				1:	some
				777:	some
				779:	some
			]
			prio = 0
			result = 787
			impure = [783, 784, 785, 786, 787]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 731
			constraints = [
				1:	some
				777:	some
				788:	some
			]
			prio = 0
			result = 795
			impure = [792, 793, 785, 794, 795]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 736
			constraints = [
				1:	some
				777:	some
				796:	some
			]
			prio = 0
			result = 803
			impure = [800, 801, 785, 802, 803]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 741
			constraints = [
				1:	some
				777:	some
				804:	some
			]
			prio = 0
			result = 811
			impure = [808, 809, 785, 810, 811]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 747
			constraints = [
				1:	some
				30:	some
				812:	some
			]
			prio = 1
			result = 817
			impure = [814, 815, 816, 817]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 751
			constraints = [
				1:	some
				3:	const_prim(I128)
				812:	some
			]
			prio = 2
			result = 821
			impure = [818, 819, 820, 821]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 755
			constraints = [
				1:	some
				777:	some
				812:	some
			]
			prio = 0
			result = 825
			impure = [822, 823, 824, 825]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 761
			constraints = [
				1:	some
				30:	some
				826:	some
			]
			prio = -3
			result = 833
			impure = [830, 831, 308, 832, 833]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 765
			constraints = [
				1:	some
				3:	const_prim(I128)
				826:	some
			]
			prio = -1
			result = 846
			impure = [834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 793
			constraints = [
				1:	some
				777:	some
				826:	some
				847:	some
			]
			prio = -2
			result = 850
			impure = [830, 831, 785, 849, 850]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 825
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				826:	some
			]
			prio = -1
			result = 858
			impure = [830, 831, 851, 852, 853, 854, 855, 856, 857, 858]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 864
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				826:	some
				859:	some
				861:	some
				863:	const_prim(I8X16)
				864:	some
				866:	some
				868:	const_prim(I8X16)
			]
			prio = 0
			result = 872
			impure = [869, 870, 871, 872]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 870
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				826:	some
				859:	some
				864:	some
				873:	some
				875:	const_prim(I8X16)
				876:	some
				878:	const_prim(I8X16)
			]
			prio = 0
			result = 882
			impure = [879, 880, 881, 882]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 876
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				826:	some
				859:	some
				864:	some
				883:	some
				885:	const_prim(I8X16)
				886:	some
				888:	const_prim(I8X16)
			]
			prio = 0
			result = 892
			impure = [889, 890, 891, 892]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 882
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				826:	some
				859:	some
				864:	some
				893:	some
				895:	const_prim(I8X16)
				896:	some
				898:	const_prim(I8X16)
			]
			prio = 0
			result = 902
			impure = [899, 900, 901, 902]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 888
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				826:	some
				859:	some
				861:	some
				863:	const_prim(I16X8)
				864:	some
				866:	some
				868:	const_prim(I16X8)
			]
			prio = 0
			result = 904
			impure = [869, 870, 903, 904]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 894
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				826:	some
				859:	some
				864:	some
				873:	some
				875:	const_prim(I16X8)
				876:	some
				878:	const_prim(I16X8)
			]
			prio = 0
			result = 906
			impure = [879, 880, 905, 906]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 900
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				826:	some
				859:	some
				864:	some
				883:	some
				885:	const_prim(I16X8)
				886:	some
				888:	const_prim(I16X8)
			]
			prio = 0
			result = 908
			impure = [889, 890, 907, 908]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 906
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				826:	some
				859:	some
				864:	some
				893:	some
				895:	const_prim(I16X8)
				896:	some
				898:	const_prim(I16X8)
			]
			prio = 0
			result = 910
			impure = [899, 900, 909, 910]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 912
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				826:	some
				859:	some
				861:	some
				863:	const_prim(I32X4)
				864:	some
				866:	some
				868:	const_prim(I32X4)
			]
			prio = 0
			result = 912
			impure = [869, 870, 911, 912]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 918
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				826:	some
				859:	some
				864:	some
				873:	some
				875:	const_prim(I32X4)
				876:	some
				878:	const_prim(I32X4)
			]
			prio = 0
			result = 914
			impure = [879, 880, 913, 914]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 924
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				826:	some
				859:	some
				864:	some
				883:	some
				885:	const_prim(I32X4)
				886:	some
				888:	const_prim(I32X4)
			]
			prio = 0
			result = 916
			impure = [889, 890, 915, 916]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 930
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				826:	some
				859:	some
				864:	some
				893:	some
				895:	const_prim(I32X4)
				896:	some
				898:	const_prim(I32X4)
			]
			prio = 0
			result = 918
			impure = [899, 900, 917, 918]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 937
			constraints = [
				1:	some
				3:	const_prim(I64)
				919:	some
			]
			prio = 1
			result = 926
			impure = [923, 924, 925, 926]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 940
			constraints = [
				1:	some
				379:	some
				919:	some
			]
			prio = 0
			result = 933
			impure = [927, 928, 308, 929, 931, 932, 933]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 949
			constraints = [
				1:	some
				3:	const_prim(I64)
				934:	some
			]
			prio = 1
			result = 941
			impure = [938, 939, 940, 941]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 952
			constraints = [
				1:	some
				379:	some
				934:	some
			]
			prio = 0
			result = 947
			impure = [942, 943, 308, 944, 931, 945, 946, 947]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 968
			constraints = [
				1:	some
				30:	some
				948:	some
			]
			prio = 0
			result = 955
			impure = [952, 953, 954, 955]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1001
			constraints = [
				1:	some
				30:	some
				956:	some
			]
			prio = 0
			result = 964
			impure = [960, 961, 962, 963, 964]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1010
			constraints = [
				1:	some
				30:	some
				956:	some
				965:	some
				967:	some
				969:	some
			]
			prio = 1
			result = 974
			impure = [960, 972, 973, 974]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1039
			constraints = [
				1:	some
				30:	some
				975:	some
			]
			prio = 0
			result = 983
			impure = [979, 980, 981, 982, 983]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1046
			constraints = [
				1:	some
				30:	some
				984:	some
			]
			prio = 0
			result = 992
			impure = [988, 989, 990, 991, 992]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1074
			constraints = [
				1:	some
				30:	some
				993:	some
				995:	some
			]
			prio = 2
			result = 1001
			impure = [1000, 1001]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1076
			constraints = [
				1:	some
				30:	some
				993:	some
				1002:	some
			]
			prio = 2
			result = 1008
			impure = [1007, 1008]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1078
			constraints = [
				1:	some
				30:	some
				993:	some
				1009:	some
			]
			prio = 2
			result = 1015
			impure = [1014, 1015]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1080
			constraints = [
				1:	some
				30:	some
				993:	some
				1016:	some
			]
			prio = 2
			result = 1022
			impure = [1021, 1022]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1085
			constraints = [
				1:	some
				1002:	some
				1023:	some
			]
			prio = 0
			result = 1029
			impure = [1026, 1027, 132, 1028, 1029]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1088
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				1002:	some
			]
			prio = 1
			result = 1038
			impure = [1032, 1033, 1034, 1035, 1036, 1037, 1038]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1091
			constraints = [
				1:	some
				995:	some
				1023:	some
			]
			prio = 0
			result = 1043
			impure = [1040, 1041, 132, 1042, 1043]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1094
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				995:	some
			]
			prio = 1
			result = 1051
			impure = [1045, 1046, 1047, 1048, 1049, 1050, 1051]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1097
			constraints = [
				1:	some
				1016:	some
				1023:	some
			]
			prio = 0
			result = 1056
			impure = [1053, 1054, 132, 1055, 1056]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1100
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				1016:	some
			]
			prio = 1
			result = 1061
			impure = [1053, 1054, 1057, 1058, 1059, 1060, 1061]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1103
			constraints = [
				1:	some
				1009:	some
				1023:	some
			]
			prio = 0
			result = 1066
			impure = [1063, 1064, 132, 1065, 1066]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1106
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				1009:	some
			]
			prio = 1
			result = 1071
			impure = [1063, 1064, 1067, 1068, 1069, 1070, 1071]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1113
			constraints = [
				1:	some
				30:	some
				1072:	some
			]
			prio = -2
			result = 1079
			impure = [1075, 1078, 1079]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1118
			constraints = [
				1:	some
				30:	some
				1072:	some
				1080:	some
				1082:	some
			]
			prio = 1
			result = 1091
			impure = [1088, 1089, 1090, 1091]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1125
			constraints = [
				1:	some
				30:	some
				1072:	some
				1080:	some
				1092:	some
				1096:	some
			]
			prio = 1
			result = 1100
			impure = [1098, 1099, 1100]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1132
			constraints = [
				1:	some
				3:	const_prim(I128)
				1072:	some
			]
			prio = -1
			result = 1104
			impure = [1101, 1102, 1103, 1104]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1137
			constraints = [
				1:	some
				3:	const_prim(I128)
				1072:	some
				1080:	some
				1082:	some
			]
			prio = 0
			result = 1107
			impure = [1088, 1089, 1090, 1105, 1106, 1107]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1146
			constraints = [
				1:	some
				30:	some
				1108:	some
			]
			prio = -4
			result = 1114
			impure = [1111, 1113, 1114]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1151
			constraints = [
				1:	some
				30:	some
				1108:	some
				1115:	some
				1117:	some
			]
			prio = -3
			result = 1127
			impure = [1123, 1124, 1125, 1126, 1127]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1160
			constraints = [
				1:	some
				3:	const_prim(I128)
				1108:	some
			]
			prio = -2
			result = 1132
			impure = [1128, 1129, 1130, 1131, 1132]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1170
			constraints = [
				1:	some
				3:	const_prim(I128)
				1108:	some
				1115:	some
				1117:	some
				1133:	some
			]
			prio = 0
			result = 1140
			impure = [1123, 1124, 1135, 1136, 1137, 1138, 1139, 1140]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1181
			constraints = [
				1:	some
				3:	const_prim(I128)
				1108:	some
				1115:	some
				1117:	some
				1121:	const_prim(I64X2)
			]
			prio = -1
			result = 1145
			impure = [1123, 1141, 1142, 1143, 1144, 1145]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1197
			constraints = [
				1:	some
				30:	some
				1146:	some
			]
			prio = -1
			result = 1150
			impure = [814, 1148, 1149, 1150]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1202
			constraints = [
				1:	some
				30:	some
				1146:	some
				1151:	some
				1153:	some
				1157:	some
				1159:	some
				1161:	some
			]
			prio = 1
			result = 1165
			impure = [814, 1163, 1164, 1165]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1208
			constraints = [
				1:	some
				3:	const_prim(I128)
				1146:	some
			]
			prio = 0
			result = 1174
			impure = [1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1217
			constraints = [
				1:	some
				777:	some
				1146:	some
			]
			prio = -2
			result = 1177
			impure = [1175, 823, 1176, 1177]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1221
			constraints = [
				1:	some
				30:	some
				1146:	some
				1151:	some
				1178:	some
			]
			prio = 2
			result = 1184
			impure = [1183, 1184]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1223
			constraints = [
				1:	some
				3:	const_prim(I128)
				1146:	some
				1151:	some
				1178:	some
			]
			prio = 3
			result = 1186
			impure = [1185, 1186]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1227
			constraints = [
				1:	some
				30:	some
				1187:	some
			]
			prio = -1
			result = 1193
			impure = [1192, 1193]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1230
			constraints = [
				1:	some
				3:	const_prim(I128)
				1187:	some
			]
			prio = 0
			result = 1195
			impure = [1194, 1195]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1232
			constraints = [
				1:	some
				777:	some
				1187:	some
			]
			prio = -2
			result = 1199
			impure = [1196, 1197, 785, 1198, 1199]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1239
			constraints = [
				1:	some
				30:	some
				1187:	some
				1200:	some
				1202:	some
			]
			prio = 1
			result = 1206
			impure = [1205, 1206]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1241
			constraints = [
				1:	some
				30:	some
				1187:	some
				1207:	some
				1209:	some
			]
			prio = 2
			result = 1212
			impure = [1211, 1212]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1244
			constraints = [
				1:	some
				3:	const_prim(I128)
				1187:	some
				1200:	some
				1202:	some
			]
			prio = 3
			result = 1214
			impure = [1213, 1214]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1245
			constraints = [
				1:	some
				3:	const_prim(I128)
				1187:	some
				1207:	some
				1209:	some
			]
			prio = 4
			result = 1216
			impure = [1215, 1216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1247
			constraints = [
				1:	some
				777:	some
				1187:	some
				1200:	some
				1202:	some
			]
			prio = 5
			result = 1219
			impure = [1196, 1217, 785, 1218, 1219]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1249
			constraints = [
				1:	some
				777:	some
				1187:	some
				1207:	some
				1209:	some
			]
			prio = 6
			result = 1223
			impure = [1220, 1221, 785, 1222, 1223]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1254
			constraints = [
				1:	some
				30:	some
				1224:	some
			]
			prio = -1
			result = 1230
			impure = [1229, 1230]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1257
			constraints = [
				1:	some
				3:	const_prim(I128)
				1224:	some
			]
			prio = 0
			result = 1232
			impure = [1231, 1232]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1259
			constraints = [
				1:	some
				777:	some
				1224:	some
			]
			prio = -2
			result = 1236
			impure = [1233, 1234, 785, 1235, 1236]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1266
			constraints = [
				1:	some
				30:	some
				1224:	some
				1237:	some
				1239:	some
			]
			prio = 1
			result = 1243
			impure = [1242, 1243]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1268
			constraints = [
				1:	some
				30:	some
				1224:	some
				1244:	some
				1246:	some
			]
			prio = 2
			result = 1249
			impure = [1248, 1249]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1271
			constraints = [
				1:	some
				3:	const_prim(I128)
				1224:	some
				1237:	some
				1239:	some
			]
			prio = 3
			result = 1251
			impure = [1250, 1251]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1272
			constraints = [
				1:	some
				3:	const_prim(I128)
				1224:	some
				1244:	some
				1246:	some
			]
			prio = 4
			result = 1253
			impure = [1252, 1253]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1276
			constraints = [
				1:	some
				30:	some
				1254:	some
			]
			prio = -1
			result = 1260
			impure = [1259, 1260]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1279
			constraints = [
				1:	some
				3:	const_prim(I128)
				1254:	some
			]
			prio = 0
			result = 1262
			impure = [1261, 1262]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1281
			constraints = [
				1:	some
				777:	some
				1254:	some
			]
			prio = -2
			result = 1266
			impure = [1263, 1264, 785, 1265, 1266]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1288
			constraints = [
				1:	some
				30:	some
				1254:	some
				1267:	some
				1269:	some
			]
			prio = 1
			result = 1272
			impure = [1271, 1272]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1290
			constraints = [
				1:	some
				30:	some
				1254:	some
				1273:	some
				1275:	some
			]
			prio = 2
			result = 1278
			impure = [1277, 1278]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1293
			constraints = [
				1:	some
				3:	const_prim(I128)
				1254:	some
				1267:	some
				1269:	some
			]
			prio = 3
			result = 1280
			impure = [1279, 1280]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1294
			constraints = [
				1:	some
				3:	const_prim(I128)
				1254:	some
				1273:	some
				1275:	some
			]
			prio = 4
			result = 1282
			impure = [1281, 1282]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1299
			constraints = [
				1:	some
				379:	some
				1283:	some
			]
			prio = -1
			result = 1290
			impure = [1288, 1289, 1290]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1303
			constraints = [
				1:	some
				3:	const_prim(I64)
				1283:	some
			]
			prio = 0
			result = 1292
			impure = [1288, 1291, 1292]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1307
			constraints = [
				1:	some
				3:	const_prim(I128)
				1283:	some
			]
			prio = 0
			result = 1297
			impure = [1293, 1294, 1295, 1296, 1297]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1337
			constraints = [
				1:	some
				777:	some
				1283:	some
			]
			prio = -3
			result = 1306
			impure = [1298, 1300, 1301, 1302, 1303, 1304, 1305, 1306]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1342
			constraints = [
				1:	some
				777:	some
				1283:	some
				1307:	some
				1309:	some
			]
			prio = -2
			result = 1314
			impure = [1288, 823, 1313, 1314]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1390
			constraints = [
				1:	some
				379:	some
				1315:	some
			]
			prio = -1
			result = 1322
			impure = [1320, 1321, 1322]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1394
			constraints = [
				1:	some
				3:	const_prim(I64)
				1315:	some
			]
			prio = 0
			result = 1325
			impure = [1323, 1324, 1325]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1398
			constraints = [
				1:	some
				3:	const_prim(I128)
				1315:	some
			]
			prio = 0
			result = 1330
			impure = [1326, 1327, 1328, 1329, 1330]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1406
			constraints = [
				1:	some
				777:	some
				1315:	some
			]
			prio = -4
			result = 1338
			impure = [1298, 1331, 1301, 1332, 1333, 1334, 1335, 1336, 1337, 1338]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1411
			constraints = [
				1:	some
				777:	some
				1315:	some
				1339:	some
				1341:	some
			]
			prio = -3
			result = 1347
			impure = [1344, 823, 1346, 1347]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1413
			constraints = [
				1:	some
				777:	some
				1315:	some
				1339:	some
				1341:	some
				1345:	const_int(0)
			]
			prio = -2
			result = 1348
			impure = [1348]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1447
			constraints = [
				1:	some
				379:	some
				1349:	some
			]
			prio = -4
			result = 1356
			impure = [1354, 1355, 1356]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1451
			constraints = [
				1:	some
				3:	const_prim(I64)
				1349:	some
			]
			prio = 0
			result = 1359
			impure = [1357, 1358, 1359]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1455
			constraints = [
				1:	some
				3:	const_prim(I128)
				1349:	some
			]
			prio = 0
			result = 1364
			impure = [1360, 1361, 1362, 1363, 1364]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1464
			constraints = [
				1:	some
				777:	some
				1349:	some
			]
			prio = -3
			result = 1371
			impure = [1298, 1365, 1301, 1366, 1333, 1367, 1368, 1369, 1370, 1371]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1469
			constraints = [
				1:	some
				777:	some
				1349:	some
				1372:	some
				1374:	some
			]
			prio = -2
			result = 1380
			impure = [1377, 823, 1379, 1380]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1471
			constraints = [
				1:	some
				777:	some
				1349:	some
				1372:	some
				1374:	some
				1378:	const_int(0)
			]
			prio = -1
			result = 1381
			impure = [1381]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1507
			constraints = [
				1:	some
				1382:	some
				1384:	some
			]
			prio = -2
			result = 1393
			impure = [1388, 1389, 308, 1390, 1391, 1392, 1393]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1513
			constraints = [
				1:	some
				1382:	some
				1384:	some
				1394:	some
				1396:	some
				1398:	some
			]
			prio = -1
			result = 1403
			impure = [1400, 1401, 1402, 1403]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1526
			constraints = [
				1:	some
				3:	const_prim(I32)
				1384:	some
			]
			prio = 0
			result = 1406
			impure = [1388, 1389, 308, 1390, 1404, 1405, 1406]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1532
			constraints = [
				1:	some
				3:	const_prim(I64)
				1384:	some
			]
			prio = 0
			result = 1409
			impure = [1388, 1389, 308, 1407, 1404, 1408, 1409]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1538
			constraints = [
				1:	some
				3:	const_prim(I32)
				1384:	some
				1394:	some
				1396:	some
				1410:	some
			]
			prio = 1
			result = 1415
			impure = [1412, 1413, 1414, 1415]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1543
			constraints = [
				1:	some
				3:	const_prim(I64)
				1384:	some
				1394:	some
				1396:	some
				1416:	some
			]
			prio = 1
			result = 1420
			impure = [1412, 1418, 1419, 1420]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1553
			constraints = [
				1:	some
				3:	const_prim(I128)
				1384:	some
			]
			prio = 0
			result = 1436
			impure = [1421, 1422, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1566
			constraints = [
				1:	some
				1382:	some
				1437:	some
			]
			prio = -3
			result = 1445
			impure = [1441, 1442, 1443, 1444, 1445]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1570
			constraints = [
				1:	some
				3:	const_prim(I32)
				1437:	some
			]
			prio = -1
			result = 1448
			impure = [1446, 1442, 1443, 1447, 1448]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1574
			constraints = [
				1:	some
				3:	const_prim(I64)
				1437:	some
			]
			prio = -1
			result = 1450
			impure = [1446, 1442, 1443, 1449, 1450]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1578
			constraints = [
				1:	some
				1382:	some
				1437:	some
				1451:	some
				1453:	some
				1455:	some
			]
			prio = -2
			result = 1458
			impure = [1441, 1457, 1458]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1583
			constraints = [
				1:	some
				3:	const_prim(I32)
				1437:	some
				1451:	some
				1453:	some
				1459:	some
			]
			prio = 0
			result = 1462
			impure = [1446, 1461, 1462]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1588
			constraints = [
				1:	some
				3:	const_prim(I64)
				1437:	some
				1451:	some
				1453:	some
				1463:	some
			]
			prio = 0
			result = 1466
			impure = [1446, 1465, 1466]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1637
			constraints = [
				1:	some
				3:	const_prim(I128)
				1437:	some
			]
			prio = 0
			result = 1478
			impure = [1467, 1442, 1443, 1425, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1652
			constraints = [
				1:	some
				3:	const_prim(I8)
				1479:	some
			]
			prio = 0
			result = 1486
			impure = [1481, 1482, 1484, 1485, 1486]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1658
			constraints = [
				1:	some
				3:	const_prim(I16)
				1479:	some
			]
			prio = 0
			result = 1490
			impure = [1481, 1482, 1488, 1489, 1490]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1661
			constraints = [
				1:	some
				3:	const_prim(I128)
				1479:	some
			]
			prio = 0
			result = 1497
			impure = [1491, 1492, 1493, 1494, 1495, 1496, 1497]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1667
			constraints = [
				1:	some
				1479:	some
			]
			prio = -1
			result = 1499
			impure = [1481, 1498, 1499]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1673
			constraints = [
				1:	some
				3:	const_prim(I8)
				1500:	some
			]
			prio = 0
			result = 1506
			impure = [1502, 1503, 1504, 1505, 1506]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1676
			constraints = [
				1:	some
				3:	const_prim(I16)
				1500:	some
			]
			prio = 0
			result = 1509
			impure = [1502, 1503, 1507, 1508, 1509]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1679
			constraints = [
				1:	some
				3:	const_prim(I128)
				1500:	some
			]
			prio = 0
			result = 1512
			impure = [1510, 1511, 1512]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1682
			constraints = [
				1:	some
				1500:	some
			]
			prio = -1
			result = 1515
			impure = [1513, 1514, 1515]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1703
			constraints = [
				1:	some
				3:	const_prim(I8)
				1516:	some
			]
			prio = 0
			result = 1524
			impure = [1518, 1519, 1521, 1522, 1523, 1524]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1706
			constraints = [
				1:	some
				3:	const_prim(I16)
				1516:	some
			]
			prio = 0
			result = 1529
			impure = [1518, 1519, 1526, 1527, 1528, 1529]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1709
			constraints = [
				1:	some
				3:	const_prim(I128)
				1516:	some
			]
			prio = 0
			result = 1537
			impure = [1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1715
			constraints = [
				1:	some
				1516:	some
			]
			prio = -1
			result = 1540
			impure = [1518, 1538, 1539, 1540]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1720
			constraints = [
				1:	some
				3:	const_prim(I8)
				1541:	some
			]
			prio = 0
			result = 1546
			impure = [1543, 1544, 1504, 1545, 1546]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1723
			constraints = [
				1:	some
				3:	const_prim(I16)
				1541:	some
			]
			prio = 0
			result = 1548
			impure = [1543, 1544, 1507, 1547, 1548]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1735
			constraints = [
				1:	some
				3:	const_prim(I128)
				1541:	some
			]
			prio = 0
			result = 1566
			impure = [1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1749
			constraints = [
				1:	some
				1541:	some
			]
			prio = -1
			result = 1569
			impure = [1567, 1568, 1569]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1754
			constraints = [
				1:	some
				3:	const_prim(I16)
				1570:	some
			]
			prio = 0
			result = 1575
			impure = [1573, 1574, 1575]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1757
			constraints = [
				1:	some
				3:	const_prim(I32)
				1570:	some
			]
			prio = 0
			result = 1577
			impure = [1573, 1576, 1577]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1760
			constraints = [
				1:	some
				3:	const_prim(I64)
				1570:	some
			]
			prio = 0
			result = 1579
			impure = [1573, 1578, 1579]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1763
			constraints = [
				1:	some
				3:	const_prim(I128)
				1570:	some
			]
			prio = 0
			result = 1587
			impure = [1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1771
			constraints = [
				1:	some
				1588:	some
			]
			prio = 0
			result = 1593
			impure = [1591, 1592, 1593]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1793
			constraints = [
				1:	some
				3:	const_prim(I8)
				1594:	some
			]
			prio = 0
			result = 1602
			impure = [1596, 1597, 1599, 1601, 1602]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1799
			constraints = [
				1:	some
				3:	const_prim(I16)
				1594:	some
			]
			prio = 0
			result = 1605
			impure = [1596, 1597, 1599, 1603, 1604, 1605]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1805
			constraints = [
				1:	some
				3:	const_prim(I32)
				1594:	some
			]
			prio = 0
			result = 1608
			impure = [1596, 1597, 1599, 1606, 1607, 1608]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1811
			constraints = [
				1:	some
				3:	const_prim(I64)
				1594:	some
			]
			prio = 0
			result = 1613
			impure = [1596, 1609, 1610, 1611, 1612, 1613]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1817
			constraints = [
				1:	some
				3:	const_prim(I128)
				1594:	some
			]
			prio = 0
			result = 1624
			impure = [1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1825
			constraints = [
				1:	some
				3:	const_prim(I8X16)
				1594:	some
			]
			prio = 0
			result = 1626
			impure = [1596, 1625, 1626]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1830
			constraints = [
				1:	some
				1627:	some
				1632:	some
			]
			prio = 0
			result = 1641
			impure = [1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1836
			constraints = [
				1:	some
				777:	some
				1627:	some
			]
			prio = 1
			result = 1646
			impure = [1642, 1643, 1644, 1645, 1646]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1844
			constraints = [
				1:	some
				1632:	some
				1647:	some
			]
			prio = 0
			result = 1651
			impure = [1649, 1650, 1651]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1850
			constraints = [
				1:	some
				128:	some
				1652:	some
				1657:	some
				1659:	some
			]
			prio = 4
			result = 1665
			impure = [1661, 374, 1662, 1663, 1664, 1665]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1856
			constraints = [
				1:	some
				128:	some
				1652:	some
				1659:	some
				1666:	some
			]
			prio = 3
			result = 1670
			impure = [1661, 374, 1668, 1669, 1670]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1862
			constraints = [
				1:	some
				128:	some
				1652:	some
				1657:	some
				1671:	some
			]
			prio = 2
			result = 1677
			impure = [1673, 374, 1674, 1675, 1676, 1677]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1868
			constraints = [
				1:	some
				128:	some
				1652:	some
				1666:	some
				1671:	some
			]
			prio = 1
			result = 1680
			impure = [1673, 374, 1678, 1679, 1680]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1874
			constraints = [
				1:	some
				1652:	some
				1682:	some
			]
			prio = 0
			result = 1691
			impure = [1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1879
			constraints = [
				1:	some
				1652:	some
				1692:	some
			]
			prio = -1
			result = 1697
			impure = [1661, 1694, 1695, 1696, 1697]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1885
			constraints = [
				1:	some
				128:	some
				1698:	some
				1703:	some
				1705:	some
			]
			prio = 3
			result = 1711
			impure = [1707, 374, 1708, 1709, 1710, 1711]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1891
			constraints = [
				1:	some
				128:	some
				1698:	some
				1705:	some
				1712:	some
			]
			prio = 2
			result = 1716
			impure = [1707, 374, 1714, 1715, 1716]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1897
			constraints = [
				1:	some
				128:	some
				1698:	some
				1703:	some
				1717:	some
			]
			prio = 1
			result = 1723
			impure = [1719, 374, 1720, 1721, 1722, 1723]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1903
			constraints = [
				1:	some
				128:	some
				1698:	some
				1712:	some
				1717:	some
			]
			prio = 0
			result = 1726
			impure = [1719, 374, 1724, 1725, 1726]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1909
			constraints = [
				1727:	some
			]
			prio = -1
			result = 1735
			impure = [1734, 1735]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1914
			constraints = [
				1736:	some
			]
			prio = 0
			result = 1739
			impure = [1738, 1739]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1919
			constraints = [
				1740:	some
			]
			prio = 0
			result = 1743
			impure = [1742, 1743]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1924
			constraints = [
				1:	some
				1744:	some
				1749:	some
				1751:	some
				1753:	some
			]
			prio = 0
			result = 1764
			impure = [1759, 1760, 1761, 1762, 1763, 1764]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1937
			constraints = [
				1:	some
				1744:	some
				1749:	some
				1751:	some
				1765:	some
			]
			prio = 0
			result = 1777
			impure = [1771, 1772, 1773, 1774, 1775, 1776, 1777]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1946
			constraints = [
				1:	some
				1744:	some
				1778:	const_prim(I8)
			]
			prio = -1
			result = 1784
			impure = [1779, 1781, 1782, 1783, 1784]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1952
			constraints = [
				1:	some
				1744:	some
				1785:	some
			]
			prio = -2
			result = 1791
			impure = [1787, 1788, 1789, 1790, 1791]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1958
			constraints = [
				1:	some
				1744:	some
				1792:	some
			]
			prio = -3
			result = 1797
			impure = [1794, 1788, 1795, 1796, 1797]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1964
			constraints = [
				1:	some
				1744:	some
				1778:	const_prim(I128)
			]
			prio = -4
			result = 1804
			impure = [1798, 1799, 1800, 1801, 1333, 1802, 1803, 1804]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1975
			constraints = [
				1:	some
				1805:	some
				1810:	some
				1812:	some
				1814:	some
			]
			prio = 0
			result = 1827
			impure = [1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1989
			constraints = [
				1:	some
				1805:	some
				1829:	some
			]
			prio = -1
			result = 1834
			impure = [1831, 1788, 1832, 1833, 1834]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1995
			constraints = [
				1:	some
				1805:	some
				1828:	const_prim(I128)
			]
			prio = -2
			result = 1841
			impure = [1835, 1836, 1837, 1838, 1333, 1839, 1840, 1841]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2006
			constraints = [
				1:	some
				777:	some
				1842:	some
				1844:	some
			]
			prio = 0
			result = 1847
			impure = [1846, 1847]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2009
			constraints = [
				1:	some
				1842:	some
				1848:	some
				1850:	some
			]
			prio = 1
			result = 1853
			impure = [1852, 1853]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2015
			constraints = [
				1:	some
				1854:	some
				1857:	some
			]
			prio = -1
			result = 1861
			impure = [1859, 374, 1860, 1861]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2019
			constraints = [
				1:	some
				1854:	some
				1862:	some
			]
			prio = -2
			result = 1865
			impure = [1859, 374, 1864, 1865]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2022
			constraints = [
				1:	some
				1854:	some
				1866:	some
				1868:	some
			]
			prio = 0
			result = 1873
			impure = [607, 1872, 1873]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2025
			constraints = [
				1:	some
				1854:	some
				1866:	some
				1874:	some
			]
			prio = 0
			result = 1878
			impure = [607, 1877, 1878]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2028
			constraints = [
				1:	some
				1854:	some
				1866:	some
				1879:	some
			]
			prio = 0
			result = 1883
			impure = [607, 1882, 1883]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2031
			constraints = [
				1:	some
				1854:	some
				1866:	some
				1884:	some
				1886:	some
				1888:	some
			]
			prio = 0
			result = 1892
			impure = [607, 1891, 1892]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2034
			constraints = [
				1:	some
				1854:	some
				1866:	some
				1893:	some
				1898:	some
			]
			prio = 0
			result = 1903
			impure = [1901, 374, 1902, 1903]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2040
			constraints = [
				1:	some
				1904:	some
				1906:	some
			]
			prio = 0
			result = 1912
			impure = [1910, 1911, 1912]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2045
			constraints = [
				1913:	some
				1919:	some
			]
			prio = 0
			result = 1924
			impure = [1921, 1922, 1923, 1924]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2052
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Add)
			]
			prio = 1
			result = 1936
			impure = [1934, 1935, 1936]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2056
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Xor)
			]
			prio = 1
			result = 1939
			impure = [1934, 1938, 1939]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2060
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Or)
			]
			prio = 1
			result = 1942
			impure = [1934, 1941, 1942]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2064
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Smax)
			]
			prio = 1
			result = 1945
			impure = [1934, 1944, 1945]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2068
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Smin)
			]
			prio = 1
			result = 1948
			impure = [1934, 1947, 1948]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2072
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Umax)
			]
			prio = 1
			result = 1951
			impure = [1934, 1950, 1951]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2076
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Umin)
			]
			prio = 1
			result = 1954
			impure = [1934, 1953, 1954]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2080
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Sub)
			]
			prio = 1
			result = 1958
			impure = [814, 1955, 1956, 1957, 1958]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2084
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1927:	some
				1930:	variant(AtomicRmwOp::And)
			]
			prio = 1
			result = 1962
			impure = [1934, 1788, 1960, 1961, 1962]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2090
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Add)
			]
			prio = 0
			result = 1966
			impure = [1964, 1955, 1965, 1966]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2093
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Sub)
			]
			prio = 0
			result = 1969
			impure = [1964, 1955, 1968, 1969]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2096
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::And)
			]
			prio = 0
			result = 1972
			impure = [1964, 1955, 1971, 1972]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2099
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Nand)
			]
			prio = 0
			result = 1975
			impure = [1964, 1955, 1974, 1975]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2102
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Or)
			]
			prio = 0
			result = 1978
			impure = [1964, 1955, 1977, 1978]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2105
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Xor)
			]
			prio = 0
			result = 1981
			impure = [1964, 1955, 1980, 1981]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2108
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Smin)
			]
			prio = 0
			result = 1984
			impure = [1964, 1955, 1983, 1984]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2111
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Smax)
			]
			prio = 0
			result = 1987
			impure = [1964, 1955, 1986, 1987]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2114
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Umin)
			]
			prio = 0
			result = 1990
			impure = [1964, 1955, 1989, 1990]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2117
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Umax)
			]
			prio = 0
			result = 1993
			impure = [1964, 1955, 1992, 1993]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2120
			constraints = [
				1:	some
				1904:	some
				1927:	some
				1930:	variant(AtomicRmwOp::Xchg)
			]
			prio = 0
			result = 1996
			impure = [1964, 1955, 1995, 1996]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2125
			constraints = [
				1:	some
				1904:	some
				1925:	some
				1997:	some
			]
			prio = 1
			result = 2007
			impure = [2003, 2004, 2005, 2006, 2007]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2130
			constraints = [
				1:	some
				1904:	some
				1997:	some
			]
			prio = 0
			result = 2009
			impure = [2003, 2004, 2005, 2008, 2009]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2135
			constraints = [
				2010:	some
			]
			prio = 0
			result = 2014
			impure = [2012, 2013, 2014]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2140
			constraints = [
				1:	some
				2015:	some
				2017:	some
				2021:	some
			]
			prio = 1
			result = 2026
			impure = [2023, 2024, 2025, 2026]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2144
			constraints = [
				1:	some
				2017:	some
				2027:	some
			]
			prio = 2
			result = 2033
			impure = [2023, 2029, 2030, 2031, 2032, 2033]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2148
			constraints = [
				1:	some
				2015:	some
				2017:	some
			]
			prio = 0
			result = 2037
			impure = [2023, 2024, 2025, 2034, 2035, 2036, 2037]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2155
			constraints = [
				1:	some
				2015:	some
				2038:	some
				2042:	some
			]
			prio = 1
			result = 2046
			impure = [2044, 2024, 2045, 2046]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2159
			constraints = [
				1:	some
				2027:	some
				2038:	some
			]
			prio = 2
			result = 2050
			impure = [2044, 2047, 2048, 2031, 2049, 2050]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2163
			constraints = [
				1:	some
				2015:	some
				2038:	some
			]
			prio = 0
			result = 2053
			impure = [2044, 2024, 2045, 2051, 2035, 2052, 2053]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2171
			constraints = [
				1:	some
				2015:	some
				2054:	some
				2058:	some
			]
			prio = 1
			result = 2062
			impure = [2060, 2024, 2061, 2062]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2175
			constraints = [
				1:	some
				2027:	some
				2054:	some
			]
			prio = 2
			result = 2066
			impure = [2060, 2063, 2064, 2031, 2065, 2066]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2179
			constraints = [
				1:	some
				2015:	some
				2054:	some
			]
			prio = 0
			result = 2069
			impure = [2060, 2024, 2061, 2067, 2035, 2068, 2069]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2186
			constraints = [
				1:	some
				2070:	some
			]
			prio = 0
			result = 2076
			impure = [2073, 2074, 2075, 2076]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2191
			constraints = [
				1:	some
				777:	some
				2077:	some
			]
			prio = 1
			result = 2082
			impure = [2079, 2080, 2081, 2082]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2194
			constraints = [
				1:	some
				1850:	some
				2077:	some
			]
			prio = 0
			result = 2087
			impure = [2079, 2084, 2085, 2086, 2087]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2201
			constraints = [
				1:	some
				2088:	some
			]
			prio = 0
			result = 2093
			impure = [2091, 2074, 2092, 2093]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2206
			constraints = [
				1:	some
				777:	some
				2094:	some
			]
			prio = 1
			result = 2098
			impure = [2096, 2080, 2097, 2098]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2209
			constraints = [
				1:	some
				1850:	some
				2094:	some
			]
			prio = 0
			result = 2101
			impure = [2096, 2099, 2085, 2100, 2101]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2216
			constraints = [
				2102:	some
			]
			prio = 0
			result = 2105
			impure = [2104, 2105]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2221
			constraints = [
				2106:	some
			]
			prio = 0
			result = 2114
			impure = [2109, 2110, 2111, 2112, 302, 2113, 2114]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2227
			constraints = [
				2115:	some
			]
			prio = 0
			result = 2123
			impure = [2118, 2119, 2120, 2121, 302, 2122, 2123]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2233
			constraints = [
				2124:	some
			]
			prio = 0
			result = 2127
			impure = [2126, 2127]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2238
			constraints = [
				2128:	some
			]
			prio = 0
			result = 2137
			impure = [2134, 2136, 2137]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2243
			constraints = [
				2138:	some
				2140:	some
			]
			prio = 0
			result = 2147
			impure = [2145, 2146, 2147]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2248
			constraints = [
				2148:	some
			]
			prio = 0
			result = 2151
			impure = [2150, 2151]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2251
			constraints = [
				2152:	some
			]
			prio = 0
			result = 2155
			impure = [2154, 2155]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2254
			constraints = [
				2156:	some
			]
			prio = 0
			result = 2159
			impure = [2158, 2159]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2259
			constraints = [
				2160:	some
			]
			prio = 0
			result = 2168
			impure = [2168]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2262
			constraints = [
				2169:	some
			]
			prio = 0
			result = 2174
			impure = [2174]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2268
			constraints = [
				2175:	some
			]
			prio = 0
			result = 2177
			impure = [2177]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2273
			constraints = [
				2178:	some
			]
			prio = 0
			result = 2186
			impure = [2186]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2276
			constraints = [
				2187:	some
			]
			prio = 0
			result = 2192
			impure = [2192]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2281
			constraints = [
				1:	some
				3:	const_prim(I8)
				2193:	some
			]
			prio = 0
			result = 2201
			impure = [2199, 2200, 2201]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2284
			constraints = [
				1:	some
				3:	const_prim(I16)
				2193:	some
			]
			prio = 0
			result = 2204
			impure = [2202, 2203, 2204]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2287
			constraints = [
				1:	some
				3:	const_prim(I32)
				2193:	some
			]
			prio = 0
			result = 2207
			impure = [2205, 2206, 2207]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2290
			constraints = [
				1:	some
				3:	const_prim(I64)
				2193:	some
			]
			prio = 0
			result = 2210
			impure = [2208, 2209, 2210]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2293
			constraints = [
				1:	some
				3:	const_prim(R64)
				2193:	some
			]
			prio = 0
			result = 2210
			impure = [2208, 2209, 2210]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2296
			constraints = [
				1:	some
				3:	const_prim(F32)
				2193:	some
			]
			prio = 0
			result = 2213
			impure = [2211, 2212, 2213]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2299
			constraints = [
				1:	some
				3:	const_prim(F64)
				2193:	some
			]
			prio = 0
			result = 2216
			impure = [2214, 2215, 2216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2302
			constraints = [
				1:	some
				3:	const_prim(I128)
				2193:	some
			]
			prio = 0
			result = 2219
			impure = [2217, 2218, 2219]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2305
			constraints = [
				1:	some
				2193:	some
				2220:	some
			]
			prio = -1
			result = 2216
			impure = [2214, 2215, 2216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2309
			constraints = [
				1:	some
				777:	some
				2193:	some
			]
			prio = -3
			result = 2225
			impure = [2223, 2224, 2225]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2313
			constraints = [
				1:	some
				2193:	some
				2226:	some
			]
			prio = -2
			result = 2216
			impure = [2214, 2215, 2216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2317
			constraints = [
				1:	some
				2193:	some
				2228:	some
			]
			prio = -4
			result = 2225
			impure = [2223, 2224, 2225]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2322
			constraints = [
				2230:	some
			]
			prio = 0
			result = 2238
			impure = [2236, 2237, 2238]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2325
			constraints = [
				2239:	some
			]
			prio = 0
			result = 2247
			impure = [2245, 2246, 2247]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2328
			constraints = [
				2248:	some
			]
			prio = 0
			result = 2256
			impure = [2254, 2255, 2256]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2331
			constraints = [
				2257:	some
			]
			prio = 0
			result = 2265
			impure = [2263, 2264, 2265]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2334
			constraints = [
				2266:	some
			]
			prio = 0
			result = 2274
			impure = [2272, 2273, 2274]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2337
			constraints = [
				2275:	some
			]
			prio = 0
			result = 2283
			impure = [2281, 2282, 2283]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2341
			constraints = [
				2284:	some
			]
			prio = 0
			result = 2294
			impure = [2290, 2291, 2293, 2294]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2347
			constraints = [
				2295:	some
			]
			prio = 0
			result = 2304
			impure = [2301, 2302, 2303, 2304]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2353
			constraints = [
				2305:	some
			]
			prio = 0
			result = 2314
			impure = [2311, 2312, 2313, 2314]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2359
			constraints = [
				2315:	some
			]
			prio = 0
			result = 2324
			impure = [2321, 2322, 2323, 2324]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2365
			constraints = [
				2325:	some
			]
			prio = 0
			result = 2334
			impure = [2331, 2332, 2333, 2334]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2371
			constraints = [
				2335:	some
			]
			prio = 0
			result = 2344
			impure = [2341, 2342, 2343, 2344]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2380
			constraints = [
				2345:	some
				2351:	const_prim(I8)
			]
			prio = 0
			result = 2356
			impure = [2353, 2354, 2355, 2356]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2384
			constraints = [
				2345:	some
				2351:	const_prim(I16)
			]
			prio = 0
			result = 2359
			impure = [2357, 2354, 2358, 2359]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2388
			constraints = [
				2345:	some
				2351:	const_prim(I32)
			]
			prio = 0
			result = 2362
			impure = [2360, 2354, 2361, 2362]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2392
			constraints = [
				2345:	some
				2351:	const_prim(I64)
			]
			prio = 0
			result = 2365
			impure = [2363, 2354, 2364, 2365]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2396
			constraints = [
				2345:	some
				2351:	const_prim(R64)
			]
			prio = 0
			result = 2365
			impure = [2363, 2354, 2364, 2365]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2401
			constraints = [
				2366:	some
			]
			prio = 0
			result = 2376
			impure = [2373, 2374, 2375, 2376]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2405
			constraints = [
				2377:	some
			]
			prio = 0
			result = 2387
			impure = [2384, 2385, 2386, 2387]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2409
			constraints = [
				2388:	some
			]
			prio = 0
			result = 2398
			impure = [2395, 2396, 2397, 2398]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2414
			constraints = [
				2345:	some
				2351:	const_prim(F32)
			]
			prio = 0
			result = 2401
			impure = [2399, 2354, 2400, 2401]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2418
			constraints = [
				2345:	some
				2351:	const_prim(F64)
			]
			prio = 0
			result = 2404
			impure = [2402, 2354, 2403, 2404]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2423
			constraints = [
				2345:	some
				2351:	const_prim(I128)
			]
			prio = 0
			result = 2411
			impure = [2405, 2406, 2407, 2408, 2409, 2410, 2411]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2430
			constraints = [
				2345:	some
				2412:	some
			]
			prio = -1
			result = 2404
			impure = [2402, 2354, 2403, 2404]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2434
			constraints = [
				2345:	some
				2414:	some
			]
			prio = -3
			result = 2418
			impure = [2416, 2354, 2417, 2418]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2438
			constraints = [
				2345:	some
				2419:	some
			]
			prio = -2
			result = 2404
			impure = [2402, 2354, 2403, 2404]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2442
			constraints = [
				2345:	some
				2421:	some
			]
			prio = -4
			result = 2418
			impure = [2416, 2354, 2417, 2418]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2449
			constraints = [
				2423:	some
			]
			prio = 0
			result = 2427
			impure = [2425, 2426, 2427]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2452
			constraints = [
				2428:	some
			]
			prio = 0
			result = 2432
			impure = [2430, 2431, 2432]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2458
			constraints = [
				1:	some
				2433:	some
				2435:	some
				2440:	some
			]
			prio = 5
			result = 2442
			impure = [2442]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2462
			constraints = [
				1:	some
				2433:	some
				2435:	some
				2443:	some
			]
			prio = 4
			result = 2448
			impure = [2445, 2446, 2447, 2448]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2467
			constraints = [
				1:	some
				1632:	some
				2435:	some
				2449:	some
				2451:	some
			]
			prio = 3
			result = 2455
			impure = [2445, 2453, 2454, 2455]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2474
			constraints = [
				1:	some
				1632:	some
				2435:	some
				2443:	some
				2456:	const_prim(true)
				2457:	const_prim(false)
			]
			prio = 2
			result = 2459
			impure = [2445, 2458, 2459]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2480
			constraints = [
				1:	some
				1632:	some
				2435:	some
				2443:	some
				2456:	const_prim(false)
				2457:	const_prim(true)
			]
			prio = 2
			result = 2461
			impure = [2445, 2460, 2461]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2488
			constraints = [
				1:	some
				1632:	some
				2435:	some
				2443:	some
			]
			prio = 1
			result = 2442
			impure = [2442]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2492
			constraints = [
				1:	some
				3:	const_prim(I128)
				2435:	some
				2439:	const_prim(I128)
			]
			prio = 0
			result = 2442
			impure = [2442]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2498
			constraints = [
				1:	some
				440:	some
				2462:	some
				2466:	const_int(0)
			]
			prio = 2
			result = 2467
			impure = [2467]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2501
			constraints = [
				1:	some
				993:	some
				2462:	some
			]
			prio = 0
			result = 2471
			impure = [2468, 2469, 2470, 2471]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2506
			constraints = [
				1:	some
				440:	some
				2462:	some
			]
			prio = 1
			result = 2475
			impure = [2468, 2473, 2474, 2475]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2513
			constraints = [
				2476:	some
				2483:	some
			]
			prio = 1
			result = 2490
			impure = [2486, 2487, 2488, 2489, 2490]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2518
			constraints = [
				2476:	some
				2491:	some
			]
			prio = 0
			result = 2494
			impure = [2486, 2487, 2488, 2493, 2494]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2525
			constraints = [
				2495:	some
			]
			prio = 0
			result = 2500
			impure = [2499, 2500]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2539
			constraints = [
				2501:	some
				2503:	const_prim(I8X16)
			]
			prio = 0
			result = 2515
			impure = [2504, 2506, 2508, 2509, 2511, 2512, 2513, 2514, 2515]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2563
			constraints = [
				2501:	some
				2503:	const_prim(I16X8)
			]
			prio = 0
			result = 2523
			impure = [2504, 2517, 2519, 2520, 2521, 2522, 2523]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2576
			constraints = [
				2501:	some
				2503:	const_prim(I32X4)
			]
			prio = 0
			result = 2531
			impure = [2504, 2525, 2527, 2528, 2529, 2530, 2531]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2589
			constraints = [
				2501:	some
				2503:	const_prim(I64X2)
			]
			prio = 0
			result = 2540
			impure = [2504, 2532, 2533, 2534, 1137, 2535, 1555, 2536, 2539, 2540]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2603
			constraints = [
				1:	some
				30:	some
				2541:	some
			]
			prio = 0
			result = 2550
			impure = [2546, 2547, 2548, 2549, 2550]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2683
			constraints = [
				1:	some
				1382:	some
				2551:	some
			]
			prio = 1
			result = 2557
			impure = [2557]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2687
			constraints = [
				1:	some
				2551:	some
				2558:	some
			]
			prio = 2
			result = 2562
			impure = [2562]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2691
			constraints = [
				1:	some
				3:	const_prim(I128)
				2551:	some
			]
			prio = 0
			result = 2564
			impure = [2564]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2700
			constraints = [
				1:	some
				1382:	some
				2565:	some
			]
			prio = 1
			result = 2570
			impure = [2570]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2705
			constraints = [
				1:	some
				2558:	some
				2565:	some
			]
			prio = 2
			result = 2572
			impure = [2572]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2711
			constraints = [
				1:	some
				3:	const_prim(I128)
				2565:	some
			]
			prio = 0
			result = 2573
			impure = [2573]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2720
			constraints = [
				1:	some
				1382:	some
				2574:	some
			]
			prio = 1
			result = 2579
			impure = [2579]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2725
			constraints = [
				1:	some
				2558:	some
				2574:	some
			]
			prio = 2
			result = 2581
			impure = [2581]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2731
			constraints = [
				1:	some
				3:	const_prim(I128)
				2574:	some
			]
			prio = 0
			result = 2583
			impure = [2583]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2740
			constraints = [
				1:	some
				1382:	some
				2584:	some
			]
			prio = 1
			result = 2588
			impure = [2588]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2745
			constraints = [
				1:	some
				2558:	some
				2584:	some
			]
			prio = 2
			result = 2589
			impure = [2589]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2751
			constraints = [
				1:	some
				3:	const_prim(I128)
				2584:	some
			]
			prio = 0
			result = 2590
			impure = [2590]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2761
			constraints = [
				1:	some
				1382:	some
				2591:	some
			]
			prio = 1
			result = 2604
			impure = [2595, 2596, 2597, 1169, 2598, 2599, 2600, 2601, 2602, 2603, 2604]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2777
			constraints = [
				1:	some
				3:	const_prim(I32)
				2591:	some
			]
			prio = 2
			result = 2614
			impure = [2605, 2606, 308, 2607, 2609, 2610, 2611, 2612, 2613, 2614]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2791
			constraints = [
				1:	some
				3:	const_prim(I64)
				2591:	some
			]
			prio = 2
			result = 2625
			impure = [2605, 2606, 308, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2809
			constraints = [
				1:	some
				1382:	some
				2626:	some
			]
			prio = 1
			result = 2638
			impure = [2630, 2631, 2632, 1169, 2633, 2634, 2600, 2635, 2636, 2637, 2638]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2825
			constraints = [
				1:	some
				3:	const_prim(I32)
				2626:	some
			]
			prio = 2
			result = 2647
			impure = [2639, 2640, 308, 2641, 2643, 2610, 2644, 2645, 2646, 2647]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2839
			constraints = [
				1:	some
				3:	const_prim(I64)
				2626:	some
			]
			prio = 2
			result = 2658
			impure = [2639, 2640, 308, 2648, 2649, 2650, 2651, 2653, 2654, 2655, 2656, 2657, 2658]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2852
			constraints = [
				1:	some
				2659:	variant(TlsModel::ElfGd)
				2660:	some
				2662:	some
			]
			prio = 0
			result = 2668
			impure = [2667, 2668]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2855
			constraints = [
				1:	some
				2659:	variant(TlsModel::Macho)
				2660:	some
				2662:	some
			]
			prio = 0
			result = 2670
			impure = [2669, 2670]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2860
			constraints = [
				2671:	some
			]
			prio = 0
			result = 2676
			impure = [2674, 2675, 2676]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 3
			constraints = [
				1:	some
				32:	some
				2677:	some
			]
			prio = -4
			result = 2682
			impure = [36, 37, 132, 133, 2681, 2682]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 7
			constraints = [
				1:	some
				113:	some
				2677:	some
			]
			prio = -5
			result = 2684
			impure = [742, 743, 132, 771, 2683, 2684]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 11
			constraints = [
				1:	some
				414:	some
				826:	some
				2685:	some
			]
			prio = -4
			result = 2692
			impure = [830, 831, 419, 2690, 2691, 2692]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 15
			constraints = [
				1:	some
				431:	some
				2677:	some
			]
			prio = -2
			result = 2694
			impure = [436, 437, 132, 438, 2693, 2694]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 19
			constraints = [
				1:	some
				446:	some
				2677:	some
			]
			prio = -2
			result = 2696
			impure = [451, 452, 132, 453, 2695, 2696]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 23
			constraints = [
				1:	some
				458:	some
				2677:	some
			]
			prio = -2
			result = 2698
			impure = [463, 464, 132, 465, 2697, 2698]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 27
			constraints = [
				1:	some
				470:	some
				2677:	some
			]
			prio = -2
			result = 2700
			impure = [475, 476, 132, 477, 2699, 2700]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 31
			constraints = [
				1:	some
				482:	some
				2677:	some
			]
			prio = -2
			result = 2702
			impure = [487, 488, 132, 489, 2701, 2702]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 35
			constraints = [
				1:	some
				494:	some
				2677:	some
			]
			prio = -2
			result = 2704
			impure = [499, 500, 132, 501, 2703, 2704]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 39
			constraints = [
				1:	some
				2017:	some
				2021:	some
				2705:	some
			]
			prio = -2
			result = 2709
			impure = [2023, 2707, 2708, 2709]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 43
			constraints = [
				1:	some
				2017:	some
				2710:	some
			]
			prio = -1
			result = 2714
			impure = [2023, 2029, 2030, 2712, 2713, 2714]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 47
			constraints = [
				1:	some
				2017:	some
				2705:	some
			]
			prio = -3
			result = 2717
			impure = [2023, 2707, 2708, 2034, 2715, 2716, 2717]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 53
			constraints = [
				1:	some
				2038:	some
				2042:	some
				2705:	some
			]
			prio = -2
			result = 2719
			impure = [2044, 2707, 2718, 2719]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 57
			constraints = [
				1:	some
				2038:	some
				2710:	some
			]
			prio = -1
			result = 2721
			impure = [2044, 2047, 2048, 2712, 2720, 2721]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 61
			constraints = [
				1:	some
				2038:	some
				2705:	some
			]
			prio = -3
			result = 2723
			impure = [2044, 2707, 2718, 2051, 2715, 2722, 2723]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 67
			constraints = [
				1:	some
				2054:	some
				2058:	some
				2705:	some
			]
			prio = -2
			result = 2725
			impure = [2060, 2707, 2724, 2725]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 71
			constraints = [
				1:	some
				2054:	some
				2710:	some
			]
			prio = -1
			result = 2727
			impure = [2060, 2063, 2064, 2712, 2726, 2727]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 75
			constraints = [
				1:	some
				2054:	some
				2705:	some
			]
			prio = -3
			result = 2729
			impure = [2060, 2707, 2724, 2067, 2715, 2728, 2729]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 81
			constraints = [
				2730:	some
			]
			prio = 0
			result = 2737
			impure = [2732, 2733, 2734, 2736, 2737]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 87
			constraints = [
				2738:	some
				2741:	const_int(0)
			]
			prio = 0
			result = 2744
			impure = [2742, 2743, 2744]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 92
			constraints = [
				1:	some
				2077:	some
			]
			prio = -1
			result = 2746
			impure = [2079, 2074, 2745, 2746]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 97
			constraints = [
				1:	some
				2094:	some
			]
			prio = -1
			result = 2748
			impure = [2096, 2074, 2747, 2748]
		}
	]
}
term {
	name = lower_branch
	bindings = [
		0: Inst	argument(0)
		1: Option((Value, BlockCall, BlockCall))	extractor(brif, 0)
		2: (Value, BlockCall, BlockCall)	match_some(1)
		3: Value	match_tuple(2, 0)
		4: BlockCall	match_tuple(2, 1)
		5: BlockCall	match_tuple(2, 2)
		6: Option(Value)	extractor(maybe_uextend, 3)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option((IntCC, Value, Value))	extractor(icmp, 9)
		11: (IntCC, Value, Value)	match_some(10)
		12: IntCC	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: Value	match_tuple(11, 2)
		15: Type	extractor(value_type, 13)
		16: MachLabelSlice	argument(1)
		17: Option((MachLabel, MachLabel))	extractor(two_targets, 16)
		18: (MachLabel, MachLabel)	match_some(17)
		19: MachLabel	match_tuple(18, 0)
		20: MachLabel	match_tuple(18, 1)
		21: FlagsAndCC	constructor(lower_icmp_into_flags, [12, 13, 14, 15], 1)
		22: IntCC	constructor(flags_and_cc_cc, [21], 2)
		23: Cond	constructor(cond_code, [22], 3)
		24: ProducesFlags	constructor(flags_and_cc_flags, [21], 4)
		25: BranchTarget	constructor(branch_target, [19], 5)
		26: BranchTarget	constructor(branch_target, [20], 6)
		27: CondBrKind	constructor(cond_br_cond, [23], 7)
		28: ConsumesFlags	constructor(cond_br, [25, 26, 27], 8)
		29: SideEffectNoResult	constructor(with_flags_side_effect, [24, 28], 9)
		30: Unit	constructor(emit_side_effect, [29], 10)
		31: Option((FloatCC, Value, Value))	extractor(fcmp, 9)
		32: (FloatCC, Value, Value)	match_some(31)
		33: FloatCC	match_tuple(32, 0)
		34: Value	match_tuple(32, 1)
		35: Value	match_tuple(32, 2)
		36: Type	extractor(value_type, 34)
		37: Option(Type)	extractor(ty_scalar_float, 36)
		38: Type	match_some(37)
		39: Cond	constructor(fp_cond_code, [33], 1)
		40: ScalarSize	constructor(scalar_size, [38], 2)
		41: Reg	constructor(put_in_reg, [34], 3)
		42: Reg	constructor(put_in_reg, [35], 4)
		43: ProducesFlags	constructor(fpu_cmp, [40, 41, 42], 5)
		44: BranchTarget	constructor(branch_target, [19], 6)
		45: BranchTarget	constructor(branch_target, [20], 7)
		46: CondBrKind	constructor(cond_br_cond, [39], 8)
		47: ConsumesFlags	constructor(cond_br, [44, 45, 46], 9)
		48: SideEffectNoResult	constructor(with_flags_side_effect, [43, 47], 10)
		49: Unit	constructor(emit_side_effect, [48], 11)
		50: Type	extractor(value_type, 3)
		51: ProducesFlags	constructor(flags_to_producesflags, [3], 1)
		52: ValueRegs	constructor(put_in_regs, [3], 2)
		53: usize	const_int(0, usize)
		54: Reg	constructor(value_regs_get, [52, 53], 3)
		55: usize	const_int(1, usize)
		56: Reg	constructor(value_regs_get, [52, 55], 4)
		57: Type	const_prim(I64)
		58: Reg	constructor(orr, [57, 54, 56], 5)
		59: CondBrKind	constructor(cond_br_not_zero, [58], 8)
		60: ConsumesFlags	constructor(cond_br, [44, 45, 59], 9)
		61: SideEffectNoResult	constructor(with_flags_side_effect, [51, 60], 10)
		62: Unit	constructor(emit_side_effect, [61], 11)
		63: Option(Type)	constructor(ty_int_ref_scalar_64, [50], 0)
		64: Type	match_some(63)
		65: Reg	constructor(put_in_reg_zext64, [3], 2)
		66: BranchTarget	constructor(branch_target, [19], 3)
		67: BranchTarget	constructor(branch_target, [20], 4)
		68: CondBrKind	constructor(cond_br_not_zero, [65], 5)
		69: ConsumesFlags	constructor(cond_br, [66, 67, 68], 6)
		70: SideEffectNoResult	constructor(with_flags_side_effect, [51, 69], 7)
		71: Unit	constructor(emit_side_effect, [70], 8)
		72: Option(Inst)	extractor(def_inst, 3)
		73: Inst	match_some(72)
		74: Option((Value, Value))	extractor(band, 73)
		75: (Value, Value)	match_some(74)
		76: Value	match_tuple(75, 0)
		77: Value	match_tuple(75, 1)
		78: Type	extractor(value_type, 76)
		79: Option(u64)	extractor(u64_from_iconst, 77)
		80: u64	match_some(79)
		81: Option(u8)	constructor(test_and_compare_bit_const, [78, 80], 0)
		82: u8	match_some(81)
		83: BranchTarget	constructor(branch_target, [19], 1)
		84: BranchTarget	constructor(branch_target, [20], 2)
		85: Reg	constructor(put_in_reg, [76], 3)
		86: SideEffectNoResult	constructor(tbnz, [83, 84, 85, 82], 4)
		87: Unit	constructor(emit_side_effect, [86], 5)
		88: Option((IntCC, Value, Value))	extractor(icmp, 73)
		89: (IntCC, Value, Value)	match_some(88)
		90: IntCC	match_tuple(89, 0)
		91: Value	match_tuple(89, 1)
		92: Value	match_tuple(89, 2)
		93: Option(Inst)	extractor(def_inst, 91)
		94: Inst	match_some(93)
		95: Option((Value, Value))	extractor(band, 94)
		96: (Value, Value)	match_some(95)
		97: Value	match_tuple(96, 0)
		98: Value	match_tuple(96, 1)
		99: Type	extractor(value_type, 97)
		100: Option(Type)	extractor(fits_in_64, 99)
		101: Type	match_some(100)
		102: Option(u64)	extractor(u64_from_iconst, 98)
		103: u64	match_some(102)
		104: Option(u64)	extractor(u64_from_iconst, 92)
		105: u64	match_some(104)
		106: Option(u8)	constructor(test_and_compare_bit_const, [101, 103], 0)
		107: u8	match_some(106)
		108: Reg	constructor(put_in_reg, [97], 3)
		109: SideEffectNoResult	constructor(tbz, [83, 84, 108, 107], 4)
		110: Unit	constructor(emit_side_effect, [109], 5)
		111: Option(BlockCall)	extractor(jump, 0)
		112: BlockCall	match_some(111)
		113: Option(MachLabel)	extractor(single_target, 16)
		114: MachLabel	match_some(113)
		115: BranchTarget	constructor(branch_target, [114], 1)
		116: SideEffectNoResult	constructor(aarch64_jump, [115], 2)
		117: Unit	constructor(emit_side_effect, [116], 3)
		118: Option((Value, JumpTable))	extractor(br_table, 0)
		119: (Value, JumpTable)	match_some(118)
		120: Value	match_tuple(119, 0)
		121: JumpTable	match_tuple(119, 1)
		122: Option((MachLabel, BoxVecMachLabel))	extractor(jump_table_targets, 16)
		123: (MachLabel, BoxVecMachLabel)	match_some(122)
		124: MachLabel	match_tuple(123, 0)
		125: BoxVecMachLabel	match_tuple(123, 1)
		126: u32	constructor(jump_table_size, [125], 1)
		127: CodeOffset	constructor(targets_jt_space, [125], 2)
		128: SideEffectNoResult	constructor(emit_island, [127], 3)
		129: InstOutput	constructor(side_effect, [128], 4)
		130: Reg	constructor(put_in_reg_zext32, [120], 5)
		131: u64	constructor(u32_as_u64, [126], 0)
		132: Unit	constructor(br_table_impl, [131, 130, 124, 125], 6)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2866
			constraints = [
				1:	some
				6:	some
				8:	some
				10:	some
				17:	some
			]
			prio = 0
			result = 30
			impure = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2876
			constraints = [
				1:	some
				6:	some
				8:	some
				17:	some
				31:	some
				37:	some
			]
			prio = 0
			result = 49
			impure = [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2884
			constraints = [
				1:	some
				17:	some
				50:	const_prim(I128)
			]
			prio = -1
			result = 62
			impure = [51, 52, 54, 56, 58, 44, 45, 59, 60, 61, 62]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2893
			constraints = [
				1:	some
				17:	some
				63:	some
			]
			prio = -2
			result = 71
			impure = [51, 65, 66, 67, 68, 69, 70, 71]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2902
			constraints = [
				1:	some
				17:	some
				72:	some
				74:	some
				79:	some
				81:	some
			]
			prio = 1
			result = 87
			impure = [83, 84, 85, 86, 87]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2908
			constraints = [
				1:	some
				17:	some
				72:	some
				88:	some
				90:	variant(IntCC::Equal)
				93:	some
				95:	some
				100:	some
				102:	some
				104:	some
				105:	const_int(0)
				106:	some
			]
			prio = 1
			result = 110
			impure = [83, 84, 108, 109, 110]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2921
			constraints = [
				111:	some
				113:	some
			]
			prio = 0
			result = 117
			impure = [115, 116, 117]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2928
			constraints = [
				118:	some
				122:	some
			]
			prio = 0
			result = 132
			impure = [126, 127, 128, 129, 130, 132]
		}
	]
}
term {
	name = lower_fmla
	bindings = [
		0: VecALUModOp	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: VectorSize	argument(4)
		5: Reg	constructor(put_in_reg, [3], 1)
		6: Reg	constructor(put_in_reg, [1], 2)
		7: Reg	constructor(put_in_reg, [2], 3)
		8: Reg	constructor(vec_rrr_mod, [0, 5, 6, 7, 4], 4)
		9: Option(Inst)	extractor(def_inst, 1)
		10: Inst	match_some(9)
		11: Option(Value)	extractor(splat, 10)
		12: Value	match_some(11)
		13: Reg	constructor(put_in_reg, [2], 2)
		14: Reg	constructor(put_in_reg, [12], 3)
		15: u8	const_int(0, u8)
		16: Reg	constructor(vec_fmla_elem, [0, 5, 13, 14, 4, 15], 4)
		17: Option(Inst)	extractor(def_inst, 2)
		18: Inst	match_some(17)
		19: Option(Value)	extractor(splat, 18)
		20: Value	match_some(19)
		21: Reg	constructor(put_in_reg, [20], 3)
		22: Reg	constructor(vec_fmla_elem, [0, 5, 6, 21, 4, 15], 4)
		23: Option((MemFlags, Value))	extractor(bitcast, 10)
		24: (MemFlags, Value)	match_some(23)
		25: MemFlags	match_tuple(24, 0)
		26: Value	match_tuple(24, 1)
		27: Option(Inst)	extractor(def_inst, 26)
		28: Inst	match_some(27)
		29: Option((Value, Value, Immediate))	extractor(shuffle, 28)
		30: (Value, Value, Immediate)	match_some(29)
		31: Value	match_tuple(30, 0)
		32: Value	match_tuple(30, 1)
		33: Immediate	match_tuple(30, 2)
		34: Option((u8, u8, u8, u8))	extractor(shuffle32_from_imm, 33)
		35: (u8, u8, u8, u8)	match_some(34)
		36: u8	match_tuple(35, 0)
		37: u8	match_tuple(35, 1)
		38: u8	match_tuple(35, 2)
		39: u8	match_tuple(35, 3)
		40: u64	constructor(u8_as_u64, [36], 0)
		41: u64	const_int(4, u64)
		42: bool	constructor(u64_lt, [40, 41], 0)
		43: Reg	constructor(put_in_reg, [31], 3)
		44: Reg	constructor(vec_fmla_elem, [0, 5, 13, 43, 4, 36], 4)
		45: Option((MemFlags, Value))	extractor(bitcast, 18)
		46: (MemFlags, Value)	match_some(45)
		47: MemFlags	match_tuple(46, 0)
		48: Value	match_tuple(46, 1)
		49: Option(Inst)	extractor(def_inst, 48)
		50: Inst	match_some(49)
		51: Option((Value, Value, Immediate))	extractor(shuffle, 50)
		52: (Value, Value, Immediate)	match_some(51)
		53: Value	match_tuple(52, 0)
		54: Value	match_tuple(52, 1)
		55: Immediate	match_tuple(52, 2)
		56: Option((u8, u8, u8, u8))	extractor(shuffle32_from_imm, 55)
		57: (u8, u8, u8, u8)	match_some(56)
		58: u8	match_tuple(57, 0)
		59: u8	match_tuple(57, 1)
		60: u8	match_tuple(57, 2)
		61: u8	match_tuple(57, 3)
		62: u64	constructor(u8_as_u64, [58], 0)
		63: bool	constructor(u64_lt, [62, 41], 0)
		64: Reg	constructor(put_in_reg, [53], 3)
		65: Reg	constructor(vec_fmla_elem, [0, 5, 6, 64, 4, 58], 4)
		66: Option((u8, u8))	extractor(shuffle64_from_imm, 33)
		67: (u8, u8)	match_some(66)
		68: u8	match_tuple(67, 0)
		69: u8	match_tuple(67, 1)
		70: u64	constructor(u8_as_u64, [68], 0)
		71: u64	const_int(2, u64)
		72: bool	constructor(u64_lt, [70, 71], 0)
		73: Reg	constructor(vec_fmla_elem, [0, 5, 13, 43, 4, 68], 4)
		74: Option((u8, u8))	extractor(shuffle64_from_imm, 55)
		75: (u8, u8)	match_some(74)
		76: u8	match_tuple(75, 0)
		77: u8	match_tuple(75, 1)
		78: u64	constructor(u8_as_u64, [76], 0)
		79: bool	constructor(u64_lt, [78, 71], 0)
		80: Reg	constructor(vec_fmla_elem, [0, 5, 6, 64, 4, 76], 4)
		81: Option(Value)	extractor(fneg, 10)
		82: Value	match_some(81)
		83: VecALUModOp	constructor(neg_fmla, [0], 1)
		84: Reg	constructor(lower_fmla, [83, 82, 2, 3, 4], 2)
		85: Option(Value)	extractor(fneg, 18)
		86: Value	match_some(85)
		87: Reg	constructor(lower_fmla, [83, 1, 86, 3, 4], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 528
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 6, 7, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 533
			constraints = [
				9:	some
				11:	some
			]
			prio = 1
			result = 16
			impure = [5, 13, 14, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 535
			constraints = [
				17:	some
				19:	some
			]
			prio = 2
			result = 22
			impure = [5, 6, 21, 22]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 545
			constraints = [
				4:	variant(VectorSize::Size32x4)
				9:	some
				23:	some
				27:	some
				29:	some
				34:	some
				42:	const_prim(true)
			]
			equals = [
				31 == 32
				36 == 37
				38 == 37
				39 == 37
			]
			prio = 3
			result = 44
			impure = [5, 13, 43, 44]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 548
			constraints = [
				4:	variant(VectorSize::Size32x4)
				17:	some
				45:	some
				49:	some
				51:	some
				56:	some
				63:	const_prim(true)
			]
			equals = [
				53 == 54
				58 == 59
				60 == 59
				61 == 59
			]
			prio = 4
			result = 65
			impure = [5, 6, 64, 65]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 551
			constraints = [
				4:	variant(VectorSize::Size64x2)
				9:	some
				23:	some
				27:	some
				29:	some
				66:	some
				72:	const_prim(true)
			]
			equals = [
				31 == 32
				68 == 69
			]
			prio = 3
			result = 73
			impure = [5, 13, 43, 73]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 554
			constraints = [
				4:	variant(VectorSize::Size64x2)
				17:	some
				45:	some
				49:	some
				51:	some
				74:	some
				79:	const_prim(true)
			]
			equals = [
				53 == 54
				76 == 77
			]
			prio = 4
			result = 80
			impure = [5, 6, 64, 80]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 564
			constraints = [
				9:	some
				81:	some
			]
			prio = 5
			result = 84
			impure = [83, 84]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 566
			constraints = [
				17:	some
				85:	some
			]
			prio = 6
			result = 87
			impure = [83, 87]
		}
	]
}
term {
	name = neg_fmla
	bindings = [
		0: VecALUModOp	argument(0)
		1: VecALUModOp	make_variant(VecALUModOp::Fmls, [])
		2: VecALUModOp	make_variant(VecALUModOp::Fmla, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 570
			constraints = [
				0:	variant(VecALUModOp::Fmla)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 571
			constraints = [
				0:	variant(VecALUModOp::Fmls)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = put_nonzero_in_reg_zext64
	bindings = [
		0: Value	argument(0)
		1: Reg	constructor(put_in_reg_zext64, [0], 1)
		2: Reg	constructor(trap_if_zero_divisor, [1], 2)
		3: Type	extractor(value_type, 0)
		4: Option(Inst)	extractor(def_inst, 0)
		5: Inst	match_some(4)
		6: Option(Imm64)	extractor(iconst, 5)
		7: Imm64	match_some(6)
		8: Option(u64)	extractor(nonzero_u64_from_imm64, 7)
		9: u64	match_some(8)
		10: ImmExtend	make_variant(ImmExtend::Zero, [])
		11: Reg	constructor(imm, [3, 10, 9], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 973
			constraints = [
			]
			prio = -1
			result = 2
			impure = [1, 2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 978
			constraints = [
				4:	some
				6:	some
				8:	some
			]
			prio = 0
			result = 11
			impure = [11]
		}
	]
}
term {
	name = put_nonzero_in_reg_sext64
	bindings = [
		0: Value	argument(0)
		1: Reg	constructor(put_in_reg_sext64, [0], 1)
		2: Reg	constructor(trap_if_zero_divisor, [1], 2)
		3: Type	extractor(value_type, 0)
		4: Option(Inst)	extractor(def_inst, 0)
		5: Inst	match_some(4)
		6: Option(Imm64)	extractor(iconst, 5)
		7: Imm64	match_some(6)
		8: Option(u64)	extractor(nonzero_u64_from_imm64, 7)
		9: u64	match_some(8)
		10: ImmExtend	make_variant(ImmExtend::Sign, [])
		11: Reg	constructor(imm, [3, 10, 9], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1016
			constraints = [
			]
			prio = -1
			result = 2
			impure = [1, 2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1021
			constraints = [
				4:	some
				6:	some
				8:	some
			]
			prio = 0
			result = 11
			impure = [11]
		}
	]
}
term {
	name = cmp_and_choose
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_64, 0)
		2: Type	match_some(1)
		3: Cond	argument(1)
		4: bool	argument(2)
		5: Value	argument(3)
		6: Value	argument(4)
		7: Reg	constructor(put_in_reg, [5], 1)
		8: Reg	constructor(put_in_reg, [6], 2)
		9: OperandSize	constructor(operand_size, [2], 3)
		10: ProducesFlags	constructor(cmp, [9, 7, 8], 4)
		11: ConsumesFlags	constructor(csel, [3, 7, 8], 5)
		12: Reg	constructor(with_flags_reg, [10, 11], 6)
		13: ValueRegs	constructor(value_reg, [12], 7)
		14: Option(Type)	extractor(fits_in_16, 0)
		15: Type	match_some(14)
		16: u8	constructor(ty_bits, [15], 0)
		17: u8	const_int(32, u8)
		18: Reg	constructor(extend, [7, 4, 16, 17], 2)
		19: Reg	constructor(put_in_reg, [6], 3)
		20: Reg	constructor(extend, [19, 4, 16, 17], 4)
		21: OperandSize	constructor(operand_size, [15], 5)
		22: ProducesFlags	constructor(cmp, [21, 18, 20], 6)
		23: ConsumesFlags	constructor(csel, [3, 18, 20], 7)
		24: Reg	constructor(with_flags_reg, [22, 23], 8)
		25: ValueRegs	constructor(value_reg, [24], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1060
			constraints = [
				1:	some
			]
			prio = 0
			result = 13
			impure = [7, 8, 9, 10, 11, 12, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1068
			constraints = [
				14:	some
			]
			prio = 1
			result = 25
			impure = [7, 18, 19, 20, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = lower_shl128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsl, [6, 3, 1], 3)
		8: Reg	constructor(lsl, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsr_imm, [6, 3, 13], 8)
		15: Reg	constructor(lsr, [6, 14, 11], 9)
		16: Reg	constructor(orr, [6, 8, 15], 10)
		17: u64	const_int(64, u64)
		18: ImmLogic	constructor(u64_into_imm_logic, [6, 17], 11)
		19: ProducesFlags	constructor(tst_imm, [6, 1, 18], 12)
		20: Cond	make_variant(Cond::Ne, [])
		21: Reg	constructor(zero_reg, [], 13)
		22: ConsumesFlags	constructor(csel, [20, 21, 7], 14)
		23: ConsumesFlags	constructor(csel, [20, 7, 16], 15)
		24: ConsumesFlags	constructor(consumes_flags_concat, [22, 23], 16)
		25: ValueRegs	constructor(with_flags, [19, 24], 17)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1320
			constraints = [
			]
			prio = 0
			result = 25
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = do_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Option(Type)	extractor(fits_in_16, 1)
		3: Type	match_some(2)
		4: Reg	argument(2)
		5: Value	argument(3)
		6: ValueRegs	constructor(put_in_regs, [5], 1)
		7: usize	const_int(0, usize)
		8: Reg	constructor(value_regs_get, [6, 7], 2)
		9: Type	const_prim(I32)
		10: ImmLogic	constructor(shift_mask, [3], 3)
		11: Reg	constructor(and_imm, [9, 8, 10], 4)
		12: Reg	constructor(alu_rrr, [0, 9, 4, 11], 5)
		13: Reg	constructor(alu_rrr, [0, 9, 4, 8], 3)
		14: Type	const_prim(I64)
		15: Reg	constructor(alu_rrr, [0, 14, 4, 8], 3)
		16: Option(Inst)	extractor(def_inst, 5)
		17: Inst	match_some(16)
		18: Option(Imm64)	extractor(iconst, 17)
		19: Imm64	match_some(18)
		20: Option(ImmShift)	constructor(imm_shift_from_imm64, [1, 19], 0)
		21: ImmShift	match_some(20)
		22: Reg	constructor(alu_rr_imm_shift, [0, 1, 4, 21], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1365
			constraints = [
				2:	some
			]
			prio = -1
			result = 12
			impure = [6, 8, 10, 11, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1374
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 13
			impure = [6, 8, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1375
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 15
			impure = [6, 8, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1383
			constraints = [
				16:	some
				18:	some
				20:	some
			]
			prio = 1
			result = 22
			impure = [22]
		}
	]
}
term {
	name = lower_ushr128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsr, [6, 3, 1], 3)
		8: Reg	constructor(lsr, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsl_imm, [6, 5, 13], 8)
		15: Reg	constructor(lsl, [6, 14, 11], 9)
		16: Reg	constructor(orr, [6, 7, 15], 10)
		17: u64	const_int(64, u64)
		18: ImmLogic	constructor(u64_into_imm_logic, [6, 17], 11)
		19: ProducesFlags	constructor(tst_imm, [6, 1, 18], 12)
		20: Cond	make_variant(Cond::Ne, [])
		21: ConsumesFlags	constructor(csel, [20, 8, 16], 13)
		22: Reg	constructor(zero_reg, [], 14)
		23: ConsumesFlags	constructor(csel, [20, 22, 8], 15)
		24: ConsumesFlags	constructor(consumes_flags_concat, [21, 23], 16)
		25: ValueRegs	constructor(with_flags, [19, 24], 17)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1427
			constraints = [
			]
			prio = 0
			result = 25
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = lower_sshr128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsr, [6, 3, 1], 3)
		8: Reg	constructor(asr, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsl_imm, [6, 5, 13], 8)
		15: Reg	constructor(lsl, [6, 14, 11], 9)
		16: u8	const_int(63, u8)
		17: ImmShift	constructor(imm_shift_from_u8, [16], 10)
		18: Reg	constructor(asr_imm, [6, 5, 17], 11)
		19: Reg	constructor(orr, [6, 7, 15], 12)
		20: u64	const_int(64, u64)
		21: ImmLogic	constructor(u64_into_imm_logic, [6, 20], 13)
		22: ProducesFlags	constructor(tst_imm, [6, 1, 21], 14)
		23: Cond	make_variant(Cond::Ne, [])
		24: ConsumesFlags	constructor(csel, [23, 8, 19], 15)
		25: ConsumesFlags	constructor(csel, [23, 18, 8], 16)
		26: ConsumesFlags	constructor(consumes_flags_concat, [24, 25], 17)
		27: ValueRegs	constructor(with_flags, [22, 26], 18)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1486
			constraints = [
			]
			prio = 0
			result = 27
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27]
		}
	]
}
term {
	name = small_rotr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I32)
		4: ImmLogic	constructor(rotr_mask, [0], 1)
		5: Reg	constructor(and_imm, [3, 2, 4], 2)
		6: u8	constructor(ty_bits, [0], 0)
		7: Imm12	constructor(u8_into_imm12, [6], 3)
		8: Reg	constructor(sub_imm, [3, 5, 7], 4)
		9: Reg	constructor(zero_reg, [], 5)
		10: Reg	constructor(sub, [3, 9, 8], 6)
		11: Reg	constructor(lsr, [3, 1, 5], 7)
		12: Reg	constructor(lsl, [3, 1, 10], 8)
		13: Reg	constructor(orr, [3, 12, 11], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1605
			constraints = [
			]
			prio = 0
			result = 13
			impure = [4, 5, 7, 8, 9, 10, 11, 12, 13]
		}
	]
}
term {
	name = small_rotr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: Type	const_prim(I32)
		4: Reg	constructor(lsr_imm, [3, 1, 2], 1)
		5: ImmShift	constructor(rotr_opposite_amount, [0, 2], 2)
		6: Reg	constructor(lsl_imm, [3, 1, 5], 3)
		7: Reg	constructor(orr, [3, 6, 4], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1626
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5, 6, 7]
		}
	]
}
term {
	name = lower_clz128
	bindings = [
		0: ValueRegs	argument(0)
		1: Type	const_prim(I64)
		2: usize	const_int(1, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: Reg	constructor(a64_clz, [1, 3], 2)
		5: usize	const_int(0, usize)
		6: Reg	constructor(value_regs_get, [0, 5], 3)
		7: Reg	constructor(a64_clz, [1, 6], 4)
		8: u8	const_int(6, u8)
		9: ImmShift	constructor(imm_shift_from_u8, [8], 5)
		10: Reg	constructor(lsr_imm, [1, 4, 9], 6)
		11: Reg	constructor(madd, [1, 7, 10, 4], 7)
		12: ImmExtend	make_variant(ImmExtend::Zero, [])
		13: u64	const_int(0, u64)
		14: Reg	constructor(imm, [1, 12, 13], 8)
		15: ValueRegs	constructor(value_regs, [11, 14], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1691
			constraints = [
			]
			prio = 0
			result = 15
			impure = [3, 4, 6, 7, 9, 10, 11, 14, 15]
		}
	]
}
term {
	name = put_in_reg_ext32
	bindings = [
		0: Value	argument(0)
		1: ArgumentExtension	argument(1)
		2: Reg	constructor(put_in_reg_sext32, [0], 1)
		3: Reg	constructor(put_in_reg_zext32, [0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2610
			constraints = [
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 2
			impure = [2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2612
			constraints = [
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = overflow_op_small
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: ArgumentExtension	argument(3)
		4: ALUOp	argument(4)
		5: ExtendOp	constructor(lower_extend_op, [0, 3], 1)
		6: Reg	constructor(put_in_reg_ext32, [1, 3], 2)
		7: Reg	constructor(put_in_reg, [2], 3)
		8: Reg	constructor(alu_rrr_extend, [4, 0, 6, 7, 5], 4)
		9: OperandSize	make_variant(OperandSize::Size32, [])
		10: ProducesFlags	constructor(cmp_extend, [9, 8, 8, 5], 5)
		11: Cond	make_variant(Cond::Ne, [])
		12: ConsumesFlags	constructor(cset, [11], 6)
		13: Reg	constructor(with_flags_reg, [10, 12], 7)
		14: ValueRegs	constructor(value_reg, [8], 8)
		15: ValueRegs	constructor(value_reg, [13], 9)
		16: InstOutput	constructor(output_pair, [14, 15], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2618
			constraints = [
			]
			prio = 0
			result = 16
			impure = [5, 6, 7, 8, 10, 12, 13, 14, 15, 16]
		}
	]
}
term {
	name = overflow_op_normal
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: ALUOp	argument(3)
		4: Cond	argument(4)
		5: Reg	constructor(put_in_reg, [1], 1)
		6: Reg	constructor(put_in_reg, [2], 2)
		7: ProducesFlags	constructor(alu_rrr_with_flags_paired, [0, 5, 6, 3], 3)
		8: ConsumesFlags	constructor(cset_paired, [4], 4)
		9: ValueRegs	constructor(with_flags, [7, 8], 5)
		10: usize	const_int(0, usize)
		11: Reg	constructor(value_regs_get, [9, 10], 6)
		12: ValueRegs	constructor(value_reg, [11], 7)
		13: usize	const_int(1, usize)
		14: Reg	constructor(value_regs_get, [9, 13], 8)
		15: ValueRegs	constructor(value_reg, [14], 9)
		16: InstOutput	constructor(output_pair, [12, 15], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2647
			constraints = [
			]
			prio = 0
			result = 16
			impure = [5, 6, 7, 8, 9, 11, 12, 14, 15, 16]
		}
	]
}
term {
	name = overflow_op_128
	bindings = [
		0: Value	argument(0)
		1: Value	argument(1)
		2: ALUOp	argument(2)
		3: ALUOp	argument(3)
		4: Cond	argument(4)
		5: ValueRegs	constructor(put_in_regs, [0], 1)
		6: usize	const_int(0, usize)
		7: Reg	constructor(value_regs_get, [5, 6], 2)
		8: usize	const_int(1, usize)
		9: Reg	constructor(value_regs_get, [5, 8], 3)
		10: ValueRegs	constructor(put_in_regs, [1], 4)
		11: Reg	constructor(value_regs_get, [10, 6], 5)
		12: Reg	constructor(value_regs_get, [10, 8], 6)
		13: Type	const_prim(I64)
		14: ProducesFlags	constructor(alu_rrr_with_flags_paired, [13, 7, 11, 2], 7)
		15: ConsumesAndProducesFlags	constructor(alu_rrr_with_flags_chained, [13, 9, 12, 3], 8)
		16: ConsumesFlags	constructor(cset_paired, [4], 9)
		17: MultiReg	constructor(with_flags_chained, [14, 15, 16], 10)
		18: InstOutput	constructor(multi_reg_to_pair_and_single, [17], 11)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2658
			constraints = [
			]
			prio = 0
			result = 18
			impure = [5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18]
		}
	]
}

inline term: lower
expansions = 479
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(uwiden_high, 5)
		7: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: bool	const_prim(true)
		11: Type	match_tuple(4, 0)
		12: ScalarSize	constructor(lane_size, [11], 2)
		13: Reg	constructor(vec_extend, [7, 9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(swiden_high, 5)
		7: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: bool	const_prim(true)
		11: Type	match_tuple(4, 0)
		12: ScalarSize	constructor(lane_size, [11], 2)
		13: Reg	constructor(vec_extend, [7, 9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Uimm8))	extractor(extract_vector, 0)
		4: (Value, Uimm8)	match_some(3)
		5: Uimm8	match_tuple(4, 1)
		6: Value	match_tuple(4, 0)
		7: Reg	constructor(put_in_reg, [6], 1)
		8: ValueRegs	constructor(value_reg, [7], 2)
		9: InstOutput	constructor(output, [8], 3)
	]
	constraints = [
		3:	some
		5:	const_int(0)
	]
	result = 9
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(DynamicStackSlot)	extractor(dynamic_stack_addr, 0)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: Reg	constructor(writable_reg_to_reg, [5], 0)
		7: ValueRegs	constructor(value_reg, [6], 4)
		8: InstOutput	constructor(output, [7], 5)
	]
	constraints = [
		3:	some
	]
	result = 8
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(uunarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn128_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(8)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(uqxtn, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(uqxtn2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(uunarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn64_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(8)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(uqxtn, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(uunarrow, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 1)
		9: Option(Value)	constructor(zero_value, [8], 0)
		10: Type	match_tuple(4, 0)
		11: Option(Type)	extractor(ty_dyn128_int, 10)
		12: Value	match_tuple(7, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(11)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(uqxtn, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		9:	some
		6:	some
		11:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(unarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn128_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(8)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(sqxtun, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(sqxtun2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(unarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn64_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(8)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(sqxtun, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(unarrow, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 1)
		9: Option(Value)	constructor(zero_value, [8], 0)
		10: Type	match_tuple(4, 0)
		11: Option(Type)	extractor(ty_dyn128_int, 10)
		12: Value	match_tuple(7, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(11)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(sqxtun, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		11:	some
		6:	some
		9:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(snarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn128_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(8)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(sqxtn, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(sqxtn2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(snarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn64_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(8)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(sqxtn, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(snarrow, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 1)
		9: Option(Value)	constructor(zero_value, [8], 0)
		10: Type	match_tuple(4, 0)
		11: Option(Type)	extractor(ty_dyn128_int, 10)
		12: Value	match_tuple(7, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(11)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(sqxtn, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		3:	some
		9:	some
		6:	some
		11:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fmax, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmax, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fmin, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmin, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fdiv, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fdiv, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fmul, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmul, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fsub, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fsub, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: VecALUOp	make_variant(VecALUOp::Fadd, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: ValueRegs	constructor(value_reg, [16], 5)
		18: InstOutput	constructor(output, [17], 6)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(lane_fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(imul, 7)
		9: Type	match_some(6)
		10: Option((u32, u32))	extractor(dynamic_lane, 9)
		11: VecALUOp	make_variant(VecALUOp::Mul, [])
		12: (Value, Value)	match_some(8)
		13: Value	match_tuple(12, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Value	match_tuple(12, 1)
		16: Reg	constructor(put_in_reg, [15], 2)
		17: VectorSize	constructor(vector_size, [9], 3)
		18: Reg	constructor(vec_rrr, [11, 14, 16, 17], 4)
		19: ValueRegs	constructor(value_reg, [18], 5)
		20: InstOutput	constructor(output, [19], 6)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
		10:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(isub, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: VectorSize	constructor(vector_size, [7], 3)
		15: Reg	constructor(sub_vec, [11, 13, 14], 4)
		16: ValueRegs	constructor(value_reg, [15], 5)
		17: InstOutput	constructor(output, [16], 6)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(dynamic_lane, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: VectorSize	constructor(vector_size, [7], 3)
		15: Reg	constructor(add_vec, [11, 13, 14], 4)
		16: ValueRegs	constructor(value_reg, [15], 5)
		17: InstOutput	constructor(output, [16], 6)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(fvpromote_low, 0)
		4: VecRRLongOp	make_variant(VecRRLongOp::Fcvtl32, [])
		5: Value	match_some(3)
		6: Reg	constructor(put_in_reg, [5], 1)
		7: bool	const_prim(false)
		8: Reg	constructor(vec_rr_long, [4, 6, 7], 2)
		9: InstOutput	constructor(output_reg, [8], 3)
	]
	constraints = [
		3:	some
	]
	result = 9
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: TlsModel	extractor(tls_model, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(GlobalValue)	extractor(tls_value, 7)
		9: GlobalValue	match_some(8)
		10: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 9)
		11: (ExternalName, RelocDistance, i64)	match_some(10)
		12: ExternalName	match_tuple(11, 0)
		13: Reg	constructor(macho_tls_get_addr, [12], 1)
		14: InstOutput	constructor(output_reg, [13], 2)
	]
	constraints = [
		8:	some
		3:	some
		10:	some
		6:	variant(TlsModel::Macho)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: TlsModel	extractor(tls_model, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(GlobalValue)	extractor(tls_value, 7)
		9: GlobalValue	match_some(8)
		10: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 9)
		11: (ExternalName, RelocDistance, i64)	match_some(10)
		12: ExternalName	match_tuple(11, 0)
		13: Reg	constructor(elf_tls_get_addr, [12], 1)
		14: InstOutput	constructor(output_reg, [13], 2)
	]
	constraints = [
		3:	some
		10:	some
		6:	variant(TlsModel::ElfGd)
		8:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(smul_overflow, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Reg	constructor(zero_reg, [], 3)
		15: Reg	constructor(madd, [8, 11, 13, 14], 4)
		16: ValueRegs	constructor(value_reg, [15], 11)
		17: OperandSize	make_variant(OperandSize::Size64, [])
		18: Reg	constructor(put_in_reg, [10], 5)
		19: Reg	constructor(put_in_reg, [12], 6)
		20: Reg	constructor(smulh, [8, 18, 19], 7)
		21: u64	const_int(63, u64)
		22: ProducesFlags	constructor(cmp_rr_shift_asr, [17, 20, 15, 21], 8)
		23: Cond	make_variant(Cond::Ne, [])
		24: ConsumesFlags	constructor(cset, [23], 9)
		25: Reg	constructor(with_flags_reg, [22, 24], 10)
		26: ValueRegs	constructor(value_reg, [25], 12)
		27: InstOutput	constructor(output_pair, [16, 26], 13)
	]
	constraints = [
		5:	const_prim(I64)
		7:	some
		3:	some
	]
	result = 27
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(smul_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Reg	constructor(zero_reg, [], 3)
		14: Reg	constructor(smaddl, [10, 12, 13], 4)
		15: ValueRegs	constructor(value_reg, [14], 8)
		16: OperandSize	make_variant(OperandSize::Size64, [])
		17: ExtendOp	make_variant(ExtendOp::SXTW, [])
		18: ProducesFlags	constructor(cmp_extend, [16, 14, 14, 17], 5)
		19: Cond	make_variant(Cond::Ne, [])
		20: ConsumesFlags	constructor(cset, [19], 6)
		21: Reg	constructor(with_flags_reg, [18, 20], 7)
		22: ValueRegs	constructor(value_reg, [21], 9)
		23: InstOutput	constructor(output_pair, [15, 22], 10)
	]
	constraints = [
		7:	some
		5:	const_prim(I32)
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(smul_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_sext32, [11], 2)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg_sext32, [13], 3)
		15: Reg	constructor(zero_reg, [], 4)
		16: Reg	constructor(madd, [9, 12, 14, 15], 5)
		17: ValueRegs	constructor(value_reg, [16], 9)
		18: OperandSize	make_variant(OperandSize::Size32, [])
		19: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		20: ExtendOp	constructor(lower_extend_op, [9, 19], 1)
		21: ProducesFlags	constructor(cmp_extend, [18, 16, 16, 20], 6)
		22: Cond	make_variant(Cond::Ne, [])
		23: ConsumesFlags	constructor(cset, [22], 7)
		24: Reg	constructor(with_flags_reg, [21, 23], 8)
		25: ValueRegs	constructor(value_reg, [24], 10)
		26: InstOutput	constructor(output_pair, [17, 25], 11)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 26
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umul_overflow, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Reg	constructor(zero_reg, [], 3)
		15: Reg	constructor(madd, [8, 11, 13, 14], 4)
		16: ValueRegs	constructor(value_reg, [15], 12)
		17: Reg	constructor(put_in_reg, [10], 5)
		18: Reg	constructor(put_in_reg, [12], 6)
		19: Reg	constructor(umulh, [8, 17, 18], 7)
		20: u8	const_int(0, u8)
		21: Imm12	constructor(u8_into_imm12, [20], 8)
		22: ProducesFlags	constructor(cmp64_imm, [19, 21], 9)
		23: Cond	make_variant(Cond::Ne, [])
		24: ConsumesFlags	constructor(cset, [23], 10)
		25: Reg	constructor(with_flags_reg, [22, 24], 11)
		26: ValueRegs	constructor(value_reg, [25], 13)
		27: InstOutput	constructor(output_pair, [16, 26], 14)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I64)
	]
	result = 27
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umul_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Reg	constructor(zero_reg, [], 3)
		14: Reg	constructor(umaddl, [10, 12, 13], 4)
		15: ValueRegs	constructor(value_reg, [14], 8)
		16: OperandSize	make_variant(OperandSize::Size64, [])
		17: ExtendOp	make_variant(ExtendOp::UXTW, [])
		18: ProducesFlags	constructor(cmp_extend, [16, 14, 14, 17], 5)
		19: Cond	make_variant(Cond::Ne, [])
		20: ConsumesFlags	constructor(cset, [19], 6)
		21: Reg	constructor(with_flags_reg, [18, 20], 7)
		22: ValueRegs	constructor(value_reg, [21], 9)
		23: InstOutput	constructor(output_pair, [15, 22], 10)
	]
	constraints = [
		5:	const_prim(I32)
		7:	some
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(umul_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext32, [11], 2)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg_zext32, [13], 3)
		15: Reg	constructor(zero_reg, [], 4)
		16: Reg	constructor(madd, [9, 12, 14, 15], 5)
		17: ValueRegs	constructor(value_reg, [16], 9)
		18: OperandSize	make_variant(OperandSize::Size32, [])
		19: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		20: ExtendOp	constructor(lower_extend_op, [9, 19], 1)
		21: ProducesFlags	constructor(cmp_extend, [18, 16, 16, 20], 6)
		22: Cond	make_variant(Cond::Ne, [])
		23: ConsumesFlags	constructor(cset, [22], 7)
		24: Reg	constructor(with_flags_reg, [21, 23], 8)
		25: ValueRegs	constructor(value_reg, [24], 10)
		26: InstOutput	constructor(output_pair, [17, 25], 11)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 26
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ssub_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: ALUOp	make_variant(ALUOp::SubS, [])
		12: ALUOp	make_variant(ALUOp::SbcS, [])
		13: Cond	make_variant(Cond::Vs, [])
		14: InstOutput	constructor(overflow_op_128, [9, 10, 11, 12, 13], 1)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I128)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ssub_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ALUOp	make_variant(ALUOp::SubS, [])
		14: Cond	make_variant(Cond::Vs, [])
		15: InstOutput	constructor(overflow_op_normal, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ssub_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		14: ALUOp	make_variant(ALUOp::Sub, [])
		15: InstOutput	constructor(overflow_op_small, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(usub_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: ALUOp	make_variant(ALUOp::SubS, [])
		12: ALUOp	make_variant(ALUOp::SbcS, [])
		13: Cond	make_variant(Cond::Lo, [])
		14: InstOutput	constructor(overflow_op_128, [9, 10, 11, 12, 13], 1)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(usub_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ALUOp	make_variant(ALUOp::SubS, [])
		14: Cond	make_variant(Cond::Lo, [])
		15: InstOutput	constructor(overflow_op_normal, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(usub_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		14: ALUOp	make_variant(ALUOp::Sub, [])
		15: InstOutput	constructor(overflow_op_small, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sadd_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: ALUOp	make_variant(ALUOp::AddS, [])
		12: ALUOp	make_variant(ALUOp::AdcS, [])
		13: Cond	make_variant(Cond::Vs, [])
		14: InstOutput	constructor(overflow_op_128, [9, 10, 11, 12, 13], 1)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_32_or_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sadd_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ALUOp	make_variant(ALUOp::AddS, [])
		14: Cond	make_variant(Cond::Vs, [])
		15: InstOutput	constructor(overflow_op_normal, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sadd_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		14: ALUOp	make_variant(ALUOp::Add, [])
		15: InstOutput	constructor(overflow_op_small, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(uadd_overflow, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Value	match_tuple(8, 1)
		11: ALUOp	make_variant(ALUOp::AddS, [])
		12: ALUOp	make_variant(ALUOp::AdcS, [])
		13: Cond	make_variant(Cond::Hs, [])
		14: InstOutput	constructor(overflow_op_128, [9, 10, 11, 12, 13], 1)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(uadd_overflow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_32_or_64, 7)
		9: Type	match_some(8)
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ALUOp	make_variant(ALUOp::AddS, [])
		14: Cond	make_variant(Cond::Hs, [])
		15: InstOutput	constructor(overflow_op_normal, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(uadd_overflow, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		14: ALUOp	make_variant(ALUOp::Add, [])
		15: InstOutput	constructor(overflow_op_small, [9, 11, 12, 13, 14], 1)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, TrapCode))	extractor(uadd_overflow_trap, 7)
		9: Type	match_some(6)
		10: (Value, Value, TrapCode)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: ProducesFlags	constructor(add_with_flags_paired, [9, 12, 14], 3)
		16: TrapCode	match_tuple(10, 2)
		17: Reg	constructor(trap_if_overflow, [15, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Type	const_prim(I64)
		7: Reg	constructor(put_in_reg, [4], 3)
		8: u8	const_int(0, u8)
		9: ScalarSize	make_variant(ScalarSize::Size64, [])
		10: Reg	constructor(mov_from_vec, [7, 8, 9], 4)
		11: u8	const_int(63, u8)
		12: ImmShift	constructor(imm_shift_from_u8, [11], 7)
		13: Reg	constructor(lsr_imm, [6, 10, 12], 8)
		14: Reg	constructor(put_in_reg, [4], 1)
		15: u8	const_int(1, u8)
		16: Reg	constructor(mov_from_vec, [14, 15, 9], 2)
		17: ImmShift	constructor(imm_shift_from_u8, [11], 5)
		18: Reg	constructor(lsr_imm, [6, 16, 17], 6)
		19: u64	const_int(1, u64)
		20: Option(ShiftOpAndAmt)	constructor(lshl_from_u64, [6, 19], 0)
		21: ShiftOpAndAmt	match_some(20)
		22: Reg	constructor(add_shift, [6, 13, 18, 21], 9)
		23: InstOutput	constructor(output_reg, [22], 10)
	]
	constraints = [
		3:	some
		5:	const_prim(I64X2)
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Reg	constructor(put_in_reg, [4], 1)
		7: u8	const_int(31, u8)
		8: VectorSize	make_variant(VectorSize::Size32x4, [])
		9: Reg	constructor(sshr_vec_imm, [6, 7, 8], 2)
		10: u128	const_int(633825300187901677051779743745, u128)
		11: Reg	constructor(constant_f128, [10], 3)
		12: Reg	constructor(and_vec, [9, 11, 8], 4)
		13: Reg	constructor(addv, [12, 8], 5)
		14: u8	const_int(0, u8)
		15: ScalarSize	make_variant(ScalarSize::Size32, [])
		16: Reg	constructor(mov_from_vec, [13, 14, 15], 6)
		17: InstOutput	constructor(output_reg, [16], 7)
	]
	constraints = [
		5:	const_prim(I32X4)
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Reg	constructor(put_in_reg, [4], 1)
		7: u8	const_int(15, u8)
		8: VectorSize	make_variant(VectorSize::Size16x8, [])
		9: Reg	constructor(sshr_vec_imm, [6, 7, 8], 2)
		10: u128	const_int(664619068533544770747334646890102785, u128)
		11: Reg	constructor(constant_f128, [10], 3)
		12: Reg	constructor(and_vec, [9, 11, 8], 4)
		13: Reg	constructor(addv, [12, 8], 5)
		14: u8	const_int(0, u8)
		15: ScalarSize	make_variant(ScalarSize::Size16, [])
		16: Reg	constructor(mov_from_vec, [13, 14, 15], 6)
		17: InstOutput	constructor(output_reg, [16], 7)
	]
	constraints = [
		5:	const_prim(I16X8)
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vhigh_bits, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Reg	constructor(put_in_reg, [4], 1)
		7: u8	const_int(7, u8)
		8: VectorSize	make_variant(VectorSize::Size8x16, [])
		9: Reg	constructor(sshr_vec_imm, [6, 7, 8], 2)
		10: u128	const_int(-169808226154284360427508033573982305791, u128)
		11: Reg	constructor(constant_f128, [10], 3)
		12: Reg	constructor(and_vec, [9, 11, 8], 4)
		13: u8	const_int(8, u8)
		14: Reg	constructor(vec_extract, [12, 12, 13], 5)
		15: Reg	constructor(zip1, [12, 14, 8], 6)
		16: VectorSize	make_variant(VectorSize::Size16x8, [])
		17: Reg	constructor(addv, [15, 16], 7)
		18: u8	const_int(0, u8)
		19: ScalarSize	make_variant(ScalarSize::Size16, [])
		20: Reg	constructor(mov_from_vec, [17, 18, 19], 8)
		21: InstOutput	constructor(output_reg, [20], 9)
	]
	constraints = [
		3:	some
		5:	const_prim(I8X16)
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((StackSlot, Offset32))	extractor(stack_addr, 0)
		4: (StackSlot, Offset32)	match_some(3)
		5: StackSlot	match_tuple(4, 0)
		6: Offset32	match_tuple(4, 1)
		7: Reg	constructor(compute_stack_addr, [5, 6], 1)
		8: InstOutput	constructor(output_reg, [7], 2)
	]
	constraints = [
		3:	some
	]
	result = 8
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_scalar_float, 6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(put_in_reg, [5], 2)
		11: Uimm8	match_tuple(4, 2)
		12: u8	extractor(u8_from_uimm8, 11)
		13: u8	const_int(0, u8)
		14: Type	extractor(value_type, 8)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(mov_vec_elem, [9, 10, 12, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		7:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Uimm8))	extractor(insertlane, 0)
		4: (Value, Value, Uimm8)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_int, 6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(put_in_reg, [5], 2)
		11: Uimm8	match_tuple(4, 2)
		12: u8	extractor(u8_from_uimm8, 11)
		13: Type	extractor(value_type, 8)
		14: VectorSize	constructor(vector_size, [13], 3)
		15: Reg	constructor(mov_to_vec, [9, 10, 12, 14], 4)
		16: InstOutput	constructor(output_reg, [15], 5)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Uimm8))	extractor(extractlane, 7)
		9: (Value, Uimm8)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Uimm8	match_tuple(9, 1)
		13: u8	extractor(u8_from_uimm8, 12)
		14: Type	extractor(value_type, 10)
		15: VectorSize	constructor(vector_size, [14], 2)
		16: Reg	constructor(fpu_move_from_vec, [11, 13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Uimm8))	extractor(extractlane, 7)
		9: (Value, Uimm8)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Uimm8	match_tuple(9, 1)
		13: u8	extractor(u8_from_uimm8, 12)
		14: Type	match_some(6)
		15: ScalarSize	constructor(scalar_size, [14], 2)
		16: Reg	constructor(mov_from_vec, [11, 13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Uimm8))	extractor(extractlane, 7)
		9: (Value, Uimm8)	match_some(8)
		10: Uimm8	match_tuple(9, 1)
		11: u8	extractor(u8_from_uimm8, 10)
		12: Value	match_tuple(9, 0)
		13: InstOutput	constructor(output_value, [12], 1)
	]
	constraints = [
		8:	some
		11:	const_int(0)
		3:	some
		6:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value))	extractor(bitcast, 6)
		8: (MemFlags, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Type	extractor(value_type, 9)
		11: InstOutput	constructor(output_value, [9], 1)
	]
	constraints = [
		5:	const_prim(I128)
		7:	some
		10:	const_prim(I128)
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	constructor(ty_int_ref_scalar_64, [11], 0)
		13: InstOutput	constructor(output_value, [10], 1)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
		12:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	constructor(ty_int_ref_scalar_64, [11], 0)
		13: bool	constructor(is_ref_type, [11], 0)
		14: bool	constructor(is_ref_type, [5], 0)
		15: Reg	constructor(put_in_reg, [10], 1)
		16: Reg	constructor(copy_reg, [11, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		14:	const_prim(true)
		3:	some
		12:	some
		13:	const_prim(false)
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	constructor(ty_int_ref_scalar_64, [11], 0)
		13: bool	constructor(is_ref_type, [11], 0)
		14: bool	constructor(is_ref_type, [5], 0)
		15: Reg	constructor(put_in_reg, [10], 1)
		16: Reg	constructor(copy_reg, [5, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		3:	some
		14:	const_prim(false)
		13:	const_prim(true)
		6:	some
		12:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(fits_in_64, 11)
		13: Type	match_some(12)
		14: Option(Type)	extractor(ty_float_or_vec, 13)
		15: Reg	constructor(put_in_reg, [10], 1)
		16: u8	const_int(0, u8)
		17: ScalarSize	constructor(scalar_size, [5], 2)
		18: Reg	constructor(mov_from_vec, [15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		14:	some
		6:	some
		3:	some
		8:	some
		12:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_float_or_vec, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	constructor(ty_int_ref_scalar_64, [11], 0)
		13: Reg	constructor(put_in_reg, [10], 1)
		14: ScalarSize	constructor(scalar_size, [11], 2)
		15: Reg	constructor(mov_to_fpu, [13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
		12:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_float_or_vec, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(bitcast, 7)
		9: (MemFlags, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Type	extractor(value_type, 10)
		12: Option(Type)	extractor(ty_float_or_vec, 11)
		13: InstOutput	constructor(output_value, [10], 1)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
		12:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(set_pinned_reg, 0)
		4: Value	match_some(3)
		5: Reg	constructor(put_in_reg, [4], 1)
		6: SideEffectNoResult	constructor(write_pinned_reg, [5], 2)
		7: InstOutput	constructor(side_effect, [6], 3)
	]
	constraints = [
		3:	some
	]
	result = 7
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_pinned_reg, 0)
		4: PReg	constructor(preg_pinned, [], 1)
		5: Reg	constructor(mov_from_preg, [4], 2)
		6: InstOutput	constructor(output_reg, [5], 3)
	]
	constraints = [
		3:	some
	]
	result = 6
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_dyn_vec128, 6)
		8: Type	const_prim(I8X16)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: i32	constructor(offset32_to_i32, [10], 0)
		12: AMode	constructor(amode, [8, 9, 11], 1)
		13: MemFlags	match_tuple(4, 0)
		14: Reg	constructor(put_in_reg, [5], 2)
		15: SideEffectNoResult	constructor(aarch64_fpustore128, [12, 13, 14], 3)
		16: InstOutput	constructor(side_effect, [15], 4)
	]
	constraints = [
		7:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_dyn_vec64, 6)
		8: Type	const_prim(F64)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: i32	constructor(offset32_to_i32, [10], 0)
		12: AMode	constructor(amode, [8, 9, 11], 1)
		13: MemFlags	match_tuple(4, 0)
		14: Reg	constructor(put_in_reg, [5], 2)
		15: SideEffectNoResult	constructor(aarch64_fpustore64, [12, 13, 14], 3)
		16: InstOutput	constructor(side_effect, [15], 4)
	]
	constraints = [
		7:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_vec128, 6)
		8: Type	const_prim(I8X16)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: i32	constructor(offset32_to_i32, [10], 0)
		12: AMode	constructor(amode, [8, 9, 11], 1)
		13: MemFlags	match_tuple(4, 0)
		14: Reg	constructor(put_in_reg, [5], 2)
		15: SideEffectNoResult	constructor(aarch64_fpustore128, [12, 13, 14], 3)
		16: InstOutput	constructor(side_effect, [15], 4)
	]
	constraints = [
		3:	some
		7:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(ty_vec64, 6)
		8: Type	const_prim(F64)
		9: Value	match_tuple(4, 2)
		10: Offset32	match_tuple(4, 3)
		11: i32	constructor(offset32_to_i32, [10], 0)
		12: AMode	constructor(amode, [8, 9, 11], 1)
		13: MemFlags	match_tuple(4, 0)
		14: Reg	constructor(put_in_reg, [5], 2)
		15: SideEffectNoResult	constructor(aarch64_fpustore64, [12, 13, 14], 3)
		16: InstOutput	constructor(side_effect, [15], 4)
	]
	constraints = [
		7:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Value	match_tuple(4, 2)
		8: Offset32	match_tuple(4, 3)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: PairAMode	constructor(pair_amode, [7, 9], 1)
		11: MemFlags	match_tuple(4, 0)
		12: ValueRegs	constructor(put_in_regs, [5], 2)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 3)
		15: ValueRegs	constructor(put_in_regs, [5], 4)
		16: usize	const_int(1, usize)
		17: Reg	constructor(value_regs_get, [15, 16], 5)
		18: SideEffectNoResult	constructor(aarch64_storep64, [10, 11, 14, 17], 6)
		19: InstOutput	constructor(side_effect, [18], 7)
	]
	constraints = [
		3:	some
		6:	const_prim(I128)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(F64)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_fpustore64, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		3:	some
		6:	const_prim(F64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(F32)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_fpustore32, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		6:	const_prim(F32)
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore32, 0)
		4: Type	const_prim(I32)
		5: (MemFlags, Value, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 2)
		7: Offset32	match_tuple(5, 3)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Value	match_tuple(5, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: SideEffectNoResult	constructor(aarch64_store32, [9, 10, 12], 3)
		14: InstOutput	constructor(side_effect, [13], 4)
	]
	constraints = [
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore16, 0)
		4: Type	const_prim(I16)
		5: (MemFlags, Value, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 2)
		7: Offset32	match_tuple(5, 3)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Value	match_tuple(5, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: SideEffectNoResult	constructor(aarch64_store16, [9, 10, 12], 3)
		14: InstOutput	constructor(side_effect, [13], 4)
	]
	constraints = [
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(istore8, 0)
		4: Type	const_prim(I8)
		5: (MemFlags, Value, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 2)
		7: Offset32	match_tuple(5, 3)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Value	match_tuple(5, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: SideEffectNoResult	constructor(aarch64_store8, [9, 10, 12], 3)
		14: InstOutput	constructor(side_effect, [13], 4)
	]
	constraints = [
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I64)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_store64, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		6:	const_prim(R64)
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I64)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_store64, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		6:	const_prim(I64)
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I32)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_store32, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		3:	some
		6:	const_prim(I32)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I16)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_store16, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		6:	const_prim(I16)
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value, Offset32))	extractor(store, 0)
		4: (MemFlags, Value, Value, Offset32)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Type	const_prim(I8)
		8: Value	match_tuple(4, 2)
		9: Offset32	match_tuple(4, 3)
		10: i32	constructor(offset32_to_i32, [9], 0)
		11: AMode	constructor(amode, [7, 8, 10], 1)
		12: MemFlags	match_tuple(4, 0)
		13: Reg	constructor(put_in_reg, [5], 2)
		14: SideEffectNoResult	constructor(aarch64_store8, [11, 12, 13], 3)
		15: InstOutput	constructor(side_effect, [14], 4)
	]
	constraints = [
		3:	some
		6:	const_prim(I8)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload32x2, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size64, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload32x2, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size64, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload16x4, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size32, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload16x4, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size32, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload8x8, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size16, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload8x8, 0)
		4: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		5: Type	const_prim(F64)
		6: (MemFlags, Value, Offset32)	match_some(3)
		7: Value	match_tuple(6, 1)
		8: Offset32	match_tuple(6, 2)
		9: i32	constructor(offset32_to_i32, [8], 0)
		10: AMode	constructor(amode, [5, 7, 9], 1)
		11: MemFlags	match_tuple(6, 0)
		12: Reg	constructor(aarch64_fpuload64, [10, 11], 2)
		13: bool	const_prim(false)
		14: ScalarSize	make_variant(ScalarSize::Size16, [])
		15: Reg	constructor(vec_extend, [4, 12, 13, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload32, 0)
		4: Type	const_prim(I32)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_sload32, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload32, 0)
		4: Type	const_prim(I32)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_uload32, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload16, 0)
		4: Type	const_prim(I16)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_sload16, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload16, 0)
		4: Type	const_prim(I16)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_uload16, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(sload8, 0)
		4: Type	const_prim(I8)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_sload8, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Offset32))	extractor(uload8, 0)
		4: Type	const_prim(I8)
		5: (MemFlags, Value, Offset32)	match_some(3)
		6: Value	match_tuple(5, 1)
		7: Offset32	match_tuple(5, 2)
		8: i32	constructor(offset32_to_i32, [7], 0)
		9: AMode	constructor(amode, [4, 6, 8], 1)
		10: MemFlags	match_tuple(5, 0)
		11: Reg	constructor(aarch64_uload8, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((MemFlags, Value, Offset32))	extractor(load, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn_vec128, 7)
		9: Type	const_prim(I8X16)
		10: (MemFlags, Value, Offset32)	match_some(6)
		11: Value	match_tuple(10, 1)
		12: Offset32	match_tuple(10, 2)
		13: i32	constructor(offset32_to_i32, [12], 0)
		14: AMode	constructor(amode, [9, 11, 13], 1)
		15: MemFlags	match_tuple(10, 0)
		16: Reg	constructor(aarch64_fpuload128, [14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((MemFlags, Value, Offset32))	extractor(load, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_dyn_vec64, 7)
		9: Type	const_prim(F64)
		10: (MemFlags, Value, Offset32)	match_some(6)
		11: Value	match_tuple(10, 1)
		12: Offset32	match_tuple(10, 2)
		13: i32	constructor(offset32_to_i32, [12], 0)
		14: AMode	constructor(amode, [9, 11, 13], 1)
		15: MemFlags	match_tuple(10, 0)
		16: Reg	constructor(aarch64_fpuload64, [14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Offset32))	extractor(load, 7)
		9: Type	const_prim(I8X16)
		10: (MemFlags, Value, Offset32)	match_some(8)
		11: Value	match_tuple(10, 1)
		12: Offset32	match_tuple(10, 2)
		13: i32	constructor(offset32_to_i32, [12], 0)
		14: AMode	constructor(amode, [9, 11, 13], 1)
		15: MemFlags	match_tuple(10, 0)
		16: Reg	constructor(aarch64_fpuload128, [14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((MemFlags, Value, Offset32))	extractor(load, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec64, 7)
		9: Type	const_prim(F64)
		10: (MemFlags, Value, Offset32)	match_some(6)
		11: Value	match_tuple(10, 1)
		12: Offset32	match_tuple(10, 2)
		13: i32	constructor(offset32_to_i32, [12], 0)
		14: AMode	constructor(amode, [9, 11, 13], 1)
		15: MemFlags	match_tuple(10, 0)
		16: Reg	constructor(aarch64_fpuload64, [14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: (MemFlags, Value, Offset32)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Offset32	match_tuple(8, 2)
		11: i32	constructor(offset32_to_i32, [10], 0)
		12: PairAMode	constructor(pair_amode, [9, 11], 1)
		13: MemFlags	match_tuple(8, 0)
		14: ValueRegs	constructor(aarch64_loadp64, [12, 13], 2)
		15: InstOutput	constructor(output, [14], 3)
	]
	constraints = [
		5:	const_prim(I128)
		7:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(F64)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_fpuload64, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(F64)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(F32)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_fpuload32, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(F32)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(I64)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_uload64, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		5:	const_prim(R64)
		3:	some
		7:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(I64)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_uload64, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I64)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(I32)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_uload32, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I32)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(I16)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_uload16, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I16)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((MemFlags, Value, Offset32))	extractor(load, 6)
		8: Type	const_prim(I8)
		9: (MemFlags, Value, Offset32)	match_some(7)
		10: Value	match_tuple(9, 1)
		11: Offset32	match_tuple(9, 2)
		12: i32	constructor(offset32_to_i32, [11], 0)
		13: AMode	constructor(amode, [8, 10, 12], 1)
		14: MemFlags	match_tuple(9, 0)
		15: Reg	constructor(aarch64_uload8, [13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I8)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((SigRef, Value, ValueSlice))	extractor(return_call_indirect, 0)
		4: (SigRef, Value, ValueSlice)	match_some(3)
		5: SigRef	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: ValueSlice	match_tuple(4, 2)
		8: InstOutput	constructor(gen_return_call_indirect, [5, 6, 7], 1)
	]
	constraints = [
		3:	some
	]
	result = 8
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((FuncRef, ValueSlice))	extractor(return_call, 0)
		4: (FuncRef, ValueSlice)	match_some(3)
		5: FuncRef	match_tuple(4, 0)
		6: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 5)
		7: SigRef	match_tuple(6, 0)
		8: ExternalName	match_tuple(6, 1)
		9: RelocDistance	match_tuple(6, 2)
		10: ValueSlice	match_tuple(4, 1)
		11: InstOutput	constructor(gen_return_call, [7, 8, 9, 10], 1)
	]
	constraints = [
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(ValueSlice)	extractor(return, 0)
		4: ValueSlice	match_some(3)
		5: InstOutput	constructor(lower_return, [4], 1)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((SigRef, Value, ValueSlice))	extractor(call_indirect, 0)
		4: (SigRef, Value, ValueSlice)	match_some(3)
		5: SigRef	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: ValueSlice	match_tuple(4, 2)
		8: InstOutput	constructor(gen_call_indirect, [5, 6, 7], 1)
	]
	constraints = [
		3:	some
	]
	result = 8
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((FuncRef, ValueSlice))	extractor(call, 0)
		4: (FuncRef, ValueSlice)	match_some(3)
		5: FuncRef	match_tuple(4, 0)
		6: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 5)
		7: SigRef	match_tuple(6, 0)
		8: ExternalName	match_tuple(6, 1)
		9: RelocDistance	match_tuple(6, 2)
		10: ValueSlice	match_tuple(4, 1)
		11: InstOutput	constructor(gen_call, [7, 8, 9, 10], 1)
	]
	constraints = [
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_return_address, 0)
		4: Reg	constructor(aarch64_link, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_stack_pointer, 0)
		4: Reg	constructor(aarch64_sp, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(get_frame_pointer, 0)
		4: Reg	constructor(aarch64_fp, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(GlobalValue)	extractor(symbol_value, 0)
		4: GlobalValue	match_some(3)
		5: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 4)
		6: (ExternalName, RelocDistance, i64)	match_some(5)
		7: ExternalName	match_tuple(6, 0)
		8: BoxExternalName	constructor(box_external_name, [7], 1)
		9: i64	match_tuple(6, 2)
		10: Reg	constructor(load_ext_name, [8, 9], 2)
		11: InstOutput	constructor(output_reg, [10], 3)
	]
	constraints = [
		3:	some
		5:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(FuncRef)	extractor(func_addr, 0)
		4: FuncRef	match_some(3)
		5: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 4)
		6: ExternalName	match_tuple(5, 1)
		7: BoxExternalName	constructor(box_external_name, [6], 1)
		8: i64	const_int(0, i64)
		9: Reg	constructor(load_ext_name, [7, 8], 2)
		10: InstOutput	constructor(output_reg, [9], 3)
	]
	constraints = [
		3:	some
	]
	result = 10
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(debugtrap, 0)
		4: SideEffectNoResult	constructor(brk, [], 1)
		5: InstOutput	constructor(side_effect, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(is_invalid, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: OperandSize	constructor(operand_size, [5], 1)
		7: Reg	constructor(put_in_reg, [4], 2)
		8: u8	const_int(1, u8)
		9: Imm12	constructor(u8_into_imm12, [8], 3)
		10: ProducesFlags	constructor(cmn_imm, [6, 7, 9], 4)
		11: Cond	make_variant(Cond::Eq, [])
		12: ConsumesFlags	constructor(materialize_bool_result, [11], 5)
		13: ValueRegs	constructor(with_flags, [10, 12], 6)
		14: InstOutput	constructor(output, [13], 7)
	]
	constraints = [
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(is_null, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: OperandSize	constructor(operand_size, [5], 1)
		7: Reg	constructor(put_in_reg, [4], 2)
		8: u8	const_int(0, u8)
		9: Imm12	constructor(u8_into_imm12, [8], 3)
		10: ProducesFlags	constructor(cmp_imm, [6, 7, 9], 4)
		11: Cond	make_variant(Cond::Eq, [])
		12: ConsumesFlags	constructor(materialize_bool_result, [11], 5)
		13: ValueRegs	constructor(with_flags, [10, 12], 6)
		14: InstOutput	constructor(output, [13], 7)
	]
	constraints = [
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(fence, 0)
		4: SideEffectNoResult	constructor(aarch64_fence, [], 1)
		5: InstOutput	constructor(side_effect, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_vec64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uwiden_high, 7)
		9: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: u8	const_int(1, u8)
		13: VectorSize	make_variant(VectorSize::Size32x2, [])
		14: Reg	constructor(fpu_move_from_vec, [11, 12, 13], 2)
		15: bool	const_prim(false)
		16: ScalarSize	constructor(lane_size, [5], 3)
		17: Reg	constructor(vec_extend, [9, 14, 15, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uwiden_high, 7)
		9: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: bool	const_prim(true)
		13: Type	match_some(6)
		14: ScalarSize	constructor(lane_size, [13], 2)
		15: Reg	constructor(vec_extend, [9, 11, 12, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(uwiden_low, 5)
		7: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: bool	const_prim(false)
		11: Type	match_tuple(4, 0)
		12: ScalarSize	constructor(lane_size, [11], 2)
		13: Reg	constructor(vec_extend, [7, 9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_vec64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_high, 7)
		9: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: u8	const_int(1, u8)
		13: VectorSize	make_variant(VectorSize::Size32x2, [])
		14: Reg	constructor(fpu_move_from_vec, [11, 12, 13], 2)
		15: bool	const_prim(false)
		16: ScalarSize	constructor(lane_size, [5], 3)
		17: Reg	constructor(vec_extend, [9, 14, 15, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(swiden_high, 7)
		9: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: bool	const_prim(true)
		13: Type	match_some(6)
		14: ScalarSize	constructor(lane_size, [13], 2)
		15: Reg	constructor(vec_extend, [9, 11, 12, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(swiden_low, 5)
		7: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: bool	const_prim(false)
		11: Type	match_tuple(4, 0)
		12: ScalarSize	constructor(lane_size, [11], 2)
		13: Reg	constructor(vec_extend, [7, 9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(uunarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(uqxtn, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(uqxtn2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec64_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(uunarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(6)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(uqxtn, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(uunarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Value)	constructor(zero_value, [10], 0)
		12: Value	match_tuple(9, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(6)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(uqxtn, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
		11:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(unarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(sqxtun, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(sqxtun2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec64_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(unarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(6)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(sqxtun, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(unarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Value)	constructor(zero_value, [10], 0)
		12: Value	match_tuple(9, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(6)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(sqxtun, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		11:	some
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(snarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(lane_size, [12], 2)
		14: Reg	constructor(sqxtn, [11, 13], 3)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: ScalarSize	constructor(lane_size, [12], 5)
		18: Reg	constructor(sqxtn2, [14, 16, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(snarrow, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_vec64_int, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: u8	const_int(1, u8)
		15: u8	const_int(0, u8)
		16: VectorSize	make_variant(VectorSize::Size64x2, [])
		17: Reg	constructor(mov_vec_elem, [11, 13, 14, 15, 16], 3)
		18: Type	match_some(8)
		19: ScalarSize	constructor(lane_size, [18], 4)
		20: Reg	constructor(sqxtn, [17, 19], 5)
		21: InstOutput	constructor(output_reg, [20], 6)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128_int, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(snarrow, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Value)	constructor(zero_value, [10], 0)
		12: Value	match_tuple(9, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Type	match_some(6)
		15: ScalarSize	constructor(lane_size, [14], 2)
		16: Reg	constructor(sqxtn, [13, 15], 3)
		17: InstOutput	constructor(output_reg, [16], 4)
	]
	constraints = [
		6:	some
		11:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(fvdemote, 0)
		4: Value	match_some(3)
		5: Reg	constructor(put_in_reg, [4], 1)
		6: ScalarSize	make_variant(ScalarSize::Size32, [])
		7: Reg	constructor(fcvtn, [5, 6], 2)
		8: InstOutput	constructor(output_reg, [7], 3)
	]
	constraints = [
		3:	some
	]
	result = 8
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value, Value, Value))	extractor(atomic_cas, 7)
		9: (MemFlags, Value, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 3)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_cas_loop, [11, 13, 15, 16, 17], 4)
		19: InstOutput	constructor(output_reg, [18], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, Value, Value, Value))	extractor(atomic_cas, 8)
		10: (MemFlags, Value, Value, Value)	match_some(9)
		11: Value	match_tuple(10, 1)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 2)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Value	match_tuple(10, 3)
		16: Reg	constructor(put_in_reg, [15], 3)
		17: Type	match_some(6)
		18: MemFlags	match_tuple(10, 0)
		19: Reg	constructor(lse_atomic_cas, [12, 14, 16, 17, 18], 4)
		20: InstOutput	constructor(output_reg, [19], 5)
	]
	constraints = [
		6:	some
		9:	some
		7:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Xchg, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		10:	variant(AtomicRmwOp::Xchg)
		6:	some
		3:	some
		8:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umax, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		6:	some
		10:	variant(AtomicRmwOp::Umax)
		3:	some
		8:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umin, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		3:	some
		10:	variant(AtomicRmwOp::Umin)
		8:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smax, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		8:	some
		3:	some
		10:	variant(AtomicRmwOp::Smax)
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smin, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		8:	some
		6:	some
		10:	variant(AtomicRmwOp::Smin)
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Eor, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		6:	some
		8:	some
		10:	variant(AtomicRmwOp::Xor)
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Orr, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
		10:	variant(AtomicRmwOp::Or)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Nand, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		6:	some
		10:	variant(AtomicRmwOp::Nand)
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::And, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		3:	some
		10:	variant(AtomicRmwOp::And)
		8:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Sub, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		3:	some
		8:	some
		10:	variant(AtomicRmwOp::Sub)
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 7)
		9: (MemFlags, AtomicRmwOp, Value, Value)	match_some(8)
		10: AtomicRmwOp	match_tuple(9, 1)
		11: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Add, [])
		12: Value	match_tuple(9, 2)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(9, 3)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(9, 0)
		18: Reg	constructor(atomic_rmw_loop, [11, 13, 15, 16, 17], 3)
		19: InstOutput	constructor(output_reg, [18], 4)
	]
	constraints = [
		3:	some
		8:	some
		10:	variant(AtomicRmwOp::Add)
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Clr, [])
		13: Value	match_tuple(10, 2)
		14: Type	match_some(6)
		15: Value	match_tuple(10, 3)
		16: Reg	constructor(put_in_reg, [15], 1)
		17: Reg	constructor(zero_reg, [], 2)
		18: Reg	constructor(eon, [14, 16, 17], 3)
		19: MemFlags	match_tuple(10, 0)
		20: Reg	constructor(lse_atomic_rmw, [12, 13, 18, 14, 19], 4)
		21: InstOutput	constructor(output_reg, [20], 5)
	]
	constraints = [
		7:	some
		11:	variant(AtomicRmwOp::And)
		6:	some
		3:	some
		9:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Add, [])
		13: Value	match_tuple(10, 2)
		14: Type	match_some(6)
		15: Reg	constructor(zero_reg, [], 1)
		16: Value	match_tuple(10, 3)
		17: Reg	constructor(put_in_reg, [16], 2)
		18: Reg	constructor(sub, [14, 15, 17], 3)
		19: MemFlags	match_tuple(10, 0)
		20: Reg	constructor(lse_atomic_rmw, [12, 13, 18, 14, 19], 4)
		21: InstOutput	constructor(output_reg, [20], 5)
	]
	constraints = [
		6:	some
		7:	some
		11:	variant(AtomicRmwOp::Sub)
		9:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Umin, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		3:	some
		9:	some
		11:	variant(AtomicRmwOp::Umin)
		7:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Umax, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		9:	some
		6:	some
		11:	variant(AtomicRmwOp::Umax)
		7:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Smin, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		9:	some
		6:	some
		3:	some
		11:	variant(AtomicRmwOp::Smin)
		7:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Smax, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		7:	some
		9:	some
		11:	variant(AtomicRmwOp::Smax)
		3:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Set, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		6:	some
		9:	some
		11:	variant(AtomicRmwOp::Or)
		3:	some
		7:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Eor, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		9:	some
		3:	some
		7:	some
		6:	some
		11:	variant(AtomicRmwOp::Xor)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Option(())	extractor(use_lse, 0)
		8: Inst	match_tuple(4, 1)
		9: Option((MemFlags, AtomicRmwOp, Value, Value))	extractor(atomic_rmw, 8)
		10: (MemFlags, AtomicRmwOp, Value, Value)	match_some(9)
		11: AtomicRmwOp	match_tuple(10, 1)
		12: AtomicRMWOp	make_variant(AtomicRMWOp::Add, [])
		13: Value	match_tuple(10, 2)
		14: Value	match_tuple(10, 3)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: MemFlags	match_tuple(10, 0)
		18: Reg	constructor(lse_atomic_rmw, [12, 13, 15, 16, 17], 2)
		19: InstOutput	constructor(output_reg, [18], 3)
	]
	constraints = [
		6:	some
		9:	some
		7:	some
		3:	some
		11:	variant(AtomicRmwOp::Add)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((MemFlags, Value, Value))	extractor(atomic_store, 0)
		4: (MemFlags, Value, Value)	match_some(3)
		5: Value	match_tuple(4, 1)
		6: Type	extractor(value_type, 5)
		7: Option(Type)	extractor(valid_atomic_transaction, 6)
		8: Type	match_some(7)
		9: MemFlags	match_tuple(4, 0)
		10: Reg	constructor(put_in_reg, [5], 1)
		11: Value	match_tuple(4, 2)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: SideEffectNoResult	constructor(store_release, [8, 9, 10, 12], 3)
		14: InstOutput	constructor(side_effect, [13], 4)
	]
	constraints = [
		7:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(valid_atomic_transaction, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((MemFlags, Value))	extractor(atomic_load, 7)
		9: Type	match_some(6)
		10: (MemFlags, Value)	match_some(8)
		11: MemFlags	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Reg	constructor(load_acquire, [9, 11, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option((MemFlags, Value, Offset32))	extractor(load, 9)
		11: Option(Inst)	constructor(is_sinkable_inst, [7], 0)
		12: Type	match_tuple(4, 0)
		13: Type	constructor(lane_type, [12], 0)
		14: Inst	match_some(11)
		15: Reg	constructor(sink_load_into_addr, [13, 14], 1)
		16: VectorSize	constructor(vector_size, [12], 2)
		17: (MemFlags, Value, Offset32)	match_some(10)
		18: MemFlags	match_tuple(17, 0)
		19: Reg	constructor(ld1r, [15, 16, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		6:	some
		8:	some
		10:	some
		11:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option(Value)	extractor(ireduce, 9)
		11: Value	match_some(10)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: Option(Imm64)	extractor(iconst, 13)
		15: Imm64	match_some(14)
		16: u64	extractor(u64_from_imm64, 15)
		17: Type	match_tuple(4, 0)
		18: VectorSize	constructor(vector_size, [17], 1)
		19: Reg	constructor(splat_const, [16, 18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		8:	some
		14:	some
		12:	some
		6:	some
		10:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option(Imm64)	extractor(iconst, 9)
		11: Imm64	match_some(10)
		12: u64	extractor(u64_from_imm64, 11)
		13: Type	match_tuple(4, 0)
		14: VectorSize	constructor(vector_size, [13], 1)
		15: Reg	constructor(splat_const, [12, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		10:	some
		8:	some
		6:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option(Ieee64)	extractor(f64const, 9)
		11: Ieee64	match_some(10)
		12: u64	extractor(u64_from_ieee64, 11)
		13: Type	match_tuple(4, 0)
		14: VectorSize	constructor(vector_size, [13], 1)
		15: Reg	constructor(splat_const, [12, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		10:	some
		3:	some
		8:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Option(Inst)	extractor(def_inst, 7)
		9: Inst	match_some(8)
		10: Option(Ieee32)	extractor(f32const, 9)
		11: Ieee32	match_some(10)
		12: u32	extractor(u32_from_ieee32, 11)
		13: u64	constructor(u32_as_u64, [12], 0)
		14: Type	match_tuple(4, 0)
		15: VectorSize	constructor(vector_size, [14], 1)
		16: Reg	constructor(splat_const, [13, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		8:	some
		10:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	extractor(ty_scalar_float, 8)
		10: Reg	constructor(put_in_reg, [7], 1)
		11: Type	match_tuple(4, 0)
		12: VectorSize	constructor(vector_size, [11], 2)
		13: u8	const_int(0, u8)
		14: Reg	constructor(vec_dup_from_fpu, [10, 12, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		3:	some
		6:	some
		9:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(splat, 5)
		7: Value	match_some(6)
		8: Type	extractor(value_type, 7)
		9: Option(Type)	constructor(ty_int_ref_scalar_64, [8], 0)
		10: Reg	constructor(put_in_reg, [7], 1)
		11: Type	match_tuple(4, 0)
		12: VectorSize	constructor(vector_size, [11], 2)
		13: Reg	constructor(vec_dup, [10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		9:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Constant)	extractor(vconst, 5)
		7: Constant	match_some(6)
		8: Option(u64)	extractor(u64_from_constant, 7)
		9: Type	match_tuple(4, 0)
		10: Option(Type)	constructor(ty_vec64, [9], 0)
		11: u64	match_some(8)
		12: Reg	constructor(constant_f64, [11], 1)
		13: InstOutput	constructor(output_reg, [12], 2)
	]
	constraints = [
		6:	some
		8:	some
		10:	some
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Constant)	extractor(vconst, 7)
		9: Constant	match_some(8)
		10: Option(u128)	extractor(u128_from_constant, 9)
		11: u128	match_some(10)
		12: Reg	constructor(constant_f128, [11], 1)
		13: InstOutput	constructor(output_reg, [12], 2)
	]
	constraints = [
		8:	some
		10:	some
		6:	some
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select_spectre_guard, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: Type	const_prim(I64)
		12: ValueRegs	constructor(put_in_regs, [8], 1)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 2)
		15: usize	const_int(1, usize)
		16: Reg	constructor(value_regs_get, [12, 15], 3)
		17: Reg	constructor(orr, [11, 14, 16], 4)
		18: Reg	constructor(zero_reg, [], 5)
		19: ProducesFlags	constructor(cmp, [10, 17, 18], 6)
		20: Cond	make_variant(Cond::Ne, [])
		21: Type	match_tuple(4, 0)
		22: Value	match_tuple(7, 1)
		23: Value	match_tuple(7, 2)
		24: ValueRegs	constructor(lower_select, [19, 20, 21, 22, 23], 7)
		25: InstOutput	constructor(output, [24], 8)
	]
	constraints = [
		6:	some
		9:	const_prim(I128)
		3:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select_spectre_guard, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_64, 9)
		11: OperandSize	make_variant(OperandSize::Size64, [])
		12: Reg	constructor(put_in_reg_zext64, [8], 1)
		13: Reg	constructor(zero_reg, [], 2)
		14: ProducesFlags	constructor(cmp, [11, 12, 13], 3)
		15: Cond	make_variant(Cond::Ne, [])
		16: Type	match_tuple(4, 0)
		17: Value	match_tuple(7, 1)
		18: Value	match_tuple(7, 2)
		19: ValueRegs	constructor(lower_select, [14, 15, 16, 17, 18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		3:	some
		6:	some
		10:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select_spectre_guard, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((IntCC, Value, Value))	extractor(icmp, 12)
		14: (IntCC, Value, Value)	match_some(13)
		15: IntCC	match_tuple(14, 0)
		16: Value	match_tuple(14, 1)
		17: Value	match_tuple(14, 2)
		18: Type	extractor(value_type, 16)
		19: FlagsAndCC	constructor(lower_icmp_into_flags, [15, 16, 17, 18], 1)
		20: ProducesFlags	constructor(flags_and_cc_flags, [19], 2)
		21: IntCC	constructor(flags_and_cc_cc, [19], 3)
		22: Cond	constructor(cond_code, [21], 4)
		23: Type	match_tuple(4, 0)
		24: Value	match_tuple(7, 1)
		25: Value	match_tuple(7, 2)
		26: ValueRegs	constructor(lower_select, [20, 22, 23, 24, 25], 5)
		27: InstOutput	constructor(output, [26], 8)
	]
	constraints = [
		13:	some
		3:	some
		6:	some
		11:	some
		9:	some
	]
	result = 27
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: Type	const_prim(I64)
		12: ValueRegs	constructor(put_in_regs, [8], 1)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 2)
		15: usize	const_int(1, usize)
		16: Reg	constructor(value_regs_get, [12, 15], 3)
		17: Reg	constructor(orr, [11, 14, 16], 4)
		18: Reg	constructor(zero_reg, [], 5)
		19: ProducesFlags	constructor(cmp, [10, 17, 18], 6)
		20: Cond	make_variant(Cond::Ne, [])
		21: Type	match_tuple(4, 0)
		22: Value	match_tuple(7, 1)
		23: Value	match_tuple(7, 2)
		24: ValueRegs	constructor(lower_select, [19, 20, 21, 22, 23], 7)
		25: InstOutput	constructor(output, [24], 8)
	]
	constraints = [
		9:	const_prim(I128)
		3:	some
		6:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_64, 9)
		11: OperandSize	make_variant(OperandSize::Size64, [])
		12: Reg	constructor(put_in_reg_zext64, [8], 1)
		13: Reg	constructor(zero_reg, [], 2)
		14: ProducesFlags	constructor(cmp, [11, 12, 13], 3)
		15: Cond	make_variant(Cond::Ne, [])
		16: Type	match_tuple(4, 0)
		17: Value	match_tuple(7, 1)
		18: Value	match_tuple(7, 2)
		19: ValueRegs	constructor(lower_select, [14, 15, 16, 17, 18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		6:	some
		3:	some
		10:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: OperandSize	make_variant(OperandSize::Size32, [])
		12: Reg	constructor(put_in_reg_zext32, [8], 1)
		13: Reg	constructor(zero_reg, [], 2)
		14: ProducesFlags	constructor(cmp, [11, 12, 13], 3)
		15: Cond	make_variant(Cond::Ne, [])
		16: Type	match_tuple(4, 0)
		17: Value	match_tuple(7, 1)
		18: Value	match_tuple(7, 2)
		19: ValueRegs	constructor(lower_select, [14, 15, 16, 17, 18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		6:	some
		10:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Type	extractor(value_type, 8)
		10: Type	const_prim(I32)
		11: Reg	constructor(put_in_reg, [8], 1)
		12: u64	const_int(255, u64)
		13: ImmLogic	constructor(u64_into_imm_logic, [10, 12], 2)
		14: ProducesFlags	constructor(tst_imm, [10, 11, 13], 3)
		15: Cond	make_variant(Cond::Ne, [])
		16: Type	match_tuple(4, 0)
		17: Value	match_tuple(7, 1)
		18: Value	match_tuple(7, 2)
		19: ValueRegs	constructor(lower_select, [14, 15, 16, 17, 18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		3:	some
		9:	const_prim(I8)
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((FloatCC, Value, Value))	extractor(fcmp, 12)
		14: (FloatCC, Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Type	extractor(value_type, 15)
		17: ScalarSize	constructor(scalar_size, [16], 2)
		18: Reg	constructor(put_in_reg, [15], 3)
		19: Value	match_tuple(14, 2)
		20: Reg	constructor(put_in_reg, [19], 4)
		21: ProducesFlags	constructor(fpu_cmp, [17, 18, 20], 5)
		22: FloatCC	match_tuple(14, 0)
		23: Cond	constructor(fp_cond_code, [22], 1)
		24: Type	match_tuple(4, 0)
		25: Value	match_tuple(7, 1)
		26: Value	match_tuple(7, 2)
		27: ValueRegs	constructor(lower_select, [21, 23, 24, 25, 26], 6)
		28: InstOutput	constructor(output, [27], 7)
	]
	constraints = [
		11:	some
		3:	some
		13:	some
		6:	some
		9:	some
	]
	result = 28
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(select, 5)
		7: (Value, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Option(Value)	extractor(maybe_uextend, 8)
		10: Value	match_some(9)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((IntCC, Value, Value))	extractor(icmp, 12)
		14: (IntCC, Value, Value)	match_some(13)
		15: IntCC	match_tuple(14, 0)
		16: Value	match_tuple(14, 1)
		17: Value	match_tuple(14, 2)
		18: Type	extractor(value_type, 16)
		19: FlagsAndCC	constructor(lower_icmp_into_flags, [15, 16, 17, 18], 1)
		20: ProducesFlags	constructor(flags_and_cc_flags, [19], 2)
		21: IntCC	constructor(flags_and_cc_cc, [19], 3)
		22: Cond	constructor(cond_code, [21], 4)
		23: Type	match_tuple(4, 0)
		24: Value	match_tuple(7, 1)
		25: Value	match_tuple(7, 2)
		26: ValueRegs	constructor(lower_select, [20, 22, 23, 24, 25], 5)
		27: InstOutput	constructor(output, [26], 6)
	]
	constraints = [
		11:	some
		13:	some
		9:	some
		3:	some
		6:	some
	]
	result = 27
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(TrapCode)	extractor(resumable_trap, 0)
		4: TrapCode	match_some(3)
		5: SideEffectNoResult	constructor(udf, [4], 1)
		6: InstOutput	constructor(side_effect, [5], 2)
	]
	constraints = [
		3:	some
	]
	result = 6
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(TrapCode)	extractor(trap, 0)
		4: TrapCode	match_some(3)
		5: SideEffectNoResult	constructor(udf, [4], 1)
		6: InstOutput	constructor(side_effect, [5], 2)
	]
	constraints = [
		3:	some
	]
	result = 6
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((IntCC, Value, Value))	extractor(icmp, 0)
		4: (IntCC, Value, Value)	match_some(3)
		5: IntCC	match_tuple(4, 0)
		6: Value	match_tuple(4, 1)
		7: Value	match_tuple(4, 2)
		8: Type	extractor(value_type, 6)
		9: Type	const_prim(I8)
		10: ValueRegs	constructor(lower_icmp_into_reg, [5, 6, 7, 8, 9], 1)
		11: InstOutput	constructor(output, [10], 2)
	]
	constraints = [
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((IntCC, Value, Value))	extractor(icmp, 7)
		9: (IntCC, Value, Value)	match_some(8)
		10: IntCC	match_tuple(9, 0)
		11: Option(IntCC)	extractor(icmp_zero_cond, 10)
		12: Value	match_tuple(9, 1)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: IntCC	match_some(11)
		15: Value	match_tuple(9, 2)
		16: Reg	constructor(put_in_reg, [15], 1)
		17: VectorSize	constructor(vector_size, [5], 2)
		18: Reg	constructor(int_cmp_zero_swap, [14, 16, 17], 3)
		19: ValueRegs	constructor(value_reg, [18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
		13:	some
		11:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((IntCC, Value, Value))	extractor(icmp, 7)
		9: (IntCC, Value, Value)	match_some(8)
		10: IntCC	match_tuple(9, 0)
		11: Option(IntCC)	extractor(icmp_zero_cond_not_eq, 10)
		12: Value	match_tuple(9, 1)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: Value	match_tuple(9, 2)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: VectorSize	constructor(vector_size, [5], 2)
		17: Reg	constructor(cmeq0, [15, 16], 3)
		18: Reg	constructor(not, [17, 16], 4)
		19: ValueRegs	constructor(value_reg, [18], 5)
		20: InstOutput	constructor(output, [19], 6)
	]
	constraints = [
		13:	some
		6:	some
		11:	some
		3:	some
		8:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((IntCC, Value, Value))	extractor(icmp, 7)
		9: (IntCC, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 2)
		11: Option(Value)	constructor(zero_value, [10], 0)
		12: IntCC	match_tuple(9, 0)
		13: Option(IntCC)	extractor(icmp_zero_cond, 12)
		14: IntCC	match_some(13)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 1)
		17: VectorSize	constructor(vector_size, [5], 2)
		18: Reg	constructor(int_cmp_zero, [14, 16, 17], 3)
		19: ValueRegs	constructor(value_reg, [18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		13:	some
		3:	some
		11:	some
		6:	some
		8:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((IntCC, Value, Value))	extractor(icmp, 7)
		9: (IntCC, Value, Value)	match_some(8)
		10: IntCC	match_tuple(9, 0)
		11: Option(IntCC)	extractor(icmp_zero_cond_not_eq, 10)
		12: Value	match_tuple(9, 2)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: Value	match_tuple(9, 1)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: VectorSize	constructor(vector_size, [5], 2)
		17: Reg	constructor(cmeq0, [15, 16], 3)
		18: Reg	constructor(not, [17, 16], 4)
		19: ValueRegs	constructor(value_reg, [18], 5)
		20: InstOutput	constructor(output, [19], 6)
	]
	constraints = [
		11:	some
		8:	some
		13:	some
		3:	some
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((FloatCC, Value, Value))	extractor(fcmp, 5)
		7: (FloatCC, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 1)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	constructor(ty_vector_float, [9], 0)
		11: Reg	constructor(put_in_reg, [8], 1)
		12: Value	match_tuple(7, 2)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: FloatCC	match_tuple(7, 0)
		15: Cond	constructor(fp_cond_code, [14], 3)
		16: Reg	constructor(vec_cmp, [11, 13, 9, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		10:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((FloatCC, Value, Value))	extractor(fcmp, 5)
		7: (FloatCC, Value, Value)	match_some(6)
		8: Value	match_tuple(7, 1)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(ty_scalar_float, 9)
		11: Type	match_some(10)
		12: ScalarSize	constructor(scalar_size, [11], 1)
		13: Reg	constructor(put_in_reg, [8], 2)
		14: Value	match_tuple(7, 2)
		15: Reg	constructor(put_in_reg, [14], 3)
		16: ProducesFlags	constructor(fpu_cmp, [12, 13, 15], 4)
		17: FloatCC	match_tuple(7, 0)
		18: Cond	constructor(fp_cond_code, [17], 5)
		19: ConsumesFlags	constructor(materialize_bool_result, [18], 6)
		20: ValueRegs	constructor(with_flags, [16, 19], 7)
		21: InstOutput	constructor(output, [20], 8)
	]
	constraints = [
		10:	some
		3:	some
		6:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((FloatCC, Value, Value))	extractor(fcmp, 7)
		9: (FloatCC, Value, Value)	match_some(8)
		10: FloatCC	match_tuple(9, 0)
		11: Option(FloatCC)	extractor(fcmp_zero_cond, 10)
		12: Value	match_tuple(9, 1)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: FloatCC	match_some(11)
		15: Value	match_tuple(9, 2)
		16: Reg	constructor(put_in_reg, [15], 1)
		17: VectorSize	constructor(vector_size, [5], 2)
		18: Reg	constructor(float_cmp_zero_swap, [14, 16, 17], 3)
		19: ValueRegs	constructor(value_reg, [18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		11:	some
		3:	some
		8:	some
		13:	some
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((FloatCC, Value, Value))	extractor(fcmp, 7)
		9: (FloatCC, Value, Value)	match_some(8)
		10: FloatCC	match_tuple(9, 0)
		11: Option(FloatCC)	extractor(fcmp_zero_cond_not_eq, 10)
		12: Value	match_tuple(9, 1)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: Value	match_tuple(9, 2)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: VectorSize	constructor(vector_size, [5], 2)
		17: Reg	constructor(fcmeq0, [15, 16], 3)
		18: Reg	constructor(not, [17, 16], 4)
		19: ValueRegs	constructor(value_reg, [18], 5)
		20: InstOutput	constructor(output, [19], 6)
	]
	constraints = [
		11:	some
		3:	some
		6:	some
		8:	some
		13:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((FloatCC, Value, Value))	extractor(fcmp, 7)
		9: (FloatCC, Value, Value)	match_some(8)
		10: Value	match_tuple(9, 2)
		11: Option(Value)	constructor(zero_value, [10], 0)
		12: FloatCC	match_tuple(9, 0)
		13: Option(FloatCC)	extractor(fcmp_zero_cond, 12)
		14: FloatCC	match_some(13)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 1)
		17: VectorSize	constructor(vector_size, [5], 2)
		18: Reg	constructor(float_cmp_zero, [14, 16, 17], 3)
		19: ValueRegs	constructor(value_reg, [18], 4)
		20: InstOutput	constructor(output, [19], 5)
	]
	constraints = [
		11:	some
		13:	some
		3:	some
		6:	some
		8:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((FloatCC, Value, Value))	extractor(fcmp, 7)
		9: (FloatCC, Value, Value)	match_some(8)
		10: FloatCC	match_tuple(9, 0)
		11: Option(FloatCC)	extractor(fcmp_zero_cond_not_eq, 10)
		12: Value	match_tuple(9, 2)
		13: Option(Value)	constructor(zero_value, [12], 0)
		14: Value	match_tuple(9, 1)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: VectorSize	constructor(vector_size, [5], 2)
		17: Reg	constructor(fcmeq0, [15, 16], 3)
		18: Reg	constructor(not, [17, 16], 4)
		19: ValueRegs	constructor(value_reg, [18], 5)
		20: InstOutput	constructor(output, [19], 6)
	]
	constraints = [
		8:	some
		11:	some
		13:	some
		6:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	constructor(ty_int_ref_scalar_64, [5], 0)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ireduce, 7)
		9: Value	match_some(8)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(bitselect, 7)
		9: Type	match_some(6)
		10: (Value, Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Value	match_tuple(10, 2)
		16: Reg	constructor(put_in_reg, [15], 3)
		17: Reg	constructor(bsl, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Value))	extractor(bitselect, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	constructor(ty_int_ref_scalar_64, [7], 0)
		9: (Value, Value, Value)	match_some(6)
		10: Value	match_tuple(9, 1)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 0)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Reg	constructor(and_reg, [7, 11, 13], 3)
		15: Value	match_tuple(9, 2)
		16: Reg	constructor(put_in_reg, [15], 4)
		17: Reg	constructor(put_in_reg, [12], 5)
		18: Reg	constructor(bic, [7, 16, 17], 6)
		19: Reg	constructor(orr, [7, 14, 18], 7)
		20: InstOutput	constructor(output_reg, [19], 8)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size8x16, [])
		11: Reg	constructor(vec_cnt, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	some
		5:	const_prim(I8X16)
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: usize	const_int(0, usize)
		11: Reg	constructor(value_regs_get, [9, 10], 2)
		12: ScalarSize	make_variant(ScalarSize::Size64, [])
		13: Reg	constructor(mov_to_fpu, [11, 12], 3)
		14: usize	const_int(1, usize)
		15: Reg	constructor(value_regs_get, [9, 14], 4)
		16: u8	const_int(1, u8)
		17: VectorSize	make_variant(VectorSize::Size64x2, [])
		18: Reg	constructor(mov_to_vec, [13, 15, 16, 17], 5)
		19: VectorSize	make_variant(VectorSize::Size8x16, [])
		20: Reg	constructor(vec_cnt, [18, 19], 6)
		21: Reg	constructor(addv, [20, 19], 7)
		22: u8	const_int(0, u8)
		23: ScalarSize	make_variant(ScalarSize::Size8, [])
		24: Reg	constructor(mov_from_vec, [21, 22, 23], 8)
		25: Type	const_prim(I64)
		26: ImmExtend	make_variant(ImmExtend::Zero, [])
		27: u64	const_int(0, u64)
		28: Reg	constructor(imm, [25, 26, 27], 9)
		29: ValueRegs	constructor(value_regs, [24, 28], 10)
		30: InstOutput	constructor(output, [29], 11)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I128)
	]
	result = 30
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size64, [])
		11: Reg	constructor(mov_to_fpu, [9, 10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x8, [])
		13: Reg	constructor(vec_cnt, [11, 12], 3)
		14: Reg	constructor(addv, [13, 12], 4)
		15: u8	const_int(0, u8)
		16: ScalarSize	make_variant(ScalarSize::Size8, [])
		17: Reg	constructor(mov_from_vec, [14, 15, 16], 5)
		18: InstOutput	constructor(output_reg, [17], 6)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size32, [])
		11: Reg	constructor(mov_to_fpu, [9, 10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x8, [])
		13: Reg	constructor(vec_cnt, [11, 12], 3)
		14: Reg	constructor(addv, [13, 12], 4)
		15: u8	const_int(0, u8)
		16: ScalarSize	make_variant(ScalarSize::Size8, [])
		17: Reg	constructor(mov_from_vec, [14, 15, 16], 5)
		18: InstOutput	constructor(output_reg, [17], 6)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I32)
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size32, [])
		11: Reg	constructor(mov_to_fpu, [9, 10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x8, [])
		13: Reg	constructor(vec_cnt, [11, 12], 3)
		14: Reg	constructor(addp, [13, 13, 12], 4)
		15: u8	const_int(0, u8)
		16: ScalarSize	make_variant(ScalarSize::Size8, [])
		17: Reg	constructor(mov_from_vec, [14, 15, 16], 5)
		18: InstOutput	constructor(output_reg, [17], 6)
	]
	constraints = [
		7:	some
		5:	const_prim(I16)
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(popcnt, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size32, [])
		11: Reg	constructor(mov_to_fpu, [9, 10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x8, [])
		13: Reg	constructor(vec_cnt, [11, 12], 3)
		14: u8	const_int(0, u8)
		15: ScalarSize	make_variant(ScalarSize::Size8, [])
		16: Reg	constructor(mov_from_vec, [13, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		5:	const_prim(I8)
		3:	some
		7:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(bmask, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Type	extractor(value_type, 8)
		10: ValueRegs	constructor(put_in_regs, [8], 1)
		11: ValueRegs	constructor(lower_bmask, [7, 9, 10], 2)
		12: InstOutput	constructor(output, [11], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(1, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 2)
		13: Reg	constructor(a64_rev64, [8, 12], 3)
		14: ValueRegs	constructor(put_in_regs, [9], 4)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 5)
		17: Reg	constructor(a64_rev64, [8, 16], 6)
		18: ValueRegs	constructor(value_regs, [13, 17], 7)
		19: InstOutput	constructor(output, [18], 8)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I128)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(a64_rev64, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(a64_rev32, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		5:	const_prim(I32)
		7:	some
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bswap, 6)
		8: Type	const_prim(I16)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(a64_rev16, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		5:	const_prim(I16)
		3:	some
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(cls, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(a64_cls, [7, 9], 2)
		11: InstOutput	constructor(output_reg, [10], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(cls, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(1, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 3)
		13: Reg	constructor(a64_cls, [8, 12], 5)
		14: u8	const_int(63, u8)
		15: Imm12	constructor(u8_into_imm12, [14], 10)
		16: ProducesFlags	constructor(cmp64_imm, [13, 15], 11)
		17: Cond	make_variant(Cond::Eq, [])
		18: usize	const_int(0, usize)
		19: Reg	constructor(value_regs_get, [10, 18], 2)
		20: Reg	constructor(a64_cls, [8, 19], 4)
		21: Reg	constructor(eon, [8, 12, 19], 6)
		22: ImmShift	constructor(imm_shift_from_u8, [14], 7)
		23: Reg	constructor(lsr_imm, [8, 21, 22], 8)
		24: Reg	constructor(madd, [8, 20, 23, 23], 9)
		25: Reg	constructor(zero_reg, [], 12)
		26: ConsumesFlags	constructor(csel, [17, 24, 25], 13)
		27: Reg	constructor(with_flags_reg, [16, 26], 14)
		28: Reg	constructor(add, [8, 27, 13], 15)
		29: ImmExtend	make_variant(ImmExtend::Zero, [])
		30: u64	const_int(0, u64)
		31: Reg	constructor(imm, [8, 29, 30], 16)
		32: ValueRegs	constructor(value_regs, [28, 31], 17)
		33: InstOutput	constructor(output, [32], 18)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 33
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(cls, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg_sext32, [9], 1)
		11: Reg	constructor(a64_cls, [8, 10], 2)
		12: u8	const_int(16, u8)
		13: Imm12	constructor(u8_into_imm12, [12], 3)
		14: Reg	constructor(sub_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I16)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(cls, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg_sext32, [9], 1)
		11: Reg	constructor(a64_cls, [8, 10], 2)
		12: u8	const_int(24, u8)
		13: Imm12	constructor(u8_into_imm12, [12], 3)
		14: Reg	constructor(sub_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I8)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(ctz, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(rbit, [7, 9], 2)
		11: Reg	constructor(a64_clz, [7, 10], 3)
		12: InstOutput	constructor(output_reg, [11], 4)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ctz, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(1, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 4)
		13: Reg	constructor(rbit, [8, 12], 5)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [10, 14], 2)
		16: Reg	constructor(rbit, [8, 15], 3)
		17: ValueRegs	constructor(value_regs, [13, 16], 6)
		18: ValueRegs	constructor(lower_clz128, [17], 7)
		19: InstOutput	constructor(output, [18], 8)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ctz, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(rbit, [8, 10], 2)
		12: u64	const_int(32768, u64)
		13: ImmLogic	constructor(u64_into_imm_logic, [8, 12], 3)
		14: Reg	constructor(orr_imm, [8, 11, 13], 4)
		15: Reg	constructor(a64_clz, [8, 14], 5)
		16: InstOutput	constructor(output_reg, [15], 6)
	]
	constraints = [
		7:	some
		5:	const_prim(I16)
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ctz, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(rbit, [8, 10], 2)
		12: u64	const_int(8388608, u64)
		13: ImmLogic	constructor(u64_into_imm_logic, [8, 12], 3)
		14: Reg	constructor(orr_imm, [8, 11, 13], 4)
		15: Reg	constructor(a64_clz, [8, 14], 5)
		16: InstOutput	constructor(output_reg, [15], 6)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(clz, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(a64_clz, [7, 9], 2)
		11: InstOutput	constructor(output_reg, [10], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(clz, 6)
		8: Value	match_some(7)
		9: ValueRegs	constructor(put_in_regs, [8], 1)
		10: ValueRegs	constructor(lower_clz128, [9], 2)
		11: InstOutput	constructor(output, [10], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I128)
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(clz, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg_zext32, [9], 1)
		11: Reg	constructor(a64_clz, [8, 10], 2)
		12: u8	const_int(16, u8)
		13: Imm12	constructor(u8_into_imm12, [12], 3)
		14: Reg	constructor(sub_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		5:	const_prim(I16)
		3:	some
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(clz, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg_zext32, [9], 1)
		11: Reg	constructor(a64_clz, [8, 10], 2)
		12: u8	const_int(24, u8)
		13: Imm12	constructor(u8_into_imm12, [12], 3)
		14: Reg	constructor(sub_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		7:	some
		5:	const_prim(I8)
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(bitrev, 5)
		7: Type	match_tuple(4, 0)
		8: Value	match_some(6)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Reg	constructor(rbit, [7, 9], 2)
		11: InstOutput	constructor(output_reg, [10], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(1, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 4)
		13: Reg	constructor(rbit, [8, 12], 5)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [10, 14], 2)
		16: Reg	constructor(rbit, [8, 15], 3)
		17: ValueRegs	constructor(value_regs, [13, 16], 6)
		18: InstOutput	constructor(output, [17], 7)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(rbit, [8, 10], 2)
		12: u8	const_int(16, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 3)
		14: Reg	constructor(lsr_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		3:	some
		5:	const_prim(I16)
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bitrev, 6)
		8: Type	const_prim(I32)
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(rbit, [8, 10], 2)
		12: u8	const_int(24, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 3)
		14: Reg	constructor(lsr_imm, [8, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		3:	some
		5:	const_prim(I8)
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: ValueRegs	constructor(put_in_regs, [10], 1)
		12: Value	match_tuple(9, 1)
		13: ValueRegs	constructor(put_in_regs, [12], 2)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [13, 14], 3)
		16: ValueRegs	constructor(lower_ushr128, [11, 15], 6)
		17: Reg	constructor(value_regs_get, [16, 14], 11)
		18: ImmExtend	make_variant(ImmExtend::Zero, [])
		19: u64	const_int(128, u64)
		20: Reg	constructor(imm, [8, 18, 19], 4)
		21: Reg	constructor(sub, [8, 20, 15], 5)
		22: ValueRegs	constructor(lower_shl128, [11, 21], 7)
		23: Reg	constructor(value_regs_get, [22, 14], 12)
		24: Reg	constructor(orr, [8, 17, 23], 13)
		25: usize	const_int(1, usize)
		26: Reg	constructor(value_regs_get, [16, 25], 8)
		27: Reg	constructor(value_regs_get, [22, 25], 9)
		28: Reg	constructor(orr, [8, 26, 27], 10)
		29: ValueRegs	constructor(value_regs, [24, 28], 14)
		30: InstOutput	constructor(output, [29], 15)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 30
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Type	const_prim(I64)
		14: Imm64	match_some(12)
		15: Option(ImmShift)	constructor(imm_shift_from_imm64, [13, 14], 0)
		16: Value	match_tuple(8, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: ImmShift	match_some(15)
		19: Reg	constructor(a64_rotr_imm, [13, 17, 18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		3:	some
		7:	some
		15:	some
		10:	some
		5:	const_prim(I64)
		12:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Type	const_prim(I32)
		14: Imm64	match_some(12)
		15: Option(ImmShift)	constructor(imm_shift_from_imm64, [13, 14], 0)
		16: Value	match_tuple(8, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: ImmShift	match_some(15)
		19: Reg	constructor(a64_rotr_imm, [13, 17, 18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		5:	const_prim(I32)
		3:	some
		12:	some
		10:	some
		7:	some
		15:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Type	match_some(6)
		15: Imm64	match_some(13)
		16: Option(ImmShift)	constructor(imm_shift_from_imm64, [14, 15], 0)
		17: Value	match_tuple(9, 0)
		18: Reg	constructor(put_in_reg_zext32, [17], 1)
		19: ImmShift	match_some(16)
		20: Reg	constructor(small_rotr_imm, [14, 18, 19], 2)
		21: InstOutput	constructor(output_reg, [20], 3)
	]
	constraints = [
		16:	some
		8:	some
		6:	some
		13:	some
		3:	some
		11:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: ValueRegs	constructor(put_in_regs, [12], 2)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [13, 14], 3)
		16: Reg	constructor(a64_rotr, [8, 11, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		5:	const_prim(I64)
		3:	some
		7:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotr, 6)
		8: Type	const_prim(I32)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: ValueRegs	constructor(put_in_regs, [12], 2)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [13, 14], 3)
		16: Reg	constructor(a64_rotr, [8, 11, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		7:	some
		5:	const_prim(I32)
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotr, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext32, [11], 1)
		13: Value	match_tuple(10, 1)
		14: ValueRegs	constructor(put_in_regs, [13], 2)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 3)
		17: Reg	constructor(small_rotr, [9, 12, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: ValueRegs	constructor(put_in_regs, [10], 1)
		12: Value	match_tuple(9, 1)
		13: ValueRegs	constructor(put_in_regs, [12], 2)
		14: usize	const_int(0, usize)
		15: Reg	constructor(value_regs_get, [13, 14], 3)
		16: ValueRegs	constructor(lower_shl128, [11, 15], 6)
		17: Reg	constructor(value_regs_get, [16, 14], 8)
		18: ImmExtend	make_variant(ImmExtend::Zero, [])
		19: u64	const_int(128, u64)
		20: Reg	constructor(imm, [8, 18, 19], 4)
		21: Reg	constructor(sub, [8, 20, 15], 5)
		22: ValueRegs	constructor(lower_ushr128, [11, 21], 7)
		23: Reg	constructor(value_regs_get, [22, 14], 9)
		24: Reg	constructor(orr, [8, 17, 23], 10)
		25: usize	const_int(1, usize)
		26: Reg	constructor(value_regs_get, [16, 25], 11)
		27: Reg	constructor(value_regs_get, [22, 25], 12)
		28: Reg	constructor(orr, [8, 26, 27], 13)
		29: ValueRegs	constructor(value_regs, [24, 28], 14)
		30: InstOutput	constructor(output, [29], 15)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 30
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Type	const_prim(I64)
		14: Imm64	match_some(12)
		15: Option(ImmShift)	constructor(imm_shift_from_imm64, [13, 14], 0)
		16: Value	match_tuple(8, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: ImmShift	match_some(15)
		19: ImmShift	constructor(negate_imm_shift, [13, 18], 2)
		20: Reg	constructor(a64_rotr_imm, [13, 17, 19], 3)
		21: InstOutput	constructor(output_reg, [20], 4)
	]
	constraints = [
		5:	const_prim(I64)
		15:	some
		10:	some
		7:	some
		12:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Imm64)	extractor(iconst, 11)
		13: Type	const_prim(I32)
		14: Imm64	match_some(12)
		15: Option(ImmShift)	constructor(imm_shift_from_imm64, [13, 14], 0)
		16: Value	match_tuple(8, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: ImmShift	match_some(15)
		19: ImmShift	constructor(negate_imm_shift, [13, 18], 2)
		20: Reg	constructor(a64_rotr_imm, [13, 17, 19], 3)
		21: InstOutput	constructor(output_reg, [20], 4)
	]
	constraints = [
		15:	some
		10:	some
		7:	some
		3:	some
		12:	some
		5:	const_prim(I32)
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 5)
		12: Reg	constructor(zero_reg, [], 3)
		13: Value	match_tuple(9, 1)
		14: ValueRegs	constructor(put_in_regs, [13], 1)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 2)
		17: Reg	constructor(sub, [8, 12, 16], 4)
		18: Reg	constructor(a64_rotr, [8, 11, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I64)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(rotl, 6)
		8: Type	const_prim(I32)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 5)
		12: Reg	constructor(zero_reg, [], 3)
		13: Value	match_tuple(9, 1)
		14: ValueRegs	constructor(put_in_regs, [13], 1)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 2)
		17: Reg	constructor(sub, [8, 12, 16], 4)
		18: Reg	constructor(a64_rotr, [8, 11, 17], 6)
		19: InstOutput	constructor(output_reg, [18], 7)
	]
	constraints = [
		5:	const_prim(I32)
		7:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotl, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Type	match_some(6)
		15: Imm64	match_some(13)
		16: Option(ImmShift)	constructor(imm_shift_from_imm64, [14, 15], 0)
		17: Value	match_tuple(9, 0)
		18: Reg	constructor(put_in_reg_zext32, [17], 1)
		19: ImmShift	match_some(16)
		20: ImmShift	constructor(negate_imm_shift, [14, 19], 2)
		21: Reg	constructor(small_rotr_imm, [14, 18, 20], 3)
		22: InstOutput	constructor(output_reg, [21], 4)
	]
	constraints = [
		3:	some
		16:	some
		6:	some
		13:	some
		8:	some
		11:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_16, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(rotl, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext32, [11], 5)
		13: Type	const_prim(I32)
		14: Reg	constructor(zero_reg, [], 3)
		15: Value	match_tuple(10, 1)
		16: ValueRegs	constructor(put_in_regs, [15], 1)
		17: usize	const_int(0, usize)
		18: Reg	constructor(value_regs_get, [16, 17], 2)
		19: Reg	constructor(sub, [13, 14, 18], 4)
		20: Reg	constructor(small_rotr, [9, 12, 19], 6)
		21: InstOutput	constructor(output_reg, [20], 7)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sshr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Type	match_some(6)
		15: Imm64	match_some(13)
		16: u64	extractor(u64_from_imm64, 15)
		17: u8	constructor(shift_masked_imm, [14, 16], 0)
		18: Value	match_tuple(9, 0)
		19: InstOutput	constructor(output_value, [18], 1)
	]
	constraints = [
		13:	some
		3:	some
		6:	some
		8:	some
		11:	some
		17:	const_int(0)
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sshr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Value	match_tuple(9, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: Imm64	match_some(13)
		18: u64	extractor(u64_from_imm64, 17)
		19: u8	constructor(shift_masked_imm, [16, 18], 0)
		20: VectorSize	constructor(vector_size, [16], 2)
		21: Reg	constructor(sshr_vec_imm, [15, 19, 20], 3)
		22: InstOutput	constructor(output_reg, [21], 4)
	]
	constraints = [
		8:	some
		11:	some
		3:	some
		6:	some
		13:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sshr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 8)
		12: Type	const_prim(I64)
		13: Reg	constructor(zero_reg, [], 5)
		14: Type	const_prim(I32)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 2)
		17: Type	match_some(6)
		18: ImmLogic	constructor(shift_mask, [17], 3)
		19: Reg	constructor(and_imm, [14, 16, 18], 4)
		20: Reg	constructor(sub, [12, 13, 19], 6)
		21: VectorSize	constructor(vector_size, [17], 1)
		22: Reg	constructor(vec_dup, [20, 21], 7)
		23: Reg	constructor(sshl, [11, 22, 21], 9)
		24: InstOutput	constructor(output_reg, [23], 10)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 24
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 3)
		15: ValueRegs	constructor(lower_sshr128, [10, 14], 4)
		16: InstOutput	constructor(output, [15], 5)
	]
	constraints = [
		5:	const_prim(I128)
		7:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(sshr, 6)
		8: ALUOp	make_variant(ALUOp::Asr, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_sext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(do_shift, [8, 9, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		5:	const_prim(I64)
		7:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sshr, 7)
		9: ALUOp	make_variant(ALUOp::Asr, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Reg	constructor(put_in_reg_sext32, [12], 1)
		14: Value	match_tuple(11, 1)
		15: Reg	constructor(do_shift, [9, 10, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ushr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Type	match_some(6)
		15: Imm64	match_some(13)
		16: u64	extractor(u64_from_imm64, 15)
		17: u8	constructor(shift_masked_imm, [14, 16], 0)
		18: Value	match_tuple(9, 0)
		19: InstOutput	constructor(output_value, [18], 1)
	]
	constraints = [
		17:	const_int(0)
		6:	some
		13:	some
		11:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ushr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Value	match_tuple(9, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: Imm64	match_some(13)
		18: u64	extractor(u64_from_imm64, 17)
		19: u8	constructor(shift_masked_imm, [16, 18], 0)
		20: VectorSize	constructor(vector_size, [16], 2)
		21: Reg	constructor(ushr_vec_imm, [15, 19, 20], 3)
		22: InstOutput	constructor(output_reg, [21], 4)
	]
	constraints = [
		13:	some
		3:	some
		6:	some
		11:	some
		8:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ushr, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 8)
		12: Type	const_prim(I64)
		13: Reg	constructor(zero_reg, [], 5)
		14: Type	const_prim(I32)
		15: Value	match_tuple(9, 1)
		16: Reg	constructor(put_in_reg, [15], 2)
		17: Type	match_some(6)
		18: ImmLogic	constructor(shift_mask, [17], 3)
		19: Reg	constructor(and_imm, [14, 16, 18], 4)
		20: Reg	constructor(sub, [12, 13, 19], 6)
		21: VectorSize	constructor(vector_size, [17], 1)
		22: Reg	constructor(vec_dup, [20, 21], 7)
		23: Reg	constructor(ushl, [11, 22, 21], 9)
		24: InstOutput	constructor(output_reg, [23], 10)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 24
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 3)
		15: ValueRegs	constructor(lower_ushr128, [10, 14], 4)
		16: InstOutput	constructor(output, [15], 5)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ushr, 6)
		8: ALUOp	make_variant(ALUOp::Lsr, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(do_shift, [8, 9, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		5:	const_prim(I64)
		3:	some
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ushr, 7)
		9: ALUOp	make_variant(ALUOp::Lsr, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Reg	constructor(put_in_reg_zext32, [12], 1)
		14: Value	match_tuple(11, 1)
		15: Reg	constructor(do_shift, [9, 10, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ishl, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Value	match_tuple(9, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Type	match_some(6)
		17: Imm64	match_some(13)
		18: u64	extractor(u64_from_imm64, 17)
		19: u8	constructor(shift_masked_imm, [16, 18], 0)
		20: VectorSize	constructor(vector_size, [16], 2)
		21: Reg	constructor(ushl_vec_imm, [15, 19, 20], 3)
		22: InstOutput	constructor(output_reg, [21], 4)
	]
	constraints = [
		8:	some
		13:	some
		3:	some
		6:	some
		11:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ishl, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 6)
		12: Type	const_prim(I32)
		13: Value	match_tuple(9, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ImmLogic	constructor(shift_mask, [15], 3)
		17: Reg	constructor(and_imm, [12, 14, 16], 4)
		18: VectorSize	constructor(vector_size, [15], 1)
		19: Reg	constructor(vec_dup, [17, 18], 5)
		20: Reg	constructor(sshl, [11, 19, 18], 7)
		21: InstOutput	constructor(output_reg, [20], 8)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: usize	const_int(0, usize)
		14: Reg	constructor(value_regs_get, [12, 13], 3)
		15: ValueRegs	constructor(lower_shl128, [10, 14], 4)
		16: InstOutput	constructor(output, [15], 5)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I128)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(ishl, 6)
		8: ALUOp	make_variant(ALUOp::Lsl, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(do_shift, [8, 9, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ishl, 7)
		9: ALUOp	make_variant(ALUOp::Lsl, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(11, 1)
		15: Reg	constructor(do_shift, [9, 10, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bxor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::EorNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 1)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		10:	some
		3:	some
		5:	const_prim(I128)
		7:	some
		12:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bxor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::EorNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 0)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		3:	some
		12:	some
		10:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::EorNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 1)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		3:	some
		11:	some
		8:	some
		13:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::EorNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 0)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		8:	some
		11:	some
		3:	some
		13:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(eor_vec, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bxor, 6)
		8: ALUOp	make_variant(ALUOp::Eor, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ValueRegs	constructor(i128_alu_bitop, [8, 9, 11, 12], 1)
		14: InstOutput	constructor(output, [13], 2)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bxor, 7)
		9: ALUOp	make_variant(ALUOp::Eor, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: Reg	constructor(alu_rs_imm_logic_commutative, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output_reg, [14], 2)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::OrrNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 1)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		10:	some
		12:	some
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bor, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::OrrNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 0)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		7:	some
		10:	some
		5:	const_prim(I128)
		12:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::OrrNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 1)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		11:	some
		6:	some
		13:	some
		8:	some
		3:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::OrrNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 0)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		6:	some
		13:	some
		8:	some
		3:	some
		11:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(orr_vec, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(bor, 6)
		8: ALUOp	make_variant(ALUOp::Orr, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ValueRegs	constructor(i128_alu_bitop, [8, 9, 11, 12], 1)
		14: InstOutput	constructor(output, [13], 2)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I128)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(bor, 7)
		9: ALUOp	make_variant(ALUOp::Orr, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: Reg	constructor(alu_rs_imm_logic_commutative, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output_reg, [14], 2)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: Value	match_tuple(9, 1)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Value	match_some(13)
		17: Reg	constructor(put_in_reg, [16], 2)
		18: Type	match_some(6)
		19: VectorSize	constructor(vector_size, [18], 3)
		20: Reg	constructor(bic_vec, [15, 17, 19], 4)
		21: InstOutput	constructor(output_reg, [20], 5)
	]
	constraints = [
		8:	some
		6:	some
		13:	some
		3:	some
		11:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: Value	match_tuple(9, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Value	match_some(13)
		17: Reg	constructor(put_in_reg, [16], 2)
		18: Type	match_some(6)
		19: VectorSize	constructor(vector_size, [18], 3)
		20: Reg	constructor(bic_vec, [15, 17, 19], 4)
		21: InstOutput	constructor(output_reg, [20], 5)
	]
	constraints = [
		8:	some
		6:	some
		13:	some
		11:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(band, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::AndNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 1)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		12:	some
		7:	some
		5:	const_prim(I128)
		10:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(band, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(bnot, 11)
		13: ALUOp	make_variant(ALUOp::AndNot, [])
		14: Type	const_prim(I64)
		15: Value	match_tuple(8, 0)
		16: Value	match_some(12)
		17: ValueRegs	constructor(i128_alu_bitop, [13, 14, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		7:	some
		3:	some
		10:	some
		12:	some
		5:	const_prim(I128)
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::AndNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 1)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		6:	some
		13:	some
		8:	some
		3:	some
		11:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Value)	extractor(bnot, 12)
		14: ALUOp	make_variant(ALUOp::AndNot, [])
		15: Type	match_some(6)
		16: Value	match_tuple(9, 0)
		17: Value	match_some(13)
		18: Reg	constructor(alu_rs_imm_logic, [14, 15, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		11:	some
		8:	some
		3:	some
		13:	some
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(and_vec, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(band, 6)
		8: ALUOp	make_variant(ALUOp::And, [])
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: ValueRegs	constructor(i128_alu_bitop, [8, 9, 11, 12], 1)
		14: InstOutput	constructor(output, [13], 2)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(band, 7)
		9: ALUOp	make_variant(ALUOp::And, [])
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Value	match_tuple(11, 1)
		14: Reg	constructor(alu_rs_imm_logic_commutative, [9, 10, 12, 13], 1)
		15: InstOutput	constructor(output_reg, [14], 2)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bnot, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option((Value, Value))	extractor(bxor, 10)
		12: ALUOp	make_variant(ALUOp::EorNot, [])
		13: Type	const_prim(I64)
		14: (Value, Value)	match_some(11)
		15: Value	match_tuple(14, 0)
		16: Value	match_tuple(14, 1)
		17: ValueRegs	constructor(i128_alu_bitop, [12, 13, 15, 16], 1)
		18: InstOutput	constructor(output, [17], 2)
	]
	constraints = [
		11:	some
		7:	some
		9:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Value, Value))	extractor(bxor, 11)
		13: ALUOp	make_variant(ALUOp::EorNot, [])
		14: Type	match_some(6)
		15: (Value, Value)	match_some(12)
		16: Value	match_tuple(15, 0)
		17: Value	match_tuple(15, 1)
		18: Reg	constructor(alu_rs_imm_logic, [13, 14, 16, 17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
	]
	constraints = [
		3:	some
		12:	some
		10:	some
		6:	some
		8:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Type	match_some(6)
		12: VectorSize	constructor(vector_size, [11], 2)
		13: Reg	constructor(not, [10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(bnot, 6)
		8: Type	const_prim(I64)
		9: Reg	constructor(zero_reg, [], 4)
		10: Value	match_some(7)
		11: ValueRegs	constructor(put_in_regs, [10], 1)
		12: usize	const_int(0, usize)
		13: Reg	constructor(value_regs_get, [11, 12], 2)
		14: Reg	constructor(orr_not, [8, 9, 13], 5)
		15: Reg	constructor(zero_reg, [], 6)
		16: usize	const_int(1, usize)
		17: Reg	constructor(value_regs_get, [11, 16], 3)
		18: Reg	constructor(orr_not, [8, 15, 17], 7)
		19: ValueRegs	constructor(value_regs, [14, 18], 8)
		20: InstOutput	constructor(output, [19], 9)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Value	match_some(8)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Value, Value))	extractor(ishl, 11)
		13: (Value, Value)	match_some(12)
		14: Value	match_tuple(13, 1)
		15: Option(Inst)	extractor(def_inst, 14)
		16: Inst	match_some(15)
		17: Option(Imm64)	extractor(iconst, 16)
		18: Type	match_some(6)
		19: Imm64	match_some(17)
		20: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [18, 19], 0)
		21: Reg	constructor(zero_reg, [], 1)
		22: Value	match_tuple(13, 0)
		23: Reg	constructor(put_in_reg, [22], 2)
		24: ShiftOpAndAmt	match_some(20)
		25: Reg	constructor(orr_not_shift, [18, 21, 23, 24], 3)
		26: InstOutput	constructor(output_reg, [25], 4)
	]
	constraints = [
		6:	some
		12:	some
		8:	some
		17:	some
		20:	some
		3:	some
		10:	some
		15:	some
	]
	result = 26
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(bnot, 7)
		9: Type	match_some(6)
		10: Reg	constructor(zero_reg, [], 1)
		11: Value	match_some(8)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Reg	constructor(orr_not, [9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sextend, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option((Value, Uimm8))	extractor(extractlane, 10)
		12: (Value, Uimm8)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Type	extractor(value_type, 13)
		15: Reg	constructor(put_in_reg, [13], 1)
		16: Uimm8	match_tuple(12, 1)
		17: u8	extractor(u8_from_uimm8, 16)
		18: ScalarSize	make_variant(ScalarSize::Size64, [])
		19: Reg	constructor(mov_from_vec, [15, 17, 18], 2)
		20: Type	const_prim(I64)
		21: u8	const_int(63, u8)
		22: ImmShift	constructor(imm_shift_from_u8, [21], 3)
		23: Reg	constructor(asr_imm, [20, 19, 22], 4)
		24: ValueRegs	constructor(value_regs, [19, 23], 5)
		25: InstOutput	constructor(output, [24], 6)
	]
	constraints = [
		3:	some
		7:	some
		11:	some
		14:	const_prim(I64X2)
		9:	some
		5:	const_prim(I128)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sextend, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option((Value, Uimm8))	extractor(extractlane, 10)
		12: (Value, Uimm8)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Type	extractor(value_type, 13)
		15: Option(())	extractor(not_i64x2, 14)
		16: Reg	constructor(put_in_reg, [13], 1)
		17: Uimm8	match_tuple(12, 1)
		18: u8	extractor(u8_from_uimm8, 17)
		19: VectorSize	constructor(vector_size, [14], 2)
		20: Type	const_prim(I64)
		21: OperandSize	constructor(size_from_ty, [20], 3)
		22: Reg	constructor(mov_from_vec_signed, [16, 18, 19, 21], 4)
		23: u8	const_int(63, u8)
		24: ImmShift	constructor(imm_shift_from_u8, [23], 5)
		25: Reg	constructor(asr_imm, [20, 22, 24], 6)
		26: ValueRegs	constructor(value_regs, [22, 25], 7)
		27: InstOutput	constructor(output, [26], 8)
	]
	constraints = [
		3:	some
		7:	some
		9:	some
		5:	const_prim(I128)
		15:	some
		11:	some
	]
	result = 27
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(sextend, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg_sext64, [8], 1)
		10: Type	const_prim(I64)
		11: u8	const_int(63, u8)
		12: ImmShift	constructor(imm_shift_from_u8, [11], 2)
		13: Reg	constructor(asr_imm, [10, 9, 12], 3)
		14: ValueRegs	constructor(value_regs, [9, 13], 4)
		15: InstOutput	constructor(output, [14], 5)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(sextend, 7)
		9: Value	match_some(8)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Value, Uimm8))	extractor(extractlane, 11)
		13: (Value, Uimm8)	match_some(12)
		14: Value	match_tuple(13, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Uimm8	match_tuple(13, 1)
		17: u8	extractor(u8_from_uimm8, 16)
		18: Type	extractor(value_type, 14)
		19: VectorSize	constructor(vector_size, [18], 2)
		20: Type	match_some(6)
		21: OperandSize	constructor(size_from_ty, [20], 3)
		22: Reg	constructor(mov_from_vec_signed, [15, 17, 19, 21], 4)
		23: InstOutput	constructor(output_reg, [22], 5)
	]
	constraints = [
		10:	some
		8:	some
		3:	some
		6:	some
		12:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(sextend, 7)
		9: Value	match_some(8)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: bool	const_prim(true)
		12: Type	extractor(value_type, 9)
		13: u8	constructor(ty_bits, [12], 0)
		14: Type	match_some(6)
		15: u8	constructor(ty_bits, [14], 0)
		16: Reg	constructor(extend, [10, 11, 13, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uextend, 6)
		8: Value	match_some(7)
		9: Option(Inst)	extractor(def_inst, 8)
		10: Inst	match_some(9)
		11: Option((Value, Uimm8))	extractor(extractlane, 10)
		12: (Value, Uimm8)	match_some(11)
		13: Value	match_tuple(12, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Uimm8	match_tuple(12, 1)
		16: u8	extractor(u8_from_uimm8, 15)
		17: Type	extractor(value_type, 13)
		18: ScalarSize	constructor(lane_size, [17], 2)
		19: Reg	constructor(mov_from_vec, [14, 16, 18], 3)
		20: Type	const_prim(I64)
		21: ImmExtend	make_variant(ImmExtend::Zero, [])
		22: u64	const_int(0, u64)
		23: Reg	constructor(imm, [20, 21, 22], 4)
		24: ValueRegs	constructor(value_regs, [19, 23], 5)
		25: InstOutput	constructor(output, [24], 6)
	]
	constraints = [
		5:	const_prim(I128)
		3:	some
		11:	some
		7:	some
		9:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(uextend, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg_zext64, [8], 1)
		10: Type	const_prim(I64)
		11: ImmExtend	make_variant(ImmExtend::Zero, [])
		12: u64	const_int(0, u64)
		13: Reg	constructor(imm, [10, 11, 12], 2)
		14: ValueRegs	constructor(value_regs, [9, 13], 3)
		15: InstOutput	constructor(output, [14], 4)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uextend, 7)
		9: Value	match_some(8)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((MemFlags, Value))	extractor(atomic_load, 11)
		13: Option(Inst)	constructor(is_sinkable_inst, [9], 0)
		14: Type	extractor(value_type, 9)
		15: (MemFlags, Value)	match_some(12)
		16: MemFlags	match_tuple(15, 0)
		17: Inst	match_some(13)
		18: Reg	constructor(sink_atomic_load, [17], 1)
		19: Reg	constructor(load_acquire, [14, 16, 18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		3:	some
		13:	some
		8:	some
		6:	some
		10:	some
		12:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uextend, 7)
		9: Value	match_some(8)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option((Value, Uimm8))	extractor(extractlane, 11)
		13: (Value, Uimm8)	match_some(12)
		14: Value	match_tuple(13, 0)
		15: Reg	constructor(put_in_reg, [14], 1)
		16: Uimm8	match_tuple(13, 1)
		17: u8	extractor(u8_from_uimm8, 16)
		18: Type	extractor(value_type, 14)
		19: ScalarSize	constructor(lane_size, [18], 2)
		20: Reg	constructor(mov_from_vec, [15, 17, 19], 3)
		21: InstOutput	constructor(output_reg, [20], 4)
	]
	constraints = [
		12:	some
		6:	some
		10:	some
		3:	some
		8:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(uextend, 7)
		9: Value	match_some(8)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: bool	const_prim(false)
		12: Type	extractor(value_type, 9)
		13: u8	constructor(ty_bits, [12], 0)
		14: Type	match_some(6)
		15: u8	constructor(ty_bits, [14], 0)
		16: Reg	constructor(extend, [10, 11, 13, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umax, 6)
		8: Type	const_prim(I64X2)
		9: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	make_variant(VectorSize::Size64x2, [])
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 3)
		17: Reg	constructor(put_in_reg, [11], 4)
		18: Reg	constructor(put_in_reg, [13], 5)
		19: Reg	constructor(bsl, [8, 16, 17, 18], 6)
		20: InstOutput	constructor(output_reg, [19], 7)
	]
	constraints = [
		5:	const_prim(I64X2)
		3:	some
		7:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umax, 5)
		7: Type	match_tuple(4, 0)
		8: Option(())	extractor(not_i64x2, 7)
		9: VecALUOp	make_variant(VecALUOp::Umax, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(smax, 6)
		8: Type	const_prim(I64X2)
		9: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	make_variant(VectorSize::Size64x2, [])
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 3)
		17: Reg	constructor(put_in_reg, [11], 4)
		18: Reg	constructor(put_in_reg, [13], 5)
		19: Reg	constructor(bsl, [8, 16, 17, 18], 6)
		20: InstOutput	constructor(output_reg, [19], 7)
	]
	constraints = [
		5:	const_prim(I64X2)
		7:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(smax, 5)
		7: Type	match_tuple(4, 0)
		8: Option(())	extractor(not_i64x2, 7)
		9: VecALUOp	make_variant(VecALUOp::Smax, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umin, 6)
		8: Type	const_prim(I64X2)
		9: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 1)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 0)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	make_variant(VectorSize::Size64x2, [])
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 3)
		17: Reg	constructor(put_in_reg, [13], 4)
		18: Reg	constructor(put_in_reg, [11], 5)
		19: Reg	constructor(bsl, [8, 16, 17, 18], 6)
		20: InstOutput	constructor(output_reg, [19], 7)
	]
	constraints = [
		7:	some
		5:	const_prim(I64X2)
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(umin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(())	extractor(not_i64x2, 7)
		9: VecALUOp	make_variant(VecALUOp::Umin, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(smin, 6)
		8: Type	const_prim(I64X2)
		9: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		10: (Value, Value)	match_some(7)
		11: Value	match_tuple(10, 1)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 0)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	make_variant(VectorSize::Size64x2, [])
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 3)
		17: Reg	constructor(put_in_reg, [13], 4)
		18: Reg	constructor(put_in_reg, [11], 5)
		19: Reg	constructor(bsl, [8, 16, 17, 18], 6)
		20: InstOutput	constructor(output_reg, [19], 7)
	]
	constraints = [
		7:	some
		5:	const_prim(I64X2)
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(smin, 5)
		7: Type	match_tuple(4, 0)
		8: Option(())	extractor(not_i64x2, 7)
		9: VecALUOp	make_variant(VecALUOp::Smin, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [7], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(smax, 8)
		10: Type	match_some(6)
		11: Cond	make_variant(Cond::Gt, [])
		12: bool	const_prim(true)
		13: (Value, Value)	match_some(9)
		14: Value	match_tuple(13, 0)
		15: Value	match_tuple(13, 1)
		16: ValueRegs	constructor(cmp_and_choose, [10, 11, 12, 14, 15], 1)
		17: InstOutput	constructor(output, [16], 2)
	]
	constraints = [
		9:	some
		7:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(umax, 8)
		10: Type	match_some(6)
		11: Cond	make_variant(Cond::Hi, [])
		12: bool	const_prim(false)
		13: (Value, Value)	match_some(9)
		14: Value	match_tuple(13, 0)
		15: Value	match_tuple(13, 1)
		16: ValueRegs	constructor(cmp_and_choose, [10, 11, 12, 14, 15], 1)
		17: InstOutput	constructor(output, [16], 2)
	]
	constraints = [
		9:	some
		7:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(smin, 8)
		10: Type	match_some(6)
		11: Cond	make_variant(Cond::Lt, [])
		12: bool	const_prim(true)
		13: (Value, Value)	match_some(9)
		14: Value	match_tuple(13, 0)
		15: Value	match_tuple(13, 1)
		16: ValueRegs	constructor(cmp_and_choose, [10, 11, 12, 14, 15], 1)
		17: InstOutput	constructor(output, [16], 2)
	]
	constraints = [
		3:	some
		7:	some
		9:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Option(Type)	extractor(ty_int, 5)
		8: Inst	match_tuple(4, 1)
		9: Option((Value, Value))	extractor(umin, 8)
		10: Type	match_some(6)
		11: Cond	make_variant(Cond::Lo, [])
		12: bool	const_prim(false)
		13: (Value, Value)	match_some(9)
		14: Value	match_tuple(13, 0)
		15: Value	match_tuple(13, 1)
		16: ValueRegs	constructor(cmp_and_choose, [10, 11, 12, 14, 15], 1)
		17: InstOutput	constructor(output, [16], 2)
	]
	constraints = [
		3:	some
		6:	some
		7:	some
		9:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(srem, 7)
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_sext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_nonzero_in_reg_sext64, [13], 2)
		15: Reg	constructor(a64_sdiv, [9, 12, 14], 3)
		16: Reg	constructor(msub, [9, 15, 14, 12], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(urem, 7)
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_nonzero_in_reg_zext64, [13], 2)
		15: Reg	constructor(a64_udiv, [9, 12, 14], 3)
		16: Reg	constructor(msub, [9, 15, 14, 12], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sdiv, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option(Imm64)	extractor(iconst, 12)
		14: Type	match_some(6)
		15: Imm64	match_some(13)
		16: Option(u64)	constructor(safe_divisor_from_imm64, [14, 15], 0)
		17: Type	const_prim(I64)
		18: Value	match_tuple(9, 0)
		19: Reg	constructor(put_in_reg_sext64, [18], 1)
		20: ImmExtend	make_variant(ImmExtend::Sign, [])
		21: u64	match_some(16)
		22: Reg	constructor(imm, [14, 20, 21], 2)
		23: Reg	constructor(a64_sdiv, [17, 19, 22], 3)
		24: InstOutput	constructor(output_reg, [23], 4)
	]
	constraints = [
		16:	some
		11:	some
		6:	some
		3:	some
		8:	some
		13:	some
	]
	result = 24
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sdiv, 7)
		9: Type	const_prim(I64)
		10: Type	match_some(6)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Reg	constructor(put_in_reg_sext64, [12], 1)
		14: Value	match_tuple(11, 1)
		15: Reg	constructor(put_nonzero_in_reg_sext64, [14], 2)
		16: Reg	constructor(trap_if_div_overflow, [10, 13, 15], 3)
		17: Reg	constructor(a64_sdiv, [9, 16, 15], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(udiv, 7)
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_nonzero_in_reg_zext64, [13], 2)
		15: Reg	constructor(a64_udiv, [9, 12, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(umulhi, 7)
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_zext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg_zext64, [13], 2)
		15: Reg	constructor(zero_reg, [], 3)
		16: Reg	constructor(madd, [9, 12, 14, 15], 4)
		17: Type	match_some(6)
		18: u8	constructor(ty_bits, [17], 0)
		19: ImmShift	constructor(imm_shift_from_u8, [18], 5)
		20: Reg	constructor(lsr_imm, [9, 16, 19], 6)
		21: ValueRegs	constructor(value_reg, [20], 7)
		22: InstOutput	constructor(output, [21], 8)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(umulhi, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Reg	constructor(umulh, [8, 11, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(I64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(smulhi, 7)
		9: Type	const_prim(I64)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg_sext64, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg_sext64, [13], 2)
		15: Reg	constructor(zero_reg, [], 3)
		16: Reg	constructor(madd, [9, 12, 14, 15], 4)
		17: Type	match_some(6)
		18: u8	constructor(ty_bits, [17], 0)
		19: ImmShift	constructor(imm_shift_from_u8, [18], 5)
		20: Reg	constructor(asr_imm, [9, 16, 19], 6)
		21: InstOutput	constructor(output_reg, [20], 7)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 21
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(smulhi, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Reg	constructor(smulh, [8, 11, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(umull32, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		14:	some
		16:	const_prim(I32X4)
		18:	some
		3:	some
		5:	const_prim(I64X2)
		20:	const_prim(I32X4)
		10:	some
		7:	some
		12:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(umull32, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		14:	some
		12:	some
		10:	some
		7:	some
		18:	some
		3:	some
		16:	const_prim(I32X4)
		5:	const_prim(I64X2)
		20:	const_prim(I32X4)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(swiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(swiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(smull32, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		3:	some
		7:	some
		12:	some
		20:	const_prim(I32X4)
		10:	some
		14:	some
		5:	const_prim(I64X2)
		18:	some
		16:	const_prim(I32X4)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_some(12)
		14: Type	extractor(value_type, 13)
		15: Value	match_tuple(8, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [13], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(smull32, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		16:	some
		3:	some
		14:	const_prim(I32X4)
		10:	some
		7:	some
		20:	const_prim(I32X4)
		18:	some
		12:	some
		5:	const_prim(I64X2)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(umull16, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		10:	some
		16:	const_prim(I16X8)
		5:	const_prim(I32X4)
		14:	some
		12:	some
		18:	some
		3:	some
		20:	const_prim(I16X8)
		7:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(umull16, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		10:	some
		12:	some
		16:	const_prim(I16X8)
		14:	some
		7:	some
		3:	some
		20:	const_prim(I16X8)
		18:	some
		5:	const_prim(I32X4)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(swiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(swiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(smull16, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		5:	const_prim(I32X4)
		10:	some
		20:	const_prim(I16X8)
		18:	some
		3:	some
		14:	some
		7:	some
		16:	const_prim(I16X8)
		12:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_some(12)
		14: Type	extractor(value_type, 13)
		15: Value	match_tuple(8, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [13], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(smull16, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		12:	some
		10:	some
		20:	const_prim(I16X8)
		14:	const_prim(I16X8)
		5:	const_prim(I32X4)
		7:	some
		16:	some
		3:	some
		18:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(umull8, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		10:	some
		7:	some
		14:	some
		18:	some
		16:	const_prim(I8X16)
		12:	some
		3:	some
		5:	const_prim(I16X8)
		20:	const_prim(I8X16)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(uwiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(umull8, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		14:	some
		3:	some
		20:	const_prim(I8X16)
		7:	some
		5:	const_prim(I16X8)
		16:	const_prim(I8X16)
		12:	some
		18:	some
		10:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(swiden_high, 13)
		15: Value	match_some(14)
		16: Type	extractor(value_type, 15)
		17: Inst	match_some(12)
		18: Option(Value)	extractor(swiden_high, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [15], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(true)
		24: Reg	constructor(smull8, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		12:	some
		5:	const_prim(I16X8)
		3:	some
		20:	const_prim(I8X16)
		10:	some
		18:	some
		7:	some
		14:	some
		16:	const_prim(I8X16)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_some(12)
		14: Type	extractor(value_type, 13)
		15: Value	match_tuple(8, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Value)	extractor(swiden_low, 17)
		19: Value	match_some(18)
		20: Type	extractor(value_type, 19)
		21: Reg	constructor(put_in_reg, [13], 1)
		22: Reg	constructor(put_in_reg, [19], 2)
		23: bool	const_prim(false)
		24: Reg	constructor(smull8, [21, 22, 23], 3)
		25: InstOutput	constructor(output_reg, [24], 4)
	]
	constraints = [
		5:	const_prim(I16X8)
		14:	const_prim(I8X16)
		18:	some
		10:	some
		16:	some
		3:	some
		12:	some
		20:	const_prim(I8X16)
		7:	some
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 1)
		10: Reg	constructor(put_in_reg, [9], 2)
		11: VectorSize	make_variant(VectorSize::Size32x4, [])
		12: Reg	constructor(rev64, [10, 11], 3)
		13: Value	match_tuple(8, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Reg	constructor(mul, [12, 14, 11], 4)
		16: Reg	constructor(addp, [15, 15, 11], 6)
		17: bool	const_prim(false)
		18: Reg	constructor(shll32, [16, 17], 8)
		19: ScalarSize	make_variant(ScalarSize::Size32, [])
		20: Reg	constructor(xtn, [10, 19], 7)
		21: Reg	constructor(xtn, [14, 19], 5)
		22: Reg	constructor(umlal32, [18, 20, 21, 17], 9)
		23: InstOutput	constructor(output_reg, [22], 10)
	]
	constraints = [
		5:	const_prim(I64X2)
		7:	some
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(imul, 7)
		9: Type	match_some(6)
		10: Option(())	extractor(not_i64x2, 9)
		11: (Value, Value)	match_some(8)
		12: Value	match_tuple(11, 0)
		13: Reg	constructor(put_in_reg, [12], 1)
		14: Value	match_tuple(11, 1)
		15: Reg	constructor(put_in_reg, [14], 2)
		16: VectorSize	constructor(vector_size, [9], 3)
		17: Reg	constructor(mul, [13, 15, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		3:	some
		10:	some
		8:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(imul, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: ValueRegs	constructor(put_in_regs, [10], 1)
		12: usize	const_int(0, usize)
		13: Reg	constructor(value_regs_get, [11, 12], 2)
		14: Value	match_tuple(9, 1)
		15: ValueRegs	constructor(put_in_regs, [14], 4)
		16: Reg	constructor(value_regs_get, [15, 12], 5)
		17: Reg	constructor(zero_reg, [], 10)
		18: Reg	constructor(madd, [8, 13, 16, 17], 11)
		19: usize	const_int(1, usize)
		20: Reg	constructor(value_regs_get, [11, 19], 3)
		21: Reg	constructor(value_regs_get, [15, 19], 6)
		22: Reg	constructor(umulh, [8, 13, 16], 7)
		23: Reg	constructor(madd, [8, 13, 21, 22], 8)
		24: Reg	constructor(madd, [8, 20, 16, 23], 9)
		25: ValueRegs	constructor(value_regs, [18, 24], 12)
		26: InstOutput	constructor(output, [25], 13)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I128)
	]
	result = 26
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(imul, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Reg	constructor(zero_reg, [], 3)
		16: Reg	constructor(madd, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ineg, 7)
		9: Value	match_some(8)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Type	match_some(6)
		12: VectorSize	constructor(vector_size, [11], 2)
		13: Reg	constructor(neg, [10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ineg, 6)
		8: ValueRegs	constructor(value_regs_zero, [], 1)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 2)
		11: ValueRegs	constructor(sub_i128, [8, 10], 3)
		12: InstOutput	constructor(output, [11], 4)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I128)
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ineg, 7)
		9: Type	match_some(6)
		10: Reg	constructor(zero_reg, [], 1)
		11: Value	match_some(8)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: Reg	constructor(sub, [9, 10, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(ssub_sat, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(sqsub, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(usub_sat, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(uqsub, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sadd_sat, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(sqadd, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_vec128, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(uadd_sat, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: Type	match_some(6)
		15: VectorSize	constructor(vector_size, [14], 3)
		16: Reg	constructor(uqadd, [11, 13, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(isub, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: Value	match_tuple(8, 1)
		12: ValueRegs	constructor(put_in_regs, [11], 2)
		13: ValueRegs	constructor(sub_i128, [10, 12], 3)
		14: InstOutput	constructor(output, [13], 4)
	]
	constraints = [
		5:	const_prim(I128)
		7:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(isub, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: VectorSize	constructor(vector_size, [7], 3)
		15: Reg	constructor(sub_vec, [11, 13, 14], 4)
		16: InstOutput	constructor(output_reg, [15], 5)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(ishl, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Imm64)	extractor(iconst, 17)
		19: Type	match_some(6)
		20: Imm64	match_some(18)
		21: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [19, 20], 0)
		22: Value	match_tuple(9, 0)
		23: Reg	constructor(put_in_reg, [22], 1)
		24: Value	match_tuple(14, 0)
		25: Reg	constructor(put_in_reg, [24], 2)
		26: ShiftOpAndAmt	match_some(21)
		27: Reg	constructor(sub_shift, [19, 23, 25, 26], 3)
		28: InstOutput	constructor(output_reg, [27], 4)
	]
	constraints = [
		18:	some
		16:	some
		11:	some
		8:	some
		13:	some
		6:	some
		3:	some
		21:	some
	]
	result = 28
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(ExtendedValue)	extractor(extended_value_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: ExtendedValue	match_some(11)
		16: Reg	constructor(sub_extend, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
		11:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Imm12)	constructor(imm12_from_negated_value, [10], 0)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(add_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		3:	some
		11:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Imm12)	extractor(imm12_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(sub_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
		11:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Reg	constructor(sub, [9, 12, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_sint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F64ToI64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(true)
		13: Type	const_prim(I64)
		14: Reg	constructor(fpu_to_int_cvt_sat, [10, 11, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		9:	const_prim(F64)
		3:	some
		7:	some
		5:	const_prim(I64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_sint_sat, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F64ToI32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(true)
		14: Type	match_some(6)
		15: Reg	constructor(fpu_to_int_cvt_sat, [11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		10:	const_prim(F64)
		3:	some
		6:	some
		8:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_sint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F32ToI64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(true)
		13: Type	const_prim(I64)
		14: Reg	constructor(fpu_to_int_cvt_sat, [10, 11, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		5:	const_prim(I64)
		9:	const_prim(F32)
		7:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_sint_sat, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F32ToI32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(true)
		14: Type	match_some(6)
		15: Reg	constructor(fpu_to_int_cvt_sat, [11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
		10:	const_prim(F32)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_to_sint_sat, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Fcvtzs, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		8:	const_int(64)
		3:	some
		10:	some
		15:	const_int(64)
		13:	some
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_to_sint_sat, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Fcvtzs, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		13:	some
		8:	const_int(32)
		6:	some
		3:	some
		15:	const_int(32)
		10:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_uint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F64ToU64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(false)
		13: Type	const_prim(I64)
		14: Reg	constructor(fpu_to_int_cvt_sat, [10, 11, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		5:	const_prim(I64)
		7:	some
		3:	some
		9:	const_prim(F64)
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_uint_sat, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F64ToU32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(false)
		14: Type	match_some(6)
		15: Reg	constructor(fpu_to_int_cvt_sat, [11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		3:	some
		6:	some
		10:	const_prim(F64)
		8:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_uint_sat, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F32ToU64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(false)
		13: Type	const_prim(I64)
		14: Reg	constructor(fpu_to_int_cvt_sat, [10, 11, 12, 13], 2)
		15: InstOutput	constructor(output_reg, [14], 3)
	]
	constraints = [
		5:	const_prim(I64)
		9:	const_prim(F32)
		3:	some
		7:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_uint_sat, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F32ToU32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(false)
		14: Type	match_some(6)
		15: Reg	constructor(fpu_to_int_cvt_sat, [11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		10:	const_prim(F32)
		6:	some
		8:	some
		3:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_to_uint_sat, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Fcvtzu, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		3:	some
		13:	some
		10:	some
		15:	const_int(64)
		8:	const_int(64)
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_to_uint_sat, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Fcvtzu, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		10:	some
		6:	some
		8:	const_int(32)
		3:	some
		13:	some
		15:	const_int(32)
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: IntToFpuOp	make_variant(IntToFpuOp::I64ToF64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: Reg	constructor(int_to_fpu, [10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		7:	some
		9:	const_prim(I64)
		5:	const_prim(F64)
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: IntToFpuOp	make_variant(IntToFpuOp::I64ToF32, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: Reg	constructor(int_to_fpu, [10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		9:	const_prim(I64)
		5:	const_prim(F32)
		7:	some
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: IntToFpuOp	make_variant(IntToFpuOp::I32ToF64, [])
		12: Reg	constructor(put_in_reg_sext32, [8], 1)
		13: Reg	constructor(int_to_fpu, [11, 12], 2)
		14: InstOutput	constructor(output_reg, [13], 3)
	]
	constraints = [
		10:	some
		5:	const_prim(F64)
		7:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: IntToFpuOp	make_variant(IntToFpuOp::I32ToF32, [])
		12: Reg	constructor(put_in_reg_sext32, [8], 1)
		13: Reg	constructor(int_to_fpu, [11, 12], 2)
		14: InstOutput	constructor(output_reg, [13], 3)
	]
	constraints = [
		5:	const_prim(F32)
		3:	some
		7:	some
		10:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_from_sint, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Scvtf, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		3:	some
		10:	some
		15:	const_int(64)
		13:	some
		8:	const_int(64)
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_from_sint, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Scvtf, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		3:	some
		15:	const_int(32)
		13:	some
		6:	some
		8:	const_int(32)
		10:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: IntToFpuOp	make_variant(IntToFpuOp::U64ToF64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: Reg	constructor(int_to_fpu, [10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		5:	const_prim(F64)
		3:	some
		7:	some
		9:	const_prim(I64)
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: IntToFpuOp	make_variant(IntToFpuOp::U64ToF32, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: Reg	constructor(int_to_fpu, [10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		7:	some
		5:	const_prim(F32)
		9:	const_prim(I64)
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: IntToFpuOp	make_variant(IntToFpuOp::U32ToF64, [])
		12: Reg	constructor(put_in_reg_zext32, [8], 1)
		13: Reg	constructor(int_to_fpu, [11, 12], 2)
		14: InstOutput	constructor(output_reg, [13], 3)
	]
	constraints = [
		5:	const_prim(F64)
		7:	some
		3:	some
		10:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_from_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: Option(Type)	extractor(fits_in_32, 9)
		11: IntToFpuOp	make_variant(IntToFpuOp::U32ToF32, [])
		12: Reg	constructor(put_in_reg_zext32, [8], 1)
		13: Reg	constructor(int_to_fpu, [11, 12], 2)
		14: InstOutput	constructor(output_reg, [13], 3)
	]
	constraints = [
		3:	some
		7:	some
		10:	some
		5:	const_prim(F32)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_from_uint, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Ucvtf, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		3:	some
		13:	some
		15:	const_int(64)
		10:	some
		8:	const_int(64)
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: Inst	match_tuple(4, 1)
		10: Option(Value)	extractor(fcvt_from_uint, 9)
		11: Value	match_some(10)
		12: Type	extractor(value_type, 11)
		13: Option((u32, u32))	extractor(multi_lane, 12)
		14: (u32, u32)	match_some(13)
		15: u32	match_tuple(14, 0)
		16: VecMisc2	make_variant(VecMisc2::Ucvtf, [])
		17: Reg	constructor(put_in_reg, [11], 1)
		18: VectorSize	constructor(vector_size, [5], 2)
		19: Reg	constructor(vec_misc, [16, 17, 18], 3)
		20: InstOutput	constructor(output_reg, [19], 4)
	]
	constraints = [
		13:	some
		10:	some
		15:	const_int(32)
		8:	const_int(32)
		6:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F64ToI64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(true)
		13: Type	const_prim(F64)
		14: Type	const_prim(I64)
		15: Reg	constructor(fpu_to_int_cvt, [10, 11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		5:	const_prim(I64)
		3:	some
		9:	const_prim(F64)
		7:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_sint, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F64ToI32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(true)
		14: Type	const_prim(F64)
		15: Type	match_some(6)
		16: Reg	constructor(fpu_to_int_cvt, [11, 12, 13, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		10:	const_prim(F64)
		3:	some
		6:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_sint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F32ToI64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(true)
		13: Type	const_prim(F32)
		14: Type	const_prim(I64)
		15: Reg	constructor(fpu_to_int_cvt, [10, 11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(I64)
		7:	some
		9:	const_prim(F32)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_sint, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F32ToI32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(true)
		14: Type	const_prim(F32)
		15: Type	match_some(6)
		16: Reg	constructor(fpu_to_int_cvt, [11, 12, 13, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		10:	const_prim(F32)
		6:	some
		3:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F64ToU64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(false)
		13: Type	const_prim(F64)
		14: Type	const_prim(I64)
		15: Reg	constructor(fpu_to_int_cvt, [10, 11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		9:	const_prim(F64)
		3:	some
		5:	const_prim(I64)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_uint, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F64ToU32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(false)
		14: Type	const_prim(F64)
		15: Type	match_some(6)
		16: Reg	constructor(fpu_to_int_cvt, [11, 12, 13, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		10:	const_prim(F64)
		6:	some
		3:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fcvt_to_uint, 6)
		8: Value	match_some(7)
		9: Type	extractor(value_type, 8)
		10: FpuToIntOp	make_variant(FpuToIntOp::F32ToU64, [])
		11: Reg	constructor(put_in_reg, [8], 1)
		12: bool	const_prim(false)
		13: Type	const_prim(F32)
		14: Type	const_prim(I64)
		15: Reg	constructor(fpu_to_int_cvt, [10, 11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		7:	some
		5:	const_prim(I64)
		3:	some
		9:	const_prim(F32)
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_32, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fcvt_to_uint, 7)
		9: Value	match_some(8)
		10: Type	extractor(value_type, 9)
		11: FpuToIntOp	make_variant(FpuToIntOp::F32ToU32, [])
		12: Reg	constructor(put_in_reg, [9], 1)
		13: bool	const_prim(false)
		14: Type	const_prim(F32)
		15: Type	match_some(6)
		16: Reg	constructor(fpu_to_int_cvt, [11, 12, 13, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
		10:	const_prim(F32)
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fcopysign, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(7, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: Type	match_tuple(4, 0)
		13: Reg	constructor(fcopy_sign, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(fma, 7)
		9: VecALUModOp	make_variant(VecALUModOp::Fmla, [])
		10: (Value, Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Value	match_tuple(10, 1)
		13: Value	match_tuple(10, 2)
		14: VectorSize	constructor(vector_size, [5], 1)
		15: Reg	constructor(lower_fmla, [9, 11, 12, 13, 14], 2)
		16: InstOutput	constructor(output_reg, [15], 3)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value, Value))	extractor(fma, 7)
		9: FPUOp3	make_variant(FPUOp3::MAdd, [])
		10: Type	match_some(6)
		11: ScalarSize	constructor(scalar_size, [10], 1)
		12: (Value, Value, Value)	match_some(8)
		13: Value	match_tuple(12, 0)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Value	match_tuple(12, 1)
		16: Reg	constructor(put_in_reg, [15], 3)
		17: Value	match_tuple(12, 2)
		18: Reg	constructor(put_in_reg, [17], 4)
		19: Reg	constructor(fpu_rrrr, [9, 11, 14, 16, 18], 5)
		20: InstOutput	constructor(output_reg, [19], 6)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(nearest, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Nearest64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	some
		3:	some
		5:	const_prim(F64)
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(nearest, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Nearest32, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		5:	const_prim(F32)
		3:	some
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(nearest, 7)
		9: VecMisc2	make_variant(VecMisc2::Frintn, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(trunc, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Zero64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(F64)
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(trunc, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Zero32, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	some
		5:	const_prim(F32)
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(trunc, 7)
		9: VecMisc2	make_variant(VecMisc2::Frintz, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(floor, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Minus64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(F64)
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(floor, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Minus32, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(floor, 7)
		9: VecMisc2	make_variant(VecMisc2::Frintm, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ceil, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Plus64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(F64)
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(ceil, 6)
		8: FpuRoundMode	make_variant(FpuRoundMode::Plus32, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(fpu_round, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		5:	const_prim(F32)
		3:	some
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(ceil, 7)
		9: VecMisc2	make_variant(VecMisc2::Frintp, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fdemote, 6)
		8: FPUOp1	make_variant(FPUOp1::Cvt64To32, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: ScalarSize	make_variant(ScalarSize::Size64, [])
		12: Reg	constructor(fpu_rr, [8, 10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(F32)
		7:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(fpromote, 6)
		8: FPUOp1	make_variant(FPUOp1::Cvt32To64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: ScalarSize	make_variant(ScalarSize::Size32, [])
		12: Reg	constructor(fpu_rr, [8, 10, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(F64)
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fabs, 7)
		9: FPUOp1	make_variant(FPUOp1::Abs, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(scalar_size, [12], 2)
		14: Reg	constructor(fpu_rr, [9, 11, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fabs, 7)
		9: VecMisc2	make_variant(VecMisc2::Fabs, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fneg, 7)
		9: FPUOp1	make_variant(FPUOp1::Neg, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(scalar_size, [12], 2)
		14: Reg	constructor(fpu_rr, [9, 11, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(fneg, 7)
		9: VecMisc2	make_variant(VecMisc2::Fneg, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(sqrt, 7)
		9: FPUOp1	make_variant(FPUOp1::Sqrt, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Type	match_some(6)
		13: ScalarSize	constructor(scalar_size, [12], 2)
		14: Reg	constructor(fpu_rr, [9, 11, 13], 3)
		15: InstOutput	constructor(output_reg, [14], 4)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(sqrt, 7)
		9: VecMisc2	make_variant(VecMisc2::Fsqrt, [])
		10: Value	match_some(8)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: VectorSize	constructor(vector_size, [5], 2)
		13: Reg	constructor(vec_misc, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmax, 7)
		9: FPUOp2	make_variant(FPUOp2::Max, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmax, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmax, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmin, 7)
		9: FPUOp2	make_variant(FPUOp2::Min, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmin, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmin, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fdiv, 7)
		9: FPUOp2	make_variant(FPUOp2::Div, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fdiv, 7)
		9: VecALUOp	make_variant(VecALUOp::Fdiv, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmul, 7)
		9: FPUOp2	make_variant(FPUOp2::Mul, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fmul, 7)
		9: VecALUOp	make_variant(VecALUOp::Fmul, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(ty_scalar_float, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fsub, 7)
		9: FPUOp2	make_variant(FPUOp2::Sub, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(6)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fsub, 7)
		9: VecALUOp	make_variant(VecALUOp::Fsub, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(fadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(ty_scalar_float, 7)
		9: FPUOp2	make_variant(FPUOp2::Add, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(8)
		16: ScalarSize	constructor(scalar_size, [15], 3)
		17: Reg	constructor(fpu_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(fadd, 7)
		9: VecALUOp	make_variant(VecALUOp::Fadd, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		8:	some
		6:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(sqmul_round_sat, 7)
		9: VecALUOp	make_variant(VecALUOp::Sqrdmulh, [])
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: VectorSize	constructor(vector_size, [5], 3)
		16: Reg	constructor(vec_rrr, [9, 12, 14, 15], 4)
		17: InstOutput	constructor(output_reg, [16], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(avg_round, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(lane_fits_in_32, 7)
		9: VecALUOp	make_variant(VecALUOp::Urhadd, [])
		10: (Value, Value)	match_some(6)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Type	match_some(8)
		16: VectorSize	constructor(vector_size, [15], 3)
		17: Reg	constructor(vec_rrr, [9, 12, 14, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(avg_round, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 2)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 3)
		13: VectorSize	make_variant(VectorSize::Size64x2, [])
		14: Reg	constructor(orr_vec, [10, 12, 13], 4)
		15: u64	const_int(1, u64)
		16: Reg	constructor(splat_const, [15, 13], 1)
		17: Reg	constructor(and_vec, [14, 16, 13], 5)
		18: Reg	constructor(put_in_reg, [9], 6)
		19: u8	const_int(1, u8)
		20: Reg	constructor(ushr_vec_imm, [18, 19, 13], 7)
		21: Reg	constructor(put_in_reg, [11], 8)
		22: Reg	constructor(ushr_vec_imm, [21, 19, 13], 9)
		23: Reg	constructor(add_vec, [20, 22, 13], 10)
		24: Reg	constructor(add_vec, [17, 23, 13], 11)
		25: InstOutput	constructor(output_reg, [24], 12)
	]
	constraints = [
		3:	some
		7:	some
		5:	const_prim(I64X2)
	]
	result = 25
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: Type	const_prim(I64)
		9: Value	match_some(7)
		10: ValueRegs	constructor(put_in_regs, [9], 1)
		11: usize	const_int(0, usize)
		12: Reg	constructor(value_regs_get, [10, 11], 2)
		13: usize	const_int(1, usize)
		14: Reg	constructor(value_regs_get, [10, 13], 3)
		15: u8	const_int(63, u8)
		16: ImmShift	constructor(imm_shift_from_u8, [15], 4)
		17: Reg	constructor(asr_imm, [8, 14, 16], 5)
		18: Reg	constructor(eor, [8, 12, 17], 7)
		19: ProducesFlags	constructor(sub_with_flags_paired, [8, 18, 17], 8)
		20: Reg	constructor(eor, [8, 14, 17], 6)
		21: ConsumesFlags	constructor(sbc_paired, [8, 20, 17], 9)
		22: ValueRegs	constructor(with_flags, [19, 21], 10)
		23: InstOutput	constructor(output, [22], 11)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Value)	extractor(iabs, 5)
		7: Type	match_tuple(4, 0)
		8: Option(Type)	extractor(fits_in_32, 7)
		9: OperandSize	make_variant(OperandSize::Size32, [])
		10: Value	match_some(6)
		11: Reg	constructor(put_in_reg_sext32, [10], 1)
		12: Reg	constructor(abs, [9, 11], 2)
		13: InstOutput	constructor(output_reg, [12], 3)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(iabs, 6)
		8: OperandSize	make_variant(OperandSize::Size64, [])
		9: Value	match_some(7)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Reg	constructor(abs, [8, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		5:	const_prim(I64)
		3:	some
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: Inst	match_tuple(4, 1)
		8: Option(Value)	extractor(iabs, 7)
		9: Value	match_some(8)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: VectorSize	constructor(vector_size, [5], 2)
		12: Reg	constructor(vec_abs, [10, 11], 3)
		13: InstOutput	constructor(output_reg, [12], 4)
	]
	constraints = [
		3:	some
		6:	some
		8:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd_pairwise, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(7, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: Type	match_tuple(4, 0)
		13: VectorSize	constructor(vector_size, [12], 3)
		14: Reg	constructor(addp, [9, 11, 13], 4)
		15: InstOutput	constructor(output_reg, [14], 5)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 15
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Inst	match_some(12)
		16: Option(Value)	extractor(uwiden_high, 15)
		17: Value	match_some(14)
		18: Reg	constructor(put_in_reg, [17], 1)
		19: Reg	constructor(uaddlp16, [18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		7:	some
		12:	some
		14:	some
		3:	some
		10:	some
		16:	some
		5:	const_prim(I32X4)
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Value	match_tuple(8, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(10)
		14: Option(Value)	extractor(uwiden_low, 13)
		15: Inst	match_some(12)
		16: Option(Value)	extractor(uwiden_high, 15)
		17: Value	match_some(14)
		18: Reg	constructor(put_in_reg, [17], 1)
		19: Reg	constructor(uaddlp8, [18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		16:	some
		10:	some
		14:	some
		5:	const_prim(I16X8)
		12:	some
		7:	some
		3:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_tuple(8, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Inst	match_some(14)
		16: Option(Value)	extractor(swiden_high, 15)
		17: Value	match_some(12)
		18: Reg	constructor(put_in_reg, [17], 1)
		19: Reg	constructor(saddlp16, [18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		12:	some
		3:	some
		10:	some
		14:	some
		16:	some
		5:	const_prim(I32X4)
		7:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd_pairwise, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Option(Inst)	extractor(def_inst, 9)
		11: Inst	match_some(10)
		12: Option(Value)	extractor(swiden_low, 11)
		13: Value	match_tuple(8, 1)
		14: Option(Inst)	extractor(def_inst, 13)
		15: Inst	match_some(14)
		16: Option(Value)	extractor(swiden_high, 15)
		17: Value	match_some(12)
		18: Reg	constructor(put_in_reg, [17], 1)
		19: Reg	constructor(saddlp8, [18], 2)
		20: InstOutput	constructor(output_reg, [19], 3)
	]
	constraints = [
		12:	some
		16:	some
		3:	some
		14:	some
		10:	some
		5:	const_prim(I16X8)
		7:	some
	]
	result = 20
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vany_true, 0)
		4: Value	match_some(3)
		5: Reg	constructor(put_in_reg, [4], 1)
		6: Type	extractor(value_type, 4)
		7: ProducesFlags	constructor(vanytrue, [5, 6], 2)
		8: Cond	make_variant(Cond::Ne, [])
		9: ConsumesFlags	constructor(materialize_bool_result, [8], 3)
		10: ValueRegs	constructor(with_flags, [7, 9], 4)
		11: InstOutput	constructor(output, [10], 5)
	]
	constraints = [
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vall_true, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option(Type)	extractor(lane_fits_in_32, 5)
		7: Type	match_some(6)
		8: Option(Type)	constructor(not_vec32x2, [7], 0)
		9: OperandSize	make_variant(OperandSize::Size64, [])
		10: VecLanesOp	make_variant(VecLanesOp::Uminv, [])
		11: Reg	constructor(put_in_reg, [4], 1)
		12: VectorSize	constructor(vector_size, [7], 2)
		13: Reg	constructor(vec_lanes, [10, 11, 12], 3)
		14: u8	const_int(0, u8)
		15: ScalarSize	make_variant(ScalarSize::Size64, [])
		16: Reg	constructor(mov_from_vec, [13, 14, 15], 4)
		17: Imm12	constructor(u8_into_imm12, [14], 5)
		18: ProducesFlags	constructor(cmp_imm, [9, 16, 17], 6)
		19: Cond	make_variant(Cond::Ne, [])
		20: ConsumesFlags	constructor(materialize_bool_result, [19], 7)
		21: ValueRegs	constructor(with_flags, [18, 20], 8)
		22: InstOutput	constructor(output, [21], 9)
	]
	constraints = [
		3:	some
		8:	some
		6:	some
	]
	result = 22
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vall_true, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: Reg	constructor(zero_reg, [], 3)
		12: Reg	constructor(put_in_reg, [4], 1)
		13: u8	const_int(0, u8)
		14: ScalarSize	make_variant(ScalarSize::Size64, [])
		15: Reg	constructor(mov_from_vec, [12, 13, 14], 2)
		16: u64	const_int(32, u64)
		17: ProducesFlags	constructor(cmp_rr_shift, [10, 11, 15, 16], 4)
		18: OperandSize	make_variant(OperandSize::Size32, [])
		19: UImm5	constructor(u8_into_uimm5, [13], 5)
		20: bool	const_prim(false)
		21: bool	const_prim(true)
		22: NZCV	constructor(nzcv, [20, 21, 20, 20], 6)
		23: Cond	make_variant(Cond::Ne, [])
		24: ConsumesFlags	constructor(ccmp_imm, [18, 15, 19, 22, 23], 7)
		25: ValueRegs	constructor(with_flags, [17, 24], 8)
		26: InstOutput	constructor(output, [25], 9)
	]
	constraints = [
		6:	some
		9:	const_int(2)
		3:	some
		8:	const_int(32)
	]
	result = 26
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(vall_true, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option((u32, u32))	extractor(multi_lane, 5)
		7: (u32, u32)	match_some(6)
		8: u32	match_tuple(7, 0)
		9: u32	match_tuple(7, 1)
		10: ScalarSize	make_variant(ScalarSize::Size64, [])
		11: Reg	constructor(put_in_reg, [4], 1)
		12: VectorSize	make_variant(VectorSize::Size64x2, [])
		13: Reg	constructor(cmeq0, [11, 12], 2)
		14: Reg	constructor(addp, [13, 13, 12], 3)
		15: ProducesFlags	constructor(fpu_cmp, [10, 14, 14], 4)
		16: Cond	make_variant(Cond::Eq, [])
		17: ConsumesFlags	constructor(materialize_bool_result, [16], 5)
		18: ValueRegs	constructor(with_flags, [15, 17], 6)
		19: InstOutput	constructor(output, [18], 7)
	]
	constraints = [
		3:	some
		9:	const_int(2)
		8:	const_int(64)
		6:	some
	]
	result = 19
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Option(Type)	extractor(int_fits_in_32, 5)
		7: Reg	constructor(put_in_reg_zext32, [4], 1)
		8: ScalarSize	make_variant(ScalarSize::Size32, [])
		9: Reg	constructor(mov_to_fpu, [7, 8], 2)
		10: InstOutput	constructor(output_reg, [9], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 10
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(scalar_to_vector, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: Reg	constructor(put_in_reg, [4], 1)
		7: ScalarSize	make_variant(ScalarSize::Size64, [])
		8: Reg	constructor(mov_to_fpu, [6, 7], 2)
		9: InstOutput	constructor(output_reg, [8], 3)
	]
	constraints = [
		5:	const_prim(I64)
		3:	some
	]
	result = 9
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(scalar_to_vector, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size64, [])
		11: Reg	constructor(fpu_extend, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		5:	const_prim(F64X2)
		7:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option(Value)	extractor(scalar_to_vector, 6)
		8: Value	match_some(7)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: ScalarSize	make_variant(ScalarSize::Size32, [])
		11: Reg	constructor(fpu_extend, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	some
		5:	const_prim(F32X4)
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iconcat, 6)
		8: (Value, Value)	match_some(7)
		9: Value	match_tuple(8, 0)
		10: Reg	constructor(put_in_reg, [9], 1)
		11: Value	match_tuple(8, 1)
		12: Reg	constructor(put_in_reg, [11], 2)
		13: ValueRegs	constructor(value_regs, [10, 12], 3)
		14: InstOutput	constructor(output, [13], 4)
	]
	constraints = [
		7:	some
		5:	const_prim(I128)
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Value)	extractor(isplit, 0)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: ValueRegs	constructor(put_in_regs, [4], 1)
		7: usize	const_int(0, usize)
		8: Reg	constructor(value_regs_get, [6, 7], 2)
		9: ValueRegs	constructor(value_reg, [8], 3)
		10: usize	const_int(1, usize)
		11: Reg	constructor(value_regs_get, [6, 10], 4)
		12: ValueRegs	constructor(value_reg, [11], 5)
		13: InstOutput	constructor(output_pair, [9, 12], 6)
	]
	constraints = [
		3:	some
		5:	const_prim(I128)
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(swizzle, 5)
		7: (Value, Value)	match_some(6)
		8: Value	match_tuple(7, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(7, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: Reg	constructor(vec_tbl, [9, 11], 3)
		13: InstOutput	constructor(output_reg, [12], 4)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value, Immediate))	extractor(shuffle, 5)
		7: (Value, Value, Immediate)	match_some(6)
		8: Immediate	match_tuple(7, 2)
		9: Option(u128)	extractor(u128_from_immediate, 8)
		10: Value	match_tuple(7, 0)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: Value	match_tuple(7, 1)
		13: Reg	constructor(put_in_reg, [12], 3)
		14: u128	match_some(9)
		15: Reg	constructor(constant_f128, [14], 1)
		16: Type	match_tuple(4, 0)
		17: Reg	constructor(vec_tbl2, [11, 13, 15, 16], 4)
		18: InstOutput	constructor(output_reg, [17], 5)
	]
	constraints = [
		9:	some
		3:	some
		6:	some
	]
	result = 18
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size32x4, [])
		11: Reg	constructor(rev64, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	const_int(14673614102390417578512422760905835780)
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size16x8, [])
		11: Reg	constructor(rev64, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(12004814239757670119517129289737963270)
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size8x16, [])
		11: Reg	constructor(rev64, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	const_int(10680758337341567148842519922299176455)
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size16x8, [])
		11: Reg	constructor(rev32, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		7:	const_int(17342576855639742879858139805557719810)
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size8x16, [])
		11: Reg	constructor(rev32, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	const_int(16018520953223639909183530438118932995)
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: VectorSize	make_variant(VectorSize::Size8x16, [])
		11: Reg	constructor(rev16, [9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		7:	const_int(18687320815856387368178823909286805505)
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_trn2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		7:	const_int(41362427188014754909301208165426529540)
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_trn1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		7:	const_int(36024664569647092737326704519438008576)
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_trn2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(41362142128814346332279593629287318274)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_trn1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(38693260819630515246292341806293057792)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_trn2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(41284541550424544734358823780242100481)
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_trn1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		7:	const_int(39950100895832629191365197868744970240)
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_zip2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		7:	const_int(41362427188014754909590568856778836232)
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_zip1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(30686901951279430565641561564801794304)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_zip2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(41362142129435743685477327603181816072)
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_zip1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(30686616892700419341528320311204774144)
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_zip2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		7:	const_int(41284561912683712994304547342093195272)
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_zip1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		7:	const_int(30609036675948388650355540050116153344)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size64x2, [])
		13: Reg	constructor(vec_uzp2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		7:	const_int(41362427191743139026172726477975062792)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size64x2, [])
		13: Reg	constructor(vec_uzp1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(30686901955007814682223719185998020864)
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_uzp2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		7:	const_int(41362427190500344320355979912890680580)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size32x4, [])
		13: Reg	constructor(vec_uzp1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		6:	some
		3:	some
		7:	const_int(36024664572132682148381476266902159616)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_uzp2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(41362386467224802506860000736977486594)
		6:	some
		3:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size16x8, [])
		13: Reg	constructor(vec_uzp1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(38693505158040971420872748913983226112)
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_uzp2, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		7:	const_int(41357194091136896220700492464948314881)
		3:	some
		6:	some
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u128)	extractor(u128_from_immediate, 5)
		7: u128	match_some(6)
		8: Value	match_tuple(4, 0)
		9: Reg	constructor(put_in_reg, [8], 1)
		10: Value	match_tuple(4, 1)
		11: Reg	constructor(put_in_reg, [10], 2)
		12: VectorSize	make_variant(VectorSize::Size8x16, [])
		13: Reg	constructor(vec_uzp1, [9, 11, 12], 3)
		14: InstOutput	constructor(output_reg, [13], 4)
	]
	constraints = [
		3:	some
		6:	some
		7:	const_int(40022753436544980677706866553451184640)
	]
	result = 14
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(vec_extract_imm4_from_immediate, 5)
		7: Value	match_tuple(4, 0)
		8: Reg	constructor(put_in_reg, [7], 1)
		9: Value	match_tuple(4, 1)
		10: Reg	constructor(put_in_reg, [9], 2)
		11: u8	match_some(6)
		12: Reg	constructor(vec_extract, [8, 10, 11], 3)
		13: InstOutput	constructor(output_reg, [12], 4)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 13
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shuffle_dup64_from_imm, 5)
		7: Value	match_tuple(4, 0)
		8: Reg	constructor(put_in_reg, [7], 1)
		9: VectorSize	make_variant(VectorSize::Size64x2, [])
		10: u8	match_some(6)
		11: Reg	constructor(vec_dup_from_fpu, [8, 9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shuffle_dup32_from_imm, 5)
		7: Value	match_tuple(4, 0)
		8: Reg	constructor(put_in_reg, [7], 1)
		9: VectorSize	make_variant(VectorSize::Size32x4, [])
		10: u8	match_some(6)
		11: Reg	constructor(vec_dup_from_fpu, [8, 9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shuffle_dup16_from_imm, 5)
		7: Value	match_tuple(4, 0)
		8: Reg	constructor(put_in_reg, [7], 1)
		9: VectorSize	make_variant(VectorSize::Size16x8, [])
		10: u8	match_some(6)
		11: Reg	constructor(vec_dup_from_fpu, [8, 9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Value, Value, Immediate))	extractor(shuffle, 0)
		4: (Value, Value, Immediate)	match_some(3)
		5: Immediate	match_tuple(4, 2)
		6: Option(u8)	extractor(shuffle_dup8_from_imm, 5)
		7: Value	match_tuple(4, 0)
		8: Reg	constructor(put_in_reg, [7], 1)
		9: VectorSize	make_variant(VectorSize::Size8x16, [])
		10: u8	match_some(6)
		11: Reg	constructor(vec_dup_from_fpu, [8, 9, 10], 2)
		12: InstOutput	constructor(output_reg, [11], 3)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 12
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Inst	match_tuple(4, 1)
		7: Option((Value, Value))	extractor(iadd, 6)
		8: Type	const_prim(I64)
		9: (Value, Value)	match_some(7)
		10: Value	match_tuple(9, 0)
		11: ValueRegs	constructor(put_in_regs, [10], 1)
		12: usize	const_int(0, usize)
		13: Reg	constructor(value_regs_get, [11, 12], 2)
		14: Value	match_tuple(9, 1)
		15: ValueRegs	constructor(put_in_regs, [14], 4)
		16: Reg	constructor(value_regs_get, [15, 12], 5)
		17: ProducesFlags	constructor(add_with_flags_paired, [8, 13, 16], 7)
		18: usize	const_int(1, usize)
		19: Reg	constructor(value_regs_get, [11, 18], 3)
		20: Reg	constructor(value_regs_get, [15, 18], 6)
		21: ConsumesFlags	constructor(adc_paired, [8, 19, 20], 8)
		22: ValueRegs	constructor(with_flags, [17, 21], 9)
		23: InstOutput	constructor(output, [22], 10)
	]
	constraints = [
		5:	const_prim(I128)
		7:	some
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option((Value, Value))	extractor(iadd, 5)
		7: Type	match_tuple(4, 0)
		8: Option((u32, u32))	extractor(multi_lane, 7)
		9: (Value, Value)	match_some(6)
		10: Value	match_tuple(9, 0)
		11: Reg	constructor(put_in_reg, [10], 1)
		12: Value	match_tuple(9, 1)
		13: Reg	constructor(put_in_reg, [12], 2)
		14: VectorSize	constructor(vector_size, [7], 3)
		15: Reg	constructor(add_vec, [11, 13, 14], 4)
		16: InstOutput	constructor(output_reg, [15], 5)
	]
	constraints = [
		8:	some
		3:	some
		6:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(isub, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(imul, 12)
		14: Type	match_some(6)
		15: (Value, Value)	match_some(13)
		16: Value	match_tuple(15, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: Value	match_tuple(15, 1)
		19: Reg	constructor(put_in_reg, [18], 2)
		20: Value	match_tuple(9, 0)
		21: Reg	constructor(put_in_reg, [20], 3)
		22: Reg	constructor(msub, [14, 17, 19, 21], 4)
		23: InstOutput	constructor(output_reg, [22], 5)
	]
	constraints = [
		6:	some
		8:	some
		3:	some
		13:	some
		11:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(imul, 12)
		14: Type	match_some(6)
		15: (Value, Value)	match_some(13)
		16: Value	match_tuple(15, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: Value	match_tuple(15, 1)
		19: Reg	constructor(put_in_reg, [18], 2)
		20: Value	match_tuple(9, 1)
		21: Reg	constructor(put_in_reg, [20], 3)
		22: Reg	constructor(madd, [14, 17, 19, 21], 4)
		23: InstOutput	constructor(output_reg, [22], 5)
	]
	constraints = [
		8:	some
		11:	some
		6:	some
		13:	some
		3:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(imul, 12)
		14: Type	match_some(6)
		15: (Value, Value)	match_some(13)
		16: Value	match_tuple(15, 0)
		17: Reg	constructor(put_in_reg, [16], 1)
		18: Value	match_tuple(15, 1)
		19: Reg	constructor(put_in_reg, [18], 2)
		20: Value	match_tuple(9, 0)
		21: Reg	constructor(put_in_reg, [20], 3)
		22: Reg	constructor(madd, [14, 17, 19, 21], 4)
		23: InstOutput	constructor(output_reg, [22], 5)
	]
	constraints = [
		11:	some
		6:	some
		8:	some
		3:	some
		13:	some
	]
	result = 23
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(ishl, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Imm64)	extractor(iconst, 17)
		19: Type	match_some(6)
		20: Imm64	match_some(18)
		21: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [19, 20], 0)
		22: Value	match_tuple(9, 1)
		23: Reg	constructor(put_in_reg, [22], 1)
		24: Value	match_tuple(14, 0)
		25: Reg	constructor(put_in_reg, [24], 2)
		26: ShiftOpAndAmt	match_some(21)
		27: Reg	constructor(add_shift, [19, 23, 25, 26], 3)
		28: InstOutput	constructor(output_reg, [27], 4)
	]
	constraints = [
		18:	some
		11:	some
		21:	some
		8:	some
		13:	some
		16:	some
		3:	some
		6:	some
	]
	result = 28
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Inst)	extractor(def_inst, 10)
		12: Inst	match_some(11)
		13: Option((Value, Value))	extractor(ishl, 12)
		14: (Value, Value)	match_some(13)
		15: Value	match_tuple(14, 1)
		16: Option(Inst)	extractor(def_inst, 15)
		17: Inst	match_some(16)
		18: Option(Imm64)	extractor(iconst, 17)
		19: Type	match_some(6)
		20: Imm64	match_some(18)
		21: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [19, 20], 0)
		22: Value	match_tuple(9, 0)
		23: Reg	constructor(put_in_reg, [22], 1)
		24: Value	match_tuple(14, 0)
		25: Reg	constructor(put_in_reg, [24], 2)
		26: ShiftOpAndAmt	match_some(21)
		27: Reg	constructor(add_shift, [19, 23, 25, 26], 3)
		28: InstOutput	constructor(output_reg, [27], 4)
	]
	constraints = [
		16:	some
		3:	some
		18:	some
		6:	some
		8:	some
		13:	some
		21:	some
		11:	some
	]
	result = 28
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(ExtendedValue)	extractor(extended_value_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 1)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: ExtendedValue	match_some(11)
		16: Reg	constructor(add_extend, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		11:	some
		3:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(ExtendedValue)	extractor(extended_value_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: ExtendedValue	match_some(11)
		16: Reg	constructor(add_extend, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		8:	some
		11:	some
		6:	some
		3:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Imm12)	constructor(imm12_from_negated_value, [10], 0)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 1)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(sub_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		3:	some
		11:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Imm12)	constructor(imm12_from_negated_value, [10], 0)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(sub_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
		11:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 0)
		11: Option(Imm12)	extractor(imm12_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 1)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(add_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		3:	some
		11:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: (Value, Value)	match_some(8)
		10: Value	match_tuple(9, 1)
		11: Option(Imm12)	extractor(imm12_from_value, 10)
		12: Type	match_some(6)
		13: Value	match_tuple(9, 0)
		14: Reg	constructor(put_in_reg, [13], 1)
		15: Imm12	match_some(11)
		16: Reg	constructor(add_imm, [12, 14, 15], 2)
		17: InstOutput	constructor(output_reg, [16], 3)
	]
	constraints = [
		11:	some
		3:	some
		8:	some
		6:	some
	]
	result = 17
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Type	match_tuple(4, 0)
		6: Option(Type)	extractor(fits_in_64, 5)
		7: Inst	match_tuple(4, 1)
		8: Option((Value, Value))	extractor(iadd, 7)
		9: Type	match_some(6)
		10: (Value, Value)	match_some(8)
		11: Value	match_tuple(10, 0)
		12: Reg	constructor(put_in_reg, [11], 1)
		13: Value	match_tuple(10, 1)
		14: Reg	constructor(put_in_reg, [13], 2)
		15: Reg	constructor(add, [9, 12, 14], 3)
		16: InstOutput	constructor(output_reg, [15], 4)
	]
	constraints = [
		6:	some
		3:	some
		8:	some
	]
	result = 16
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(())	extractor(nop, 0)
		4: Reg	constructor(invalid_reg, [], 1)
		5: InstOutput	constructor(output_reg, [4], 2)
	]
	constraints = [
		3:	some
	]
	result = 5
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Ieee64)	extractor(f64const, 0)
		4: Ieee64	match_some(3)
		5: u64	extractor(u64_from_ieee64, 4)
		6: Reg	constructor(constant_f64, [5], 1)
		7: InstOutput	constructor(output_reg, [6], 2)
	]
	constraints = [
		3:	some
	]
	result = 7
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option(Ieee32)	extractor(f32const, 0)
		4: Ieee32	match_some(3)
		5: u32	extractor(u32_from_ieee32, 4)
		6: Reg	constructor(constant_f32, [5], 1)
		7: InstOutput	constructor(output_reg, [6], 2)
	]
	constraints = [
		3:	some
	]
	result = 7
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(())	extractor(null, 5)
		7: Type	match_tuple(4, 0)
		8: ImmExtend	make_variant(ImmExtend::Zero, [])
		9: u64	const_int(0, u64)
		10: Reg	constructor(imm, [7, 8, 9], 1)
		11: InstOutput	constructor(output_reg, [10], 2)
	]
	constraints = [
		6:	some
		3:	some
	]
	result = 11
}
expansion {
	term = lower
	bindings = [
		0: Inst	argument(0)
		3: Option((Type, Inst))	extractor(has_type, 0)
		4: (Type, Inst)	match_some(3)
		5: Inst	match_tuple(4, 1)
		6: Option(Imm64)	extractor(iconst, 5)
		7: Type	match_tuple(4, 0)
		8: ImmExtend	make_variant(ImmExtend::Zero, [])
		9: Imm64	match_some(6)
		10: u64	extractor(u64_from_imm64, 9)
		11: Reg	constructor(imm, [7, 8, 10], 1)
		12: InstOutput	constructor(output_reg, [11], 2)
	]
	constraints = [
		3:	some
		6:	some
	]
	result = 12
}

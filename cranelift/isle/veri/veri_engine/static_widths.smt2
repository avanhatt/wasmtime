(set-option :print-success true)
(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(declare-const extend__18 (_ BitVec 64))
(declare-const extend__18__a__62 (_ BitVec 64))
(declare-const extend__18__b__56 Bool)
(declare-const extend__18__c__60 (_ BitVec 8))
(declare-const extend__18__d__58 (_ BitVec 8))
(declare-const extend__18__result__57 (_ BitVec 64))
(declare-const fits_in_64__4 Int)
(declare-const fits_in_64__4__arg__21 Int)
(declare-const fits_in_64__4__result__20 Int)
(declare-const has_type__12 (_ BitVec 64))
(declare-const has_type__12__arg__35 (_ BitVec 64))
(declare-const has_type__12__result__34 (_ BitVec 64))
(declare-const has_type__12__ty__37 Int)
(declare-const in__clif1__6 Int)
(declare-const lower__13 (_ BitVec 64))
(declare-const lower__13__arg__41 (_ BitVec 64))
(declare-const lower__13__result__40 (_ BitVec 64))
(declare-const out__clif0__1 Int)
(declare-const output_reg__19 (_ BitVec 64))
(declare-const output_reg__19__arg__74 (_ BitVec 64))
(declare-const output_reg__19__result__72 (_ BitVec 64))
(declare-const put_in_reg__14 (_ BitVec 64))
(declare-const put_in_reg__14__arg__45 (_ BitVec 64))
(declare-const put_in_reg__14__result__43 (_ BitVec 64))
(declare-const sextend__11 (_ BitVec 64))
(declare-const sextend__11__result__29 (_ BitVec 64))
(declare-const sextend__11__x__31 (_ BitVec 64))
(declare-const ty_bits__16 (_ BitVec 8))
(declare-const ty_bits__16__result__48 (_ BitVec 8))
(declare-const ty_bits__16__x__49 Int)
(declare-const ty_bits__17 (_ BitVec 8))
(declare-const ty_bits__17__result__52 (_ BitVec 8))
(declare-const ty_bits__17__x__53 Int)
(declare-const value_type__9 (_ BitVec 64))
(declare-const value_type__9__arg__25 Int)
(declare-const value_type__9__result__26 (_ BitVec 64))
(declare-const x__clif2__5 (_ BitVec 64))
(declare-const fresh0 Int)
(declare-const fresh1 Int)
(push)
(assert (! (= out__clif0__1 fresh0) :named assum0))
(assert (! (= fits_in_64__4__result__20 fits_in_64__4__arg__21) :named assum1))
(assert (! (<= fits_in_64__4__arg__21 64) :named assum2))
(assert (! (= out__clif0__1 fits_in_64__4__arg__21) :named assum3))
(assert (! (= fits_in_64__4 fits_in_64__4__result__20) :named assum4))
(assert (! (= in__clif1__6 fresh1) :named assum5))
(assert (! (= value_type__9__arg__25 64) :named assum6))
(assert (! (= in__clif1__6 value_type__9__arg__25) :named assum7))
(assert (! (= value_type__9 value_type__9__result__26) :named assum8))
(assert (! (= x__clif2__5 value_type__9) :named assum9))
(assert (! (= sextend__11__result__29 ((_ sign_extend 0) sextend__11__x__31)) :named assum10))
(assert (! (= x__clif2__5 sextend__11__x__31) :named assum11))
(assert (! (= sextend__11 sextend__11__result__29) :named assum12))
(assert (! (= has_type__12__result__34 has_type__12__arg__35) :named assum13))
(assert (! (= has_type__12__ty__37 64) :named assum14))
(assert (! (= fits_in_64__4 has_type__12__ty__37) :named assum15))
(assert (! (= sextend__11 has_type__12__arg__35) :named assum16))
(assert (! (= has_type__12 has_type__12__result__34) :named assum17))
(assert (! (= lower__13__result__40 lower__13__arg__41) :named assum18))
(assert (! (= has_type__12 lower__13__arg__41) :named assum19))
(assert (! (= lower__13 lower__13__result__40) :named assum20))
(assert (! (= put_in_reg__14__result__43 put_in_reg__14__arg__45) :named assum21))
(assert (! (= x__clif2__5 put_in_reg__14__arg__45) :named assum22))
(assert (! (= put_in_reg__14 put_in_reg__14__result__43) :named assum23))
(assert (! (= ty_bits__16__result__48 ((_ int2bv 8) ty_bits__16__x__49)) :named assum24))
(assert (! (= in__clif1__6 ty_bits__16__x__49) :named assum25))
(assert (! (= ty_bits__16 ty_bits__16__result__48) :named assum26))
(assert (! (= ty_bits__17__result__52 ((_ int2bv 8) ty_bits__17__x__53)) :named assum27))
(assert (! (= out__clif0__1 ty_bits__17__x__53) :named assum28))
(assert (! (= ty_bits__17 ty_bits__17__result__52) :named assum29))
(assert (! (ite extend__18__b__56 (= extend__18__result__57 ((_ sign_extend 0) extend__18__a__62)) (= extend__18__result__57 ((_ zero_extend 0) extend__18__a__62))) :named assum30))
(assert (! (= put_in_reg__14 extend__18__a__62) :named assum31))
(assert (! (= true extend__18__b__56) :named assum32))
(assert (! (= ty_bits__16 extend__18__c__60) :named assum33))
(assert (! (= ty_bits__17 extend__18__d__58) :named assum34))
(assert (! (= extend__18 extend__18__result__57) :named assum35))
(assert (! (= output_reg__19__result__72 output_reg__19__arg__74) :named assum36))
(assert (! (= extend__18 output_reg__19__arg__74) :named assum37))
(assert (! (= output_reg__19 output_reg__19__result__72) :named assum38))
(check-sat)
(get-value (x__clif2__5))
(assert (not (= x__clif2__5 #x0000000000000000)))
(check-sat)
(pop)
(assert (not (=> (and (= out__clif0__1 fresh0) (= fits_in_64__4__result__20 fits_in_64__4__arg__21) (<= fits_in_64__4__arg__21 64) (= out__clif0__1 fits_in_64__4__arg__21) (= fits_in_64__4 fits_in_64__4__result__20) (= in__clif1__6 fresh1) (= value_type__9__arg__25 64) (= in__clif1__6 value_type__9__arg__25) (= value_type__9 value_type__9__result__26) (= x__clif2__5 value_type__9) (= sextend__11__result__29 ((_ sign_extend 0) sextend__11__x__31)) (= x__clif2__5 sextend__11__x__31) (= sextend__11 sextend__11__result__29) (= has_type__12__result__34 has_type__12__arg__35) (= has_type__12__ty__37 64) (= fits_in_64__4 has_type__12__ty__37) (= sextend__11 has_type__12__arg__35) (= has_type__12 has_type__12__result__34) (= lower__13__result__40 lower__13__arg__41) (= has_type__12 lower__13__arg__41) (= lower__13 lower__13__result__40) (= put_in_reg__14__result__43 put_in_reg__14__arg__45) (= x__clif2__5 put_in_reg__14__arg__45) (= put_in_reg__14 put_in_reg__14__result__43) (= ty_bits__16__result__48 ((_ int2bv 8) ty_bits__16__x__49)) (= in__clif1__6 ty_bits__16__x__49) (= ty_bits__16 ty_bits__16__result__48) (= ty_bits__17__result__52 ((_ int2bv 8) ty_bits__17__x__53)) (= out__clif0__1 ty_bits__17__x__53) (= ty_bits__17 ty_bits__17__result__52) (ite extend__18__b__56 (= extend__18__result__57 ((_ sign_extend 0) extend__18__a__62)) (= extend__18__result__57 ((_ zero_extend 0) extend__18__a__62))) (= put_in_reg__14 extend__18__a__62) (= true extend__18__b__56) (= ty_bits__16 extend__18__c__60) (= ty_bits__17 extend__18__d__58) (= extend__18 extend__18__result__57) (= output_reg__19__result__72 output_reg__19__arg__74) (= extend__18 output_reg__19__arg__74) (= output_reg__19 output_reg__19__result__72)) (= lower__13 output_reg__19))))
(check-sat)

(set-option :print-success true)
(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(declare-const a64_udiv__19 (_ BitVec 64))
(declare-const a64_udiv__19__a__68 (_ BitVec 64))
(declare-const a64_udiv__19__b__70 (_ BitVec 64))
(declare-const a64_udiv__19__result__63 (_ BitVec 64))
(declare-const a64_udiv__19__ty__64 Int)
(declare-const div__clif5__20 (_ BitVec 64))
(declare-const fits_in_64__4 Int)
(declare-const fits_in_64__4__arg__27 Int)
(declare-const fits_in_64__4__result__26 Int)
(declare-const has_type__12 (_ BitVec 8))
(declare-const has_type__12__arg__42 (_ BitVec 8))
(declare-const has_type__12__result__41 (_ BitVec 8))
(declare-const has_type__12__ty__44 Int)
(declare-const let__25 (_ BitVec 8))
(declare-const lower__13 (_ BitVec 8))
(declare-const lower__13__arg__48 (_ BitVec 8))
(declare-const lower__13__result__47 (_ BitVec 8))
(declare-const msub__22 (_ BitVec 64))
(declare-const msub__22__a__84 (_ BitVec 64))
(declare-const msub__22__b__86 (_ BitVec 64))
(declare-const msub__22__c__82 (_ BitVec 64))
(declare-const msub__22__result__77 (_ BitVec 64))
(declare-const msub__22__ty__78 Int)
(declare-const output_reg__24 (_ BitVec 8))
(declare-const output_reg__24__arg__97 (_ BitVec 64))
(declare-const output_reg__24__result__95 (_ BitVec 8))
(declare-const put_in_reg_zext64__14 (_ BitVec 64))
(declare-const put_in_reg_zext64__14__result__50 (_ BitVec 64))
(declare-const put_in_reg_zext64__14__x__52 (_ BitVec 8))
(declare-const put_nonzero_in_reg_zext64__16 (_ BitVec 64))
(declare-const put_nonzero_in_reg_zext64__16__result__55 (_ BitVec 64))
(declare-const put_nonzero_in_reg_zext64__16__x__57 (_ BitVec 8))
(declare-const result__clif6__23 (_ BitVec 64))
(declare-const ty__clif0__1 Int)
(declare-const urem__11 (_ BitVec 8))
(declare-const urem__11__result__31 (_ BitVec 8))
(declare-const urem__11__x__32 (_ BitVec 8))
(declare-const urem__11__y__33 (_ BitVec 8))
(declare-const x64__clif3__15 (_ BitVec 64))
(declare-const x__clif1__5 (_ BitVec 8))
(declare-const y64__clif4__17 (_ BitVec 64))
(declare-const y__clif2__8 (_ BitVec 8))
(declare-const fresh0 Int)
(declare-const fresh1 (_ BitVec 8))
(declare-const fresh2 (_ BitVec 8))
(declare-const fresh3 (_ BitVec 32))
(declare-const fresh4 (_ BitVec 32))
(push)
(assert (! (= ty__clif0__1 fresh0) :named assum0))
(assert (! (= fits_in_64__4__result__26 fits_in_64__4__arg__27) :named assum1))
(assert (! (<= fits_in_64__4__arg__27 64) :named assum2))
(assert (! (= ty__clif0__1 fits_in_64__4__arg__27) :named assum3))
(assert (! (= fits_in_64__4 fits_in_64__4__result__26) :named assum4))
(assert (! (= x__clif1__5 fresh1) :named assum5))
(assert (! (= y__clif2__8 fresh2) :named assum6))
(assert (! (= urem__11__result__31 (bvurem urem__11__x__32 urem__11__y__33)) :named assum7))
(assert (! (not (= urem__11__y__33 ((_ zero_extend 7) (_ bv0 1)))) :named assum8))
(assert (! (= x__clif1__5 urem__11__x__32) :named assum9))
(assert (! (= y__clif2__8 urem__11__y__33) :named assum10))
(assert (! (= urem__11 urem__11__result__31) :named assum11))
(assert (! (= has_type__12__result__41 has_type__12__arg__42) :named assum12))
(assert (! (= has_type__12__ty__44 8) :named assum13))
(assert (! (= fits_in_64__4 has_type__12__ty__44) :named assum14))
(assert (! (= urem__11 has_type__12__arg__42) :named assum15))
(assert (! (= has_type__12 has_type__12__result__41) :named assum16))
(assert (! (= lower__13__result__47 lower__13__arg__48) :named assum17))
(assert (! (= has_type__12 lower__13__arg__48) :named assum18))
(assert (! (= lower__13 lower__13__result__47) :named assum19))
(assert (! (= put_in_reg_zext64__14__result__50 ((_ zero_extend 56) put_in_reg_zext64__14__x__52)) :named assum20))
(assert (! (= x__clif1__5 put_in_reg_zext64__14__x__52) :named assum21))
(assert (! (= put_in_reg_zext64__14 put_in_reg_zext64__14__result__50) :named assum22))
(assert (! (= put_nonzero_in_reg_zext64__16__result__55 ((_ zero_extend 56) put_nonzero_in_reg_zext64__16__x__57)) :named assum23))
(assert (! (= y__clif2__8 put_nonzero_in_reg_zext64__16__x__57) :named assum24))
(assert (! (= put_nonzero_in_reg_zext64__16 put_nonzero_in_reg_zext64__16__result__55) :named assum25))
(assert (! (= a64_udiv__19__result__63 (ite (<= a64_udiv__19__ty__64 32) (concat fresh3 (bvudiv ((_ extract 31 0) a64_udiv__19__a__68) ((_ extract 31 0) a64_udiv__19__b__70))) (bvudiv a64_udiv__19__a__68 a64_udiv__19__b__70))) :named assum26))
(assert (! (= 64 a64_udiv__19__ty__64) :named assum27))
(assert (! (= x64__clif3__15 a64_udiv__19__a__68) :named assum28))
(assert (! (= y64__clif4__17 a64_udiv__19__b__70) :named assum29))
(assert (! (= a64_udiv__19 a64_udiv__19__result__63) :named assum30))
(assert (! (= msub__22__result__77 (ite (<= msub__22__ty__78 32) (concat fresh4 (bvsub ((_ extract 31 0) msub__22__c__82) (bvmul ((_ extract 31 0) msub__22__a__84) ((_ extract 31 0) msub__22__b__86)))) (bvsub msub__22__c__82 (bvmul msub__22__a__84 msub__22__b__86)))) :named assum31))
(assert (! (= 64 msub__22__ty__78) :named assum32))
(assert (! (= div__clif5__20 msub__22__a__84) :named assum33))
(assert (! (= y64__clif4__17 msub__22__b__86) :named assum34))
(assert (! (= x64__clif3__15 msub__22__c__82) :named assum35))
(assert (! (= msub__22 msub__22__result__77) :named assum36))
(assert (! (= output_reg__24__result__95 ((_ extract 7 0) output_reg__24__arg__97)) :named assum37))
(assert (! (= result__clif6__23 output_reg__24__arg__97) :named assum38))
(assert (! (= output_reg__24 output_reg__24__result__95) :named assum39))
(assert (! (= x64__clif3__15 put_in_reg_zext64__14) :named assum40))
(assert (! (= y64__clif4__17 put_nonzero_in_reg_zext64__16) :named assum41))
(assert (! (= div__clif5__20 a64_udiv__19) :named assum42))
(assert (! (= result__clif6__23 msub__22) :named assum43))
(check-sat)
(get-value (x__clif1__5 y__clif2__8))
(assert (and (not (= x__clif1__5 #x00)) (not (= y__clif2__8 #x01))))
(check-sat)
(pop)
(assert (not (=> (and (= ty__clif0__1 fresh0) (= fits_in_64__4__result__26 fits_in_64__4__arg__27) (<= fits_in_64__4__arg__27 64) (= ty__clif0__1 fits_in_64__4__arg__27) (= fits_in_64__4 fits_in_64__4__result__26) (= x__clif1__5 fresh1) (= y__clif2__8 fresh2) (= urem__11__result__31 (bvurem urem__11__x__32 urem__11__y__33)) (not (= urem__11__y__33 ((_ zero_extend 7) (_ bv0 1)))) (= x__clif1__5 urem__11__x__32) (= y__clif2__8 urem__11__y__33) (= urem__11 urem__11__result__31) (= has_type__12__result__41 has_type__12__arg__42) (= has_type__12__ty__44 8) (= fits_in_64__4 has_type__12__ty__44) (= urem__11 has_type__12__arg__42) (= has_type__12 has_type__12__result__41) (= lower__13__result__47 lower__13__arg__48) (= has_type__12 lower__13__arg__48) (= lower__13 lower__13__result__47) (= put_in_reg_zext64__14__result__50 ((_ zero_extend 56) put_in_reg_zext64__14__x__52)) (= x__clif1__5 put_in_reg_zext64__14__x__52) (= put_in_reg_zext64__14 put_in_reg_zext64__14__result__50) (= put_nonzero_in_reg_zext64__16__result__55 ((_ zero_extend 56) put_nonzero_in_reg_zext64__16__x__57)) (= y__clif2__8 put_nonzero_in_reg_zext64__16__x__57) (= put_nonzero_in_reg_zext64__16 put_nonzero_in_reg_zext64__16__result__55) (= a64_udiv__19__result__63 (ite (<= a64_udiv__19__ty__64 32) (concat fresh3 (bvudiv ((_ extract 31 0) a64_udiv__19__a__68) ((_ extract 31 0) a64_udiv__19__b__70))) (bvudiv a64_udiv__19__a__68 a64_udiv__19__b__70))) (= 64 a64_udiv__19__ty__64) (= x64__clif3__15 a64_udiv__19__a__68) (= y64__clif4__17 a64_udiv__19__b__70) (= a64_udiv__19 a64_udiv__19__result__63) (= msub__22__result__77 (ite (<= msub__22__ty__78 32) (concat fresh4 (bvsub ((_ extract 31 0) msub__22__c__82) (bvmul ((_ extract 31 0) msub__22__a__84) ((_ extract 31 0) msub__22__b__86)))) (bvsub msub__22__c__82 (bvmul msub__22__a__84 msub__22__b__86)))) (= 64 msub__22__ty__78) (= div__clif5__20 msub__22__a__84) (= y64__clif4__17 msub__22__b__86) (= x64__clif3__15 msub__22__c__82) (= msub__22 msub__22__result__77) (= output_reg__24__result__95 ((_ extract 7 0) output_reg__24__arg__97)) (= result__clif6__23 output_reg__24__arg__97) (= output_reg__24 output_reg__24__result__95) (= x64__clif3__15 put_in_reg_zext64__14) (= y64__clif4__17 put_nonzero_in_reg_zext64__16) (= div__clif5__20 a64_udiv__19) (= result__clif6__23 msub__22)) (and (= ((_ extract 7 0) lower__13) ((_ extract 7 0) output_reg__24)) (not (= put_nonzero_in_reg_zext64__16__result__55 (_ bv0 64)))))))
(check-sat)

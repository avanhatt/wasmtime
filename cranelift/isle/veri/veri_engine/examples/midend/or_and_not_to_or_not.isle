(type Type (primitive Type))
(type Value (primitive Value))

;;@ (spec (sig (args x) (ret))
;;@       (assertions (= (x) (ret))))
(decl simplify (Value) Value)

;;@ (spec (sig (args ty, x, y) (ret))
;;@       (assertions (= (| (x) (y)) (ret))))
(decl bor (Type Value Value) Value)
(extern extractor bor bor)
(extern constructor bor bor)

;;@ (spec (sig (args ty, x) (ret))
;;@       (assertions (= (~ (x)) (ret))))
(decl bnot (Type Value) Value)
(extern extractor bnot bnot)
(extern constructor bnot bnot)

;;@ (spec (sig (args ty, x, y) (ret))
;;@       (assertions (= (& (x) (y)) (ret))))
(decl band (Type Value Value) Value)
(extern extractor band band)
(extern constructor band band)

;; `or(and(x, y), not(y)) == or(x, not(y))`
(rule (simplify (bor ty
                    (band ty x y)
                    z @ (bnot ty y)))
    (bor ty x z))
;;@ (spec (sig (args arg) (ret))
;;@     (assume  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst (enum))

(type ALUOp
  (enum
    (SDiv)
))

;; Model ImmExtend as an Int, where
;; Sign == 1 and Zero == 0
(type ImmExtend
  (enum
    (Zero)
    ;;(Sign)
))

;;@ (spec (sig (args) (ret))
;;@     (assume  (= (1i0: isleType) (ret))))
(decl ImmExtend.Sign () ImmExtend)
(extern constructor ImmExtend.Sign ImmExtend.Sign)

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;;@ (spec (sig (args ty, x, y) (ret))
;;@       (assume  (= (sdiv (x) (y)) (ret)),
;;@                   (= (ty) (64i0: isleType))
;;@ ))
(decl a64_sdiv (Type Reg Reg) Reg)
(rule (a64_sdiv ty x y) (alu_rrr (ALUOp.SDiv) ty x y))

;;@ (spec (sig (args ty, ext, x) (ret))
;;@       (assume  (|| (= (ext) (0i0:isleType)) (= (ext) (1i0:isleType))),
;;@                   (if (= (ext) (0i0:isleType)) 
;;@                       (= (ret) (zero_ext (regwidth) (conv_to (ty) (x))))
;;@                       (= (ret) (sign_ext (regwidth) (conv_to (ty) (x))))
;;@                   )
;;@ ))
(decl imm (Type ImmExtend u64) Reg)
(extern constructor imm imm)

;; Place a `Value` into a register, sign extending it to 64-bits
;;@ (spec (sig (args x) (ret))
;;@       (assume  (= (sign_ext (64) (x)) (ret))))
(decl put_in_reg_sext64 (Value) Reg)
(extern constructor put_in_reg_sext64 put_in_reg_sext64)
;; (rule 1 (put_in_reg_sext64 val @ (value_type (fits_in_32 ty)))
;;       (extend val $true (ty_bits ty) 64))

;; Helper for placing a `Value` into a `Reg` and validating that it's nonzero.
;;@ (spec (sig (args x) (ret))
;;@       (assume  (= (sign_ext (64) (x)) (ret)),
;;@                   (! (= (0i64:bv) (ret)))))
(decl put_nonzero_in_reg_sext64 (Value) Reg)
(extern constructor put_nonzero_in_reg_sext64 put_nonzero_in_reg_sext64)
;; (rule -1 (put_nonzero_in_reg_sext64 val)
;;       (trap_if_zero_divisor (put_in_reg_sext64 val)))

;; Helper for extracting an immediate that's not 0 and not -1 from an imm64.
;;@ (spec (sig (args x) (ret))
;;@       (assume  (= (x) (ret)),
;;@                   (! (= (0i64:bv) (ret))),
;;@                   (! (= (18446744073709551615i64:bv) (ret)))
;;@ ))
(decl safe_divisor_from_imm64 (u64) Imm64)
(extern extractor safe_divisor_from_imm64 safe_divisor_from_imm64)

;; Note that this has a special case where if the `Value` is a constant that's
;; not zero we can skip the zero check.
;;(rule (put_nonzero_in_reg_sext64 (and (value_type ty)
;;                                      (iconst (nonzero_u64_from_imm64 n))))
;;      (imm ty (ImmExtend.Sign) n))

;; Special case for `sdiv` where no checks are needed due to division by a
;; constant meaning the checks are always passed.
(rule 1 (lower (has_type (fits_in_64 ty) (sdiv x (iconst (safe_divisor_from_imm64 y)))))
      (a64_sdiv $I64 (put_in_reg_sext64 x) (imm ty (ImmExtend.Sign) y)))
;; This file defined iadd with two rules, using the actual intermediate iadd
;; term plus a dummy `ll_add` (low level add) term to avoid needed let support 
;; for now

;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) ValueRegs)

;; Instruction formats.
(type MInst
  (enum
    ;; A no-op of zero size.
    (Nop0)

    ;; A no-op that is one instruction large.
    (Nop4)

    ;; An ALU operation with two register sources and a register destination.
    (AluRRR
      (alu_op ALUOp)
      (size OperandSize)
      (rd WritableReg)
      (rn Reg)
      (rm Reg))
))

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Add)
    (Sub)
    (Orr)
    (OrrNot)
    (And)))

(type OperandSize extern
      (enum Size32
            Size64))

;; Helper for calculating the `OperandSize` corresponding to a type
(decl operand_size (Type) OperandSize)
(rule (operand_size (fits_in_32 _ty)) (OperandSize.Size32))
(rule (operand_size (fits_in_64 _ty)) (OperandSize.Size64))

(rule (lower (has_type (fits_in_64 ty) (iadd x y)))
      (add ty x y))

(decl add (Type Reg Reg) Reg)
(rule (add ty x y) (ll_add x y))

;;@ (spec (sig (args a, b) (r))
;;@     (assertions (= (+ (a) (b)) (r))))
(decl ll_add (Reg Reg) Reg)
(extern constructor ll_add ll_add)
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
    (AluRRR
      (alu_op ALUOp)
)))

(type Imm12 (primitive Imm12))

(type ALUOp
  (enum
    (Add)
))

;;@ (spec (sig (args ty, a, b) (r))
;;@     (assertions (= (+ (a) (sign_ext (regwidth) (b))) (r))))
(decl add_imm (Type Reg Imm12) Reg)
(rule (add_imm ty x y) (alu_rr_imm12 (ALUOp.Add) ty x y))

(decl alu_rr_imm12 (ALUOp Type Reg Imm12) Reg)
(extern constructor alu_rr_imm12 alu_rr_imm12)

;;@ (spec (sig (args x) (ret))
;;@     (assertions (<= (12i0:isleType) (widthof (ret))),
;;@                 (= (ret) (sign_ext (widthof (ret)) (x)))
;;@ ))
(decl imm12_from_value (Imm12) Value)
(extern extractor imm12_from_value imm12_from_value)

(rule (lower (has_type (fits_in_64 ty) (iadd (imm12_from_value x) y)))
      (add_imm ty y x))


;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
    (AluRRR
      (alu_op ALUOp)
)))

(type Imm12 (primitive Imm12))

(type ALUOp
  (enum
    (Sub)
))

;;@ (spec (sig (args ty, reg, imm_arg) (ret))
;;@     (assertions (= (- (reg) (sign_ext (regwidth) (imm_arg))) (ret))))
(decl sub_imm (Type Reg Imm12) Reg)
(rule (sub_imm ty x y) (alu_rr_imm12 (ALUOp.Sub) ty x y))

(decl alu_rr_imm12 (ALUOp Type Reg Imm12) Reg)
(extern constructor alu_rr_imm12 alu_rr_imm12)

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;;@ (spec (sig (args x) (ret))
;;@     (assertions (<= (12i0:isleType) (widthof (ret))),
;;@                 (= (ret) (sign_ext (widthof (ret)) (x)))
;;@ ))
(decl imm12_from_negated_value (Imm12) Value)
(extractor
  (imm12_from_negated_value n)
  (iconst (u64_from_imm64 (imm12_from_negated_u64 n))))

;;;@ (spec (sig (args x) (ret))
;;;@     (assertions (= (sign_ext (64) (x)) (ret))))
(decl imm12_from_negated_u64 (Imm12) u64)
(extern extractor imm12_from_negated_u64 imm12_from_negated_u64)

(rule (lower (has_type (fits_in_64 ty) (iadd x (imm12_from_negated_value y))))
      (sub_imm ty x y))
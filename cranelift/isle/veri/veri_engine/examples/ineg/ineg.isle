;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (ret) (zero_ext (regwidth) (arg)))))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
))

(type ALUOp
  (enum
    (Sub)
))

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;;@ (spec (sig (args ty, a, b) (r))
;;@     (assertions 
;;@       (= (r) 
;;@          (if (<= (ty) (32i8: isleType)) 
;;@              (zero_ext (regwidth) (- (extract 31 0 (a)) (extract 31 0 (b))))
;;@              (- (a) (b))))))
(decl sub (Type Reg Reg) Reg)
(rule (sub ty x y) (alu_rrr (ALUOp.Sub) ty x y))

;;@ (spec (sig (args) (r))
;;@     (assertions (= (zero_ext (regwidth) (0i1:bv)) (r))))
(decl zero_reg () Reg)
(extern constructor zero_reg zero_reg)

(rule (lower (has_type (fits_in_64 ty) (ineg x)))
      (sub ty (zero_reg) (put_in_reg x)))
;;@ (spec (sig (args arg) (ret))
;;@     (assume  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
))

;; We will represent this with a msb shift bit
;; and a 12 bit value
(type Imm12 (primitive Imm12))

(type ALUOp
  (enum
    (Add)
))

;; Note that 4094 = 0xffe and 16773119 = 0xffefff
;;@ (spec (sig (args ty, x, y) (ret))
;;@     (assume  (|| (<= (bv2int (y)) (4094i0:isleType))
;;@                     (&& (<= (bv2int (y)) (16773119i0:isleType))
;;@                         (= (extract 2 0 (y)) (0i3:bv))
;;@                 )),
;;@                 (= (ret) (- (x) (zero_ext (regwidth) (y))))
;;@ ))
(decl add_imm (Type Reg Imm12) Reg)
(rule (add_imm ty x y) (alu_rr_imm12 (ALUOp.Add) ty x y))

(decl alu_rr_imm12 (ALUOp Type Reg Imm12) Reg)
(extern constructor alu_rr_imm12 alu_rr_imm12)

;; Note that 4095 = 0xfff and 16773120 = 0xfff000
;;@ (spec (sig (args arg) (ret))
;;@     (assume  (|| (< (zero_ext (regwidth) (ret)) (4095i64:bv))
;;@                     (&& (< (zero_ext (regwidth) (ret)) (16773120i64:bv))
;;@                         (= (extract 2 0 (zero_ext (regwidth) (ret))) (0i3:bv))
;;@                 )),
;;@                 (= (ret) (conv_to (widthof (ret)) (zero_ext (regwidth) (arg)))),
;;@                 (= (arg) (conv_to (widthof (arg)) (zero_ext (regwidth) (ret))))
;;@ ))
(decl imm12_from_value (Imm12) Value)
(extern extractor imm12_from_value imm12_from_value)

(rule (lower (has_type (fits_in_64 ty) (iadd x (imm12_from_value y))))
      (add_imm ty x y))
;;@ (spec (sig (args arg) (ret))
;;@     (provide  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
       (AluRRRShift
           (shiftop ShiftOpAndAmt))
))

;; ASSUMING 64 BIT MODE!!!
;; annotations will interpret this as an 10 bit field
;; the two msb encode the type of shift as follows:
;;   00: lsl
;;   01: lsr
;;   10: asr
;;   11: invalid
;; the rest will encode a 8-bit shift amount 
(type ShiftOpAndAmt (primitive ShiftOpAndAmt))

(type ALUOp
  (enum
    (Add)
))

(decl alu_rrr_shift (ALUOp Type Reg Reg ShiftOpAndAmt) Reg)
(extern constructor alu_rrr_shift alu_rrr_shift)

;;@ (spec (sig (args ty, a, b, shift) (ret))
;;@   (provide  
;;@     (= (ret) (if (<= (ty) (32i32:Int))
;;@       (conv_to (regwidth) (+ (extract 31 0 (a)) (switch (extract 9 8 (shift))
;;@         ((0i2:bv) (shl (extract 31 0 (b)) (zero_ext (32) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@         ((1i2:bv) (shr (extract 31 0 (b)) (zero_ext (32) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@         ((2i2:bv) (ashr (extract 31 0 (b)) (zero_ext (32) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@       )))
;;@       (+ (a) (switch (extract 9 8 (shift))
;;@         ((0i2:bv) (shl (b) (zero_ext (64) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@         ((1i2:bv) (shr (b) (zero_ext (64) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@         ((2i2:bv) (ashr (b) (zero_ext (64) (& (- (int2bv 8 (ty)) (1i8:bv8)) (extract 7 0 (shift))))))
;;@       )))),
;;@ ))
(decl add_shift (Type Reg Reg ShiftOpAndAmt) Reg)
(rule (add_shift ty x y z) (alu_rrr_shift (ALUOp.Add) ty x y z))

;;@ (spec (sig (args ty, a) (ret))
;;@     (provide  (= (extract 63 8 (a)) (0i56:bv)),
;;@                 (= (ret) (& (256i10:bv) (zero_ext (10) (extract 7 0 (a)))))))
(decl pure lshr_from_u64 (Type Imm64) ShiftOpAndAmt)
(extern constructor lshr_from_u64 lshr_from_u64)

;; BROKEN: using lshr_from_u64 instead of lshr_from_u64
(rule 6 (lower (has_type (fits_in_64 ty)
                       (iadd (ishl x (iconst k)) y)))
      (if-let amt (lshr_from_u64 ty k))
      (add_shift ty y x amt))
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
    ;; An ALU operation with two register sources and a register destination.
    (AluRRR
      (alu_op ALUOp)
      (size OperandSize)
)))

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Sub)
))

(type ALUOp3
  (enum
    ;; Multiply-sub
    (MSub)
))

(type OperandSize extern
      (enum Size32
            Size64))

;; Helper for calculating the `OperandSize` corresponding to a type
(decl operand_size (Type) OperandSize)
(rule (operand_size (fits_in_32 _ty)) (OperandSize.Size32))
(rule (operand_size (fits_in_64 _ty)) (OperandSize.Size64))

;;@ (spec (sig (args ty, a, b, c) (r))
;;@     (assertions (= (- (c) (* (a) (b))) (r))))
(decl msub (Type Reg Reg Reg) Reg)
(rule (msub ty x y z) (alu_rrrr (ALUOp3.MSub) ty x y z))

(decl alu_rrrr (ALUOp3 Type Reg Reg Reg) Reg)
(extern constructor alu_rrrr alu_rrrr)

(rule (lower (has_type (fits_in_64 ty) (isub (imul y z) x)))
      (msub ty y z x))
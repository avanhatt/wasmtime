
;;@ (spec (sig (args arg) (ret))
;;@     (provide (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

;;@ (spec (sig (args ty, a, b) (r))
;;@     (provide (= (- (a) (b)) (r))))
(decl sub (Type Reg Reg) Reg)
(extern constructor sub sub)

;;@ (spec (sig (args) (r))
;;@     (provide (= (zero_ext (regwidth) (0i1:bv)) (r))))
(decl zero_reg () Reg)
(extern constructor zero_reg zero_reg)

;;@ (spec (sig (args ty, x, y) (ret))
;;@     (provide (= (ret) 
;;@                    (if (= (ty) (32i0:Int))
;;@                        (zero_ext (regwidth) (rotr (extract 31 0 (x)) (extract 31 0 (y))))
;;@                        (rotr (x) (y))
;;@                    )
;;@                 ),
;;@                 (|| (= (ty) (32i0:Int)) (= (ty) (64i0:Int)))
;;@     )
;;@ )
(decl a64_rotr (Type Reg Reg) Reg)
(extern constructor a64_rotr a64_rotr)

;; BROKEN: order of arguments to sub flipped
;; General 32-bit case.
(rule (lower (has_type $I32 (rotl x y)))
      (let ((amt Reg (value_regs_get y 0))
            (neg_shift Reg (sub $I32 amt (zero_reg))))
        (a64_rotr $I32 x neg_shift)))
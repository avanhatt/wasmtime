;;@ (spec (sig (args arg) (ret))
;;@     (provide  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst (enum))

(type ALUOp
  (enum
    (UDiv)
))

;; Model ImmExtend as an Int, where
;; Sign == 1 and Zero == 0
(type ImmExtend
  (enum
    (Zero)
    (Sign)
))

;;@ (spec (sig (args) (ret))
;;@     (provide  (= (1i1:bv1) (ret))))
;;decl ImmExtend.Sign 

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;;@ (spec (sig (args ty, x, y) (ret))
;;@       (provide  (= (/ (x) (y)) (ret)),
;;@                   (= (ty) (64i0: Int))
;;@ ))
(decl a64_udiv (Type Reg Reg) Reg)
(rule (a64_udiv ty x y) (alu_rrr (ALUOp.UDiv) ty x y))

;;@ (spec (sig (args ty, ext, x) (ret))
;;@       (provide  (|| (= (ext) (0i1:bv1)) (= (ext) (1i1:bv1))),
;;@                   (if (= (ext) (0i1:bv1)) 
;;@                       (= (ret) (zero_ext (regwidth) (conv_to (ty) (x))))
;;@                       (= (ret) (sign_ext (regwidth) (conv_to (ty) (x))))
;;@                    )
;;@ ))
(decl imm (Type ImmExtend u64) Reg)
(extern constructor imm imm)

;; Place a `Value` into a register, sign extending it to 64-bits
;;@ (spec (sig (args x) (ret))
;;@       (provide  (= (sign_ext (64) (x)) (ret))))
(decl put_in_reg_sext64 (Value) Reg)
(extern constructor put_in_reg_sext64 put_in_reg_sext64)

;; Helper for placing a `Value` into a `Reg` and validating that it's nonzero.
;;@ (spec (sig (args x) (ret))
;;@       (provide  (= (sign_ext (64) (x)) (ret)),
;;@                   (! (= (0i64:bv) (ret)))))
(decl put_nonzero_in_reg_sext64 (Value) Reg)
(extern constructor put_nonzero_in_reg_sext64 put_nonzero_in_reg_sext64)

;; Helper for extracting an immediate that's not 0 and not -1 from an imm64.
;;@ (spec (sig (args x) (ret))
;;@       (provide  (= (x) (ret)),
;;@ ))
(decl safe_divisor_from_imm64 (u64) Imm64)
(extern extractor safe_divisor_from_imm64 safe_divisor_from_imm64)

;; Special case for `sdiv` where no checks are needed due to division by a
;; constant meaning the checks are always passed.
(rule 1 (lower (has_type (fits_in_64 ty) (sdiv x (iconst (safe_divisor_from_imm64 y)))))
      (a64_udiv $I64 (put_in_reg_sext64 x) (imm ty (ImmExtend.Sign) y)))
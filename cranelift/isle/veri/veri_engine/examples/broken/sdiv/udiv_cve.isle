;;@ (spec (sig (args arg) (ret))
;;@     (provide (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst (enum))

(type ALUOp
  (enum
    (SDiv)
))

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;; Helper for generating `udiv` instructions.
;;@ (spec (sig (args ty, a, b) (r))
;;@   (provide 
;;@     (= (r) 
;;@        (if (<= (ty) (32i8: Int)) 
;;@            (conv_to (regwidth) (/ (extract 31 0 (a)) (extract 31 0 (b))))
;;@            (/ (a) (b))))))
(decl a64_udiv (Type Reg Reg) Reg)
(extern constructor a64_udiv a64_udiv)

;;@ (spec (sig (args ty, x) (ret))
;;@       (provide (= (ret) (sign_ext (regwidth) (conv_to (ty) (x))))  
;;@ ))
(decl imm (Type u64) Reg)
(extern constructor imm imm)

;;@ (spec (sig (args x) (ret))
;;@       (provide (= (zero_ext (64) (x)) (ret))))
(decl put_in_reg_zext64 (Value) Reg)
(extern constructor put_in_reg_zext64 put_in_reg_zext64)

;; Helper for placing a `Value` into a `Reg` and validating that it's nonzero.
;;@ (spec (sig (args x) (ret))
;;@       (provide (= (sign_ext (64) (x)) (ret)),
;;@                (! (= (0i64:bv) (ret)))))
(decl put_nonzero_in_reg_zext64 (Value) Reg)
(extern constructor put_nonzero_in_reg_zext64 put_nonzero_in_reg_zext64)

(rule udiv (lower (has_type (fits_in_64 ty) (udiv x y)))
      (a64_udiv $I64 (put_in_reg_zext64 x) (put_nonzero_in_reg_zext64 y)))
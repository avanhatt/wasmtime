;;@ (spec (sig (args arg) (ret))
;;@     (assume  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

(type MInst (enum))

(type ALUOp
  (enum
    (UDiv)
))

(decl alu_rrr (ALUOp Type Reg Reg) Reg)
(extern constructor alu_rrr alu_rrr)

;;@ (spec (sig (args ty, x, y) (ret))
;;@       (assume  (= (/ (x) (y)) (ret)),
;;@                   (= (ty) (64i0: int))
;;@ ))
(decl a64_udiv (Type Reg Reg) Reg)
(rule (a64_udiv ty x y) (alu_rrr (ALUOp.UDiv) ty x y))

;;@ (spec (sig (args x) (ret))
;;@       (assume  (= (zero_ext (64) (x)) (ret)),
;;@                   (! (= (0i64:bv) (ret)))))
(decl put_nonzero_in_reg_zext64 (Value) Reg)
(extern constructor put_nonzero_in_reg_zext64 put_nonzero_in_reg_zext64)

;;@ (spec (sig (args x) (ret))
;;@       (assume  (= (sign_ext (64) (x)) (ret))))
(decl put_in_reg_sext64 (Value) Reg)
(extern constructor put_in_reg_sext64 put_in_reg_sext64)

;; Note that aarch64's `udiv` doesn't trap so to respect the semantics of
;; CLIF's `udiv` the check for zero needs to be manually performed.
(rule (lower (has_type (fits_in_64 ty) (udiv x y)))
      (a64_udiv $I64 (put_in_reg_sext64 x) (put_nonzero_in_reg_zext64 y)))
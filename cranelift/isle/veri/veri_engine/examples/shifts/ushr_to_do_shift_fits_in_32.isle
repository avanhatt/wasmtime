;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (0i64:bv) (ret))))
;;decl ALUOp.Lsl

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (1i64:bv) (ret))))
;;decl ALUOp.Lsr

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (2i64:bv) (ret))))
;;decl ALUOp.Asr

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Add)
    (Sub)
    (Orr)
    (OrrNot)
    (And)
    (AndS)
    (AndNot)
    ;; XOR (AArch64 calls this "EOR")
    (Eor)
    ;; XNOR (AArch64 calls this "EOR-NOT")
    (EorNot)
    ;; Add, setting flags
    (AddS)
    ;; Sub, setting flags
    (SubS)
    ;; Signed multiply, high-word result
    (SMulH)
    ;; Unsigned multiply, high-word result
    (UMulH)
    (SDiv)
    (UDiv)
    (RotR)
    (Lsr)
    (Asr)
    (Lsl)
    ;; Add with carry
    (Adc)
    ;; Add with carry, settings flags
    (AdcS)
    ;; Subtract with carry
    (Sbc)
    ;; Subtract with carry, settings flags
    (SbcS)
))

;;@ (spec (sig (args op, t, a, b) (ret))
;;@   (assertions 
;;@     (= (ret) 
;;@          (switch (op) 
;;@            ((0i64:bv) (conv_to (regwidth) 
;;@                         (shl (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv64))) (b)))))))
;;@                  ((1i64:bv) (conv_to (regwidth) 
;;@                         (shr (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv))) (b)))))))
;;@                  ((2i64:bv) (conv_to (regwidth) 
;;@                         (ashr (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv))) (b)))))))
;;@           )),
;;@           (|| (= (op) (0i64:bv)) (|| (= (op) (1i64:bv)) (= (op) (2i64:bv)))),
;;@           (= (t) (widthof (b))),
;;@           (|| (= (t) (8i8: isleType))
;;@           (|| (= (t) (16i8: isleType))
;;@           (|| (= (t) (32i8: isleType))
;;@           (= (t) (64i8: isleType))))),
;;@           (switch (op) 
;;@                  ((0i64:bv) (true))
;;@                  ((1i64:bv) (if (< (t) (32i32: isleType)) 
;;@                                 (= (extract 31 0 (a)) (zero_ext (32) (extract 31 0 (conv_to (t) (a))))) 
;;@                                 (true)))
;;@                  ((2i64:bv) (if (< (t) (32i32: isleType))
;;@                                 (= (extract 31 0 (a)) (sign_ext (32) (extract 31 0 (conv_to (t) (a))))) 
;;@                                 (true)))
;;@           ),
;;@     ))
(decl do_shift (ALUOp Type Reg Value) Reg)
(extern constructor do_shift do_shift)

;; Place a `Value` into a register, zero extending it to 32-bits
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (
;;@          if (<= (32i0:isleType) (widthof (arg))) 
;;@             (= (ret) (conv_to (regwidth) (arg)))             
;;@             (= (ret) (conv_to (regwidth) (zero_ext (32) (arg))))
;;@          )
;;@ ))
(decl put_in_reg_zext32 (Value) Reg)
(extern constructor put_in_reg_zext32 put_in_reg_zext32)

;; Shift for i8/i16/i32.
(rule -1 (lower (has_type (fits_in_32 ty) (ushr x y)))
      (do_shift (ALUOp.Lsr) ty (put_in_reg_zext32 x) y))
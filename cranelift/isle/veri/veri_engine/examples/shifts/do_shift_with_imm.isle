(type ImmShift (primitive ImmShift))

;; Instruction formats.
(type MInst
  (enum
))

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (0i64:bv) (ret))))
;;decl ALUOp.Lsl

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (1i64:bv) (ret))))
;;decl ALUOp.Lsr

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (2i64:bv) (ret))))
;;decl ALUOp.Asr

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Add)
    (Sub)
    (Orr)
    (OrrNot)
    (And)
    (AndS)
    (AndNot)
    ;; XOR (AArch64 calls this "EOR")
    (Eor)
    ;; XNOR (AArch64 calls this "EOR-NOT")
    (EorNot)
    ;; Add, setting flags
    (AddS)
    ;; Sub, setting flags
    (SubS)
    ;; Signed multiply, high-word result
    (SMulH)
    ;; Unsigned multiply, high-word result
    (UMulH)
    (SDiv)
    (UDiv)
    (RotR)
    (Lsr)
    (Asr)
    (Lsl)
    ;; Add with carry
    (Adc)
    ;; Add with carry, settings flags
    (AdcS)
    ;; Subtract with carry
    (Sbc)
    ;; Subtract with carry, settings flags
    (SbcS)
))

;; Add an assertion that the value fits, using the constand with 56 1's then 6 0's (~63)
;;@ (spec (sig (args ty, x) (r))
;;@   (assertions 
;;@     (= (r) (extract 5 0 (& (x) (- (int2bv 64 (ty)) (1i64:bv64))))),
;;@     (ult (& (x) (- (int2bv 64 (ty)) (1i64:bv64))) (64i64:bv64))
;;@   )
;;@ )
(decl pure imm_shift_from_imm64 (Type Imm64) ImmShift)
(extern constructor imm_shift_from_imm64 imm_shift_from_imm64)

;;@ (spec (sig (args op, t, a, b) (ret))
;;@   (assertions 
;;@     (= (ret) 
;;@          (switch (op) 
;;@            ((0i64:bv) (conv_to (regwidth) 
;;@                         (shl (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv64))) (b)))))))
;;@                  ((1i64:bv) (conv_to (regwidth) 
;;@                         (shr (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv))) (b)))))))
;;@                  ((2i64:bv) (conv_to (regwidth) 
;;@                         (ashr (conv_to (t) (a)) 
;;@                           (conv_to (t) (zero_ext (regwidth) 
;;@                             (& (conv_to (widthof (b)) (- (int2bv 64 (widthof (b))) (1i64:bv))) (b)))))))
;;@           )),
;;@           (|| (= (op) (0i64:bv)) (|| (= (op) (1i64:bv)) (= (op) (2i64:bv)))),
;;@           (= (t) (widthof (b))),
;;@           (|| (= (t) (8i8: isleType))
;;@           (|| (= (t) (16i8: isleType))
;;@           (|| (= (t) (32i8: isleType))
;;@           (= (t) (64i8: isleType))))),
;;@           (switch (op) 
;;@                  ((0i64:bv) (true))
;;@                  ((1i64:bv) (switch (t) 
;;@                               ((8i32: isleType) (= (extract 31 0 (a)) (zero_ext (32) (extract 7 0 (a)))))
;;@                               ((16i32: isleType) (= (extract 31 0 (a)) (zero_ext (32) (extract 7 0 (a)))))
;;@                               ((32i32: isleType) (true))
;;@                               ((64i32: isleType) (true))))
;;@                  ((2i64:bv) (switch (t) 
;;@                               ((8i32: isleType) (= (extract 31 0 (a)) (sign_ext (32) (extract 7 0 (a)))))
;;@                               ((16i32: isleType) (= (extract 31 0 (a)) (sign_ext (32) (extract 7 0 (a)))))
;;@                               ((32i32: isleType) (true))
;;@                               ((64i32: isleType) (true))))
;;@           ),
;;@     ))
(decl do_shift (ALUOp Type Reg Value) Reg)
(extern extractor do_shift do_shift)

;; types get bucketed for <= 32, <= 64
;; (if (<= (t) (32i8: isleType)) (32i8: isleType) (64i8: isleType))

;;@ (spec (sig (args op, t, a, b) (ret))
;;@     (assertions 
;;@       (= (ret) (switch (op)
;;@               ((0i64:bv)
;;@                 (if (<= (t) (32i8: isleType)) 
;;@                     (conv_to (64) (shl (extract 31 0 (a)) (& (- (int2bv 32 (32i32:isleType)) (1i32:bv)) (extract 31 0 (zero_ext (regwidth) (b))))))
;;@                     (shl (a) (& (- (int2bv 64 (64i64:isleType)) (1i64:bv)) (zero_ext (regwidth) (b)))))
;;@               )
;;@               ((1i64:bv)
;;@                 (if (<= (t) (32i8: isleType)) 
;;@                     (conv_to (64) (shr (extract 31 0 (a)) (& (- (int2bv 32 (32i32:isleType)) (1i32:bv)) (extract 31 0 (zero_ext (regwidth) (b))))))
;;@                     (shr (a) (& (- (int2bv 64 (64i64:isleType)) (1i64:bv)) (zero_ext (regwidth) (b)))))
;;@               )
;;@               ((2i64:bv) 
;;@                 (if (<= (t) (32i8: isleType)) 
;;@                     (conv_to (64) (ashr (extract 31 0 (a)) (& (- (int2bv 32 (32i32:isleType)) (1i32:bv)) (extract 31 0 (zero_ext (regwidth) (b))))))
;;@                     (ashr (a) (& (- (int2bv 64 (64i64:isleType)) (1i64:bv)) (zero_ext (regwidth) (b)))))
;;@               )
;;@       )),
;;@       (|| (= (op) (0i64:bv)) (|| (= (op) (1i64:bv)) (= (op) (2i64:bv)))),
;;@       (|| (= (t) (8i8: isleType))
;;@       (|| (= (t) (16i8: isleType))
;;@       (|| (= (t) (32i8: isleType))
;;@           (= (t) (64i8: isleType)))))
;;@     ))
(decl alu_rr_imm_shift (ALUOp Type Reg ImmShift) Reg)
(extern constructor alu_rr_imm_shift alu_rr_imm_shift)

(rule 1 (do_shift op ty x (iconst k))
      (if-let shift (imm_shift_from_imm64 ty k))
      (alu_rr_imm_shift op ty x shift))
Checking assumption feasibility
Assertion list is feasible for two distinct inputs!
LHS and RHS equality condition:
        (= ((_ extract 63 0) amode_add__50) ((_ extract 63 0) Amode.ImmRegRegShift__55))

Running query
Verification failed
Quantified variables:
Amode.ImmRegRegShift__55
0x8000000012abad38|0b1000000000000000000000000000000000010010101010111010110100111000

Amode.ImmRegRegShift__55__base__131
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

Amode.ImmRegRegShift__55__flags__145
0b0

Amode.ImmRegRegShift__55__index__139
0x0000000080849440|0b10000000100001001001010001000000

Amode.ImmRegRegShift__55__ret__135
0x8000000012abad38|0b1000000000000000000000000000000000010010101010111010110100111000

Amode.ImmRegRegShift__55__shift__140
0x02|0b10

Amode.ImmRegRegShift__55__simm__127
0x00812423|0b100000010010010000100011

Amode.ImmReg__37
0x7ffffffe10995c38|0b111111111111111111111111111111000010000100110010101110000111000

Amode.ImmReg__37__base__63
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

Amode.ImmReg__37__flags__72
0b0

Amode.ImmReg__37__ret__67
0x7ffffffe10995c38|0b111111111111111111111111111111000010000100110010101110000111000

Amode.ImmReg__37__simm__59
0x00812423|0b100000010010010000100011

ExtendKind.Zero__53
0x0000000000000000|0b0

ExtendKind.Zero__53__ret__115
0x0000000000000000|0b0

amode_add__50
0x7ffffffe12abad38|0b111111111111111111111111111111000010010101010111010110100111000

amode_add__50__ret__109
0x7ffffffe12abad38|0b111111111111111111111111111111000010010101010111010110100111000

amode_add__50__x__105
0x7ffffffe10995c38|0b111111111111111111111111111111000010000100110010101110000111000

amode_add__50__y__106
0x02125100|0b10000100100101000100000000

base__clif1__30
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

def_inst__45
0x00000002|0b10

def_inst__45__arg__85
0x00000002|0b10

def_inst__45__ret__86
0x00000002|0b10

def_inst__47
0x02125100|0b10000100100101000100000000

def_inst__47__arg__96
0x02125100|0b10000100100101000100000000

def_inst__47__ret__97
0x02125100|0b10000100100101000100000000

def_inst__49
0x02125100|0b10000100100101000100000000

def_inst__49__arg__102
0x02125100|0b10000100100101000100000000

def_inst__49__ret__103
0x02125100|0b10000100100101000100000000

extend_to_gpr__54
0x0000000080849440|0b10000000100001001001010001000000

extend_to_gpr__54__ext__118
0x0000000000000000|0b0

extend_to_gpr__54__ret__117
0x0000000080849440|0b10000000100001001001010001000000

extend_to_gpr__54__ty__121
64

extend_to_gpr__54__v__122
0x80849440|0b10000000100001001001010001000000

flags__clif2__34
0b0

fresh0
0b0

fresh1
0x00812423|0b100000010010010000100011

fresh2
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

fresh3
0b0

fresh4
0x80849440|0b10000000100001001001010001000000

fresh5
0x02|0b10

gpr_new__51
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

gpr_new__51__arg__111
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

gpr_new__51__ret__112
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

iconst__44
0x00000002|0b10

iconst__44__arg__80
0x0000000000000002|0b10

iconst__44__ret__82
0x00000002|0b10

index__clif3__38
0x80849440|0b10000000100001001001010001000000

ishl__46
0x02125100|0b10000100100101000100000000

ishl__46__a__90
0x80849440|0b10000000100001001001010001000000

ishl__46__b__88
0x00000002|0b10

ishl__46__ret__93
0x02125100|0b10000100100101000100000000

off__clif0__27
0x00812423|0b100000010010010000100011

shift__clif4__2
0x02|0b10

u32_lteq__5
0b0

u32_lteq__5__a__17
0x00000002|0b10

u32_lteq__5__b__18
0x00000003|0b11

u32_lteq__5__ret__20
0b0

u8_as_u32__3
0x00000002|0b10

u8_as_u32__3__arg__8
0x02|0b10

u8_as_u32__3__ret__6
0x00000002|0b10

uextend__48
0x02125100|0b10000100100101000100000000

uextend__48__arg__100
0x02125100|0b10000100100101000100000000

uextend__48__ret__99
0x02125100|0b10000100100101000100000000

uimm8__43
0x0000000000000002|0b10

uimm8__43__arg__77
0x02|0b10

uimm8__43__ret__74
0x0000000000000002|0b10

valid_reg__33
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

valid_reg__33__arg__56
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

valid_reg__33__ret__57
0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101

Counterexample summary
(amode_add (Amode.ImmReg [off|0x00812423|0b100000010010010000100011] (valid_reg [base|0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101]) [flags|0b0]) (def_inst (uextend (def_inst (ishl [index|0x80849440|0b10000000100001001001010001000000] (def_inst (iconst (uimm8 [shift|0x02|0b10]))))))))
=>
(Amode.ImmRegRegShift [off|0x00812423|0b100000010010010000100011] (gpr_new [base|0x7ffffffe10183815|0b111111111111111111111111111111000010000000110000011100000010101]) (extend_to_gpr [index|0x80849440|0b10000000100001001001010001000000] (I64) (ExtendKind.Zero)) [shift|0x02|0b10] [flags|0b0])

0x7ffffffe12abad38|0b111111111111111111111111111111000010010101010111010110100111000 => 0x8000000012abad38|0b1000000000000000000000000000000000010010101010111010110100111000
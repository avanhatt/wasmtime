(type MInst
  (enum)
)

;; A tuple of `ProducesFlags` and `IntCC`.
(type FlagsAndCC (enum (FlagsAndCC (flags ProducesFlags)
                                   (cc IntCC))))
                                   
(type Cond extern
  (enum
    (Eq)
    (Ne)
    (Hs)
    (Lo)
    (Mi)
    (Pl)
    (Vs)
    (Vc)
    (Hi)
    (Ls)
    (Ge)
    (Lt)
    (Gt)
    (Le)
    (Al)
    (Nv)
))

;; Lower an integer cond code.
;; AVH TODO CHECK
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl cond_code (IntCC) Cond)
(extern constructor cond_code cond_code)

;;@ (spec (sig (args c, x, y, in_ty, out_ty) (ret))
;;@   (assertions 
;;@     (= (ret) 
;;@        (switch (c)
;;@          ((0i8:bv8) (if (= (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((1i8:bv8) (if (! (= (x) (y))) (0i8:bv8) (1i8:bv8)))
;;@          ((2i8:bv8) (if (sgt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((3i8:bv8) (if (sgte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((4i8:bv8) (if (slt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((5i8:bv8) (if (slte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((6i8:bv8) (if (ugt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((7i8:bv8) (if (ugte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((8i8:bv8) (if (ult (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((9i8:bv8) (if (ulte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@        )),
;;@        (|| (= (in_ty) (8i8: isleType))
;;@        (|| (= (in_ty) (16i8: isleType))
;;@        (|| (= (in_ty) (32i8: isleType))
;;@        (= (in_ty) (64i8: isleType))))),
;;@
;;@        (= (in_ty) (widthof (x))),
;;@        (= (in_ty) (widthof (y))),
;;@        (= (out_ty) (8i8: isleType)),
;;@ ))
(decl lower_icmp_into_reg (IntCC Value Value Type Type) ValueRegs)
(extern extractor lower_icmp_into_reg lower_icmp_into_reg)

;;@ (spec (sig (args c, x, y, in_ty) (ret))
;;@   (assertions 
;;@     (= (ret) 
;;@        (switch (c)
;;@          ((0i8:bv8) (if (= (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((1i8:bv8) (if (! (= (x) (y))) (0i8:bv8) (1i8:bv8)))
;;@          ((2i8:bv8) (if (sgt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((3i8:bv8) (if (sgte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((4i8:bv8) (if (slt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((5i8:bv8) (if (slte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((6i8:bv8) (if (ugt (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((7i8:bv8) (if (ugte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((8i8:bv8) (if (ult (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@          ((9i8:bv8) (if (ulte (x) (y)) (0i8:bv8) (1i8:bv8)))
;;@        )),
;;@        (|| (= (in_ty) (8i8: isleType))
;;@        (|| (= (in_ty) (16i8: isleType))
;;@        (|| (= (in_ty) (32i8: isleType))
;;@        (= (in_ty) (64i8: isleType))))),
;;@
;;@        (= (in_ty) (widthof (x))),
;;@        (= (in_ty) (widthof (y))),
;;@ ))
(decl lower_icmp (IntCC Value Value Type) FlagsAndCC)
(extern constructor lower_icmp lower_icmp)

;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl flags_and_cc_to_bool (FlagsAndCC) ValueRegs)
(extern constructor flags_and_cc_to_bool flags_and_cc_to_bool)

;; Integers <= 64-bits.
(rule -2 (lower_icmp_into_reg cond rn rm in_ty out_ty)
      (if (ty_int_ref_scalar_64 in_ty))
      (let ((cc Cond (cond_code cond)))
        (flags_and_cc_to_bool (lower_icmp cond rn rm in_ty))))
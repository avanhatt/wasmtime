
;;@ (spec (sig (args arg) (ret))
;;@     (assume  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

;; Place a `Value` into a register, zero extending it to 32-bits
;;@ (spec (sig (args arg) (ret))
;;@     (assume  (
;;@          if (<= (32i0:isleType) (widthof (arg))) 
;;@             (= (ret) (conv_to (regwidth) (arg)))             
;;@             (= (ret) (conv_to (regwidth) (zero_ext (32) (arg))))
;;@          )
;;@ ))
(decl put_in_reg_zext32 (Value) Reg)
(extern constructor put_in_reg_zext32 put_in_reg_zext32)

;;@ (spec (sig (args t, x, y) (ret))
;;@       (assume  
;;@          (= (ret) 
;;@             (switch (t)
;;@               ((8i8: isleType) (conv_to (regwidth) (rotr (extract 7 0 (x)) (extract 7 0 (y)))))
;;@               ((16i8: isleType) (conv_to (regwidth) (rotr (extract 15 0 (x)) (extract 15 0 (y)))))
;;@             )),
;;@          (|| (= (t) (8i8: isleType)) 
;;@              (= (t) (16i8: isleType))),
;;@          (switch (t)
;;@            ((8i8: isleType) (= (extract 31 8 (x)) (0i32:bv24)))
;;@            ((16i8: isleType) (= (extract 31 16 (x)) (0i32:bv16)))
;;@          ),
;;@       )
;;@ )
(decl small_rotr (Type Reg Reg) Reg)
(extern constructor small_rotr small_rotr)

;; General 8/16-bit case.
(rule -3 (lower (has_type (fits_in_16 ty) (rotr x y)))
      (small_rotr ty (put_in_reg_zext32 x) (value_regs_get y 0)))
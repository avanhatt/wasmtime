;;@ (spec (sig (args arg) (ret))
;;@     (assume  (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

;;@ (spec (sig (args ty, x, y) (ret))
;;@     (assume  (= (ret) 
;;@                    (if (= (ty) (32i0:isleType))
;;@                        (zero_ext (regwidth) (rotr (extract 31 0 (x)) (extract 31 0 (y))))
;;@                        (rotr (x) (y))
;;@                    )
;;@                 ),
;;@                 (|| (= (ty) (32i0:isleType)) (= (ty) (64i0:isleType)))
;;@     )
;;@ )
(decl a64_rotr (Type Reg Reg) Reg)
(extern constructor a64_rotr a64_rotr)

;; General 32-bit case.
(rule -1 (lower (has_type $I32 (rotr x y)))
      (a64_rotr $I32 x (value_regs_get y 0)))
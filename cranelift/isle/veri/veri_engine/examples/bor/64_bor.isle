
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (0i64:bv) (ret))))
;;decl ALUOp.And

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (1i64:bv) (ret))))
;;decl ALUOp.Orr

;;@ (spec (sig (args) (ret))
;;@       (assertions (= (2i64:bv) (ret))))
;;decl ALUOp.Eor

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Add)
    (Sub)
    (Orr)
    (OrrNot)
    (And)
    (AndS)
    (AndNot)
    ;; XOR (AArch64 calls this "EOR")
    (Eor)
    ;; XNOR (AArch64 calls this "EOR-NOT")
    (EorNot)
    ;; Add, setting flags
    (AddS)
    ;; Sub, setting flags
    (SubS)
    ;; Signed multiply, high-word result
    (SMulH)
    ;; Unsigned multiply, high-word result
    (UMulH)
    (SDiv)
    (UDiv)
    (RotR)
    (Lsr)
    (Asr)
    (Lsl)
    ;; Add with carry
    (Adc)
    ;; Add with carry, settings flags
    (AdcS)
    ;; Subtract with carry
    (Sbc)
    ;; Subtract with carry, settings flags
    (SbcS)
))

;;@ (spec (sig (args op, t, a, b) (ret))
;;@     (assertions (= (ret) (if (= (op) (1i64:bv)) {
;;@                     (& (conv_to (t) (a)) (conv_to (t) (b)))
;;@                  } else { 
;;@                      (if (= (op) (0i64:bv)) {
;;@                          (| (conv_to (t) (a)) (conv_to (t) (b)))
;;@                      } else { 
;;@                          (conv_to (t) (0i64:bv))
;;@                      })
;;@                  }))
;;@     ))
(decl alu_rs_imm_logic_commutative (ALUOp Type Value Value) Reg)
(extern constructor alu_rs_imm_logic_commutative alu_rs_imm_logic_commutative)

(rule (lower (has_type $I64 (bor x y)))
      (alu_rs_imm_logic_commutative (ALUOp.Orr) $I64 x y))
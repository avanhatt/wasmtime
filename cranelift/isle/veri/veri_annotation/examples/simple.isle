;; (decl (a) b SMTType) (assert (= a b) (<= a 65)))
;; {((a : Type) b : Type) | a = b, a.ty.width <= 64}
;; (decl fits_in_64 (Type) Type)
;;@ (spec (sig (args arg) (ret))
;;@ (assertions (= (arg) (ret)), (<= (arg) (64i128: isleType))))
(decl fits_in_64 (Type) Type)
(extern extractor fits_in_64 fits_in_64)

(decl fits_in_32 (Type) Type)
(extern extractor fits_in_32 fits_in_32)

;; (decl (a b) c bvX) (assert (= c (+ a b)))
;;@ (spec (sig (args a, b) (r))
;;@     (assertions (= (+ (a) (b)) (r))))
(decl iadd (Value Value) Inst)
(extern extractor iadd iadd)

;; CONSTRUCTORS
;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl value_reg (Reg) ValueRegs)
(extern constructor value_reg value_reg)

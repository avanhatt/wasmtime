use std::str::FromStr;

use veri_ir as ast;
use ast::annotation_ir::*;

// DO NOT FORGET TO CHANGE THE EXTENSION!!!

grammar;

UNum: usize = <s:r"[0-9]+">  => usize::from_str(s).unwrap();
Num: i128 = <s:r"-?[0-9]+i">  => i128::from_str(&s[..s.len() - 1]).unwrap();

Ident: String = {
    <s:r"[A-Za-z]"> => s.to_string(),
    <s:r"[A-Zac-z][\.\w]+"> => s.to_string(),
    <s:r"b[\w&&[^v]][\.\w]*"> => s.to_string(),
};

pub Type: Type = {
    "bv" => Type::BitVector,
    "bv" <n:UNum> => Type::BitVectorWithWidth(n),
    "Int" => Type::Int,
    "bool" => Type::Bool,
};

pub BoundVar: BoundVar = {
    <i:Ident> => BoundVar{name: i, ty: None},
    <i:Ident> ":" <t:Type> => BoundVar{name: i, ty: Some(t)},
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

ArgList = Comma<BoundVar>;
Args: Vec<BoundVar> = {
    "(args" <a:ArgList> ")" => a,
};

TypeList = Comma<Type>;

ExprList = Comma<Expr>;

Pair: (Expr, Expr) = {
   "(" <c:Expr> <b:Expr> ")" => (*c, *b)
}

pub TermSignature: TermSignature = {
    "(" "sig" <a:Args> "(" <r:BoundVar> ")" ")" => 
        TermSignature{args: a, ret: r},
};

pub FunctionType: FunctionType = {
    "func" "(" <a:TypeList> ")" "(" <r:Type> ")" =>
        FunctionType{args: a, ret: Box::new(r)},
};

pub Const: Const = {
    <v:Num> <n:UNum> ":" <t:Type> => Const{ty: t, value: v, width: n},
};

pub Function: Function = {
    <n:Ident> "(" <a:ArgList> ")" "(" <t:Type> ")" "{" <b:Expr> "}" =>
        Function{name: n, ty: t, args: a, body: b},
};

pub FunctionApplication: FunctionApplication = {
    <f:Expr> "(" <x:ExprList> ")" => FunctionApplication{func: f, args: x},
};

pub Width: Box<Width> = {
    "(" "regwidth" ")" => Box::new(Width::RegWidth),
    "(" <n:UNum> ")" => Box::new(Width::Const(n)),
}

pub Expr: Box<Expr> = {
    "(" <n:Ident> ")" => Box::new(Expr::Var(n, 0)), 
    "(" <c:Const> ")" => Box::new(Expr::Const(c, 0)),
    "(" "true" ")" => Box::new(Expr::True(0)),
    "(" "false" ")" => Box::new(Expr::False(0)),

    "(" "!" <u:Expr> ")" => Box::new(Expr::Not(u, 0)),
    "(" "&&" <u:Expr> <v:Expr> ")" => Box::new(Expr::And(u, v, 0)),
    "(" "||" <u:Expr> <v:Expr> ")" => Box::new(Expr::Or(u, v, 0)),
    "(" "=>" <u:Expr> <v:Expr> ")" => Box::new(Expr::Imp(u, v, 0)),
    "(" "=" <u:Expr> <v:Expr> ")" => Box::new(Expr::Eq(u, v, 0)),
    "(" "<=" <u:Expr> <v:Expr> ")" => Box::new(Expr::Lte(u, v, 0)),
    "(" "<" <u:Expr> <v:Expr> ")" => Box::new(Expr::Lt(u, v, 0)),

    "(" "sgt" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSgt(u, v, 0)),
    "(" "sgte" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSgte(u, v, 0)),
    "(" "slt" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSlt(u, v, 0)),
    "(" "slte" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSlte(u, v, 0)),
    "(" "ugt" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUgt(u, v, 0)),
    "(" "ugte" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUgte(u, v, 0)),
    "(" "ult" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUlt(u, v, 0)),
    "(" "ulte" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUlte(u, v, 0)),

    "(" "-" <u:Expr> ")" => Box::new(Expr::BVNeg(u, 0)),
    "(" "~" <u:Expr> ")" => Box::new(Expr::BVNot(u, 0)),
    "(" "clz" <u:Expr> ")" => Box::new(Expr::CLZ(u, 0)),
    "(" "a64clz" <ty:Expr> <u:Expr> ")" => Box::new(Expr::A64CLZ(ty, u, 0)),
    "(" "cls" <u:Expr> ")" => Box::new(Expr::CLS(u, 0)),
    "(" "a64cls" <ty:Expr> <u:Expr> ")" => Box::new(Expr::A64CLS(ty, u, 0)),
    "(" "rev" <u:Expr> ")" => Box::new(Expr::Rev(u, 0)),
    "(" "a64rev" <ty:Expr> <u:Expr> ")" => Box::new(Expr::A64Rev(ty, u, 0)),

    "(" "subs" <ty:Expr> <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSubs(ty, u, v, 0)),
    "(" "popcnt" <x:Expr> ")" => Box::new(Expr::BVPopcnt(x, 0)),

    "(" "*" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVMul(u, v, 0)),
    "(" "/" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUDiv(u, v, 0)),
    "(" "sdiv" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSDiv(u, v, 0)),
    "(" "+" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVAdd(u, v, 0)),
    "(" "-" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSub(u, v, 0)),
    "(" "urem" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVUrem(u, v, 0)),
    "(" "srem" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVSrem(u, v, 0)),
    "(" "&" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVAnd(u, v, 0)),
    "(" "|" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVOr(u, v, 0)),
    "(" "xor" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVXor(u, v, 0)),
    "(" "rotl" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVRotl(u, v, 0)),
    "(" "rotr" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVRotr(u, v, 0)),
    "(" "shl" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVShl(u, v, 0)),
    "(" "shr" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVShr(u, v, 0)),
    "(" "ashr" <u:Expr> <v:Expr> ")" => Box::new(Expr::BVAShr(u, v, 0)),

    "(" "zero_ext" <n:Width> <v:Expr> ")" => Box::new(Expr::BVZeroExtTo(n, v, 0)),
    "(" "zero_ext" <n:Expr> <v:Expr> ")" => Box::new(Expr::BVZeroExtToVarWidth(n, v, 0)),
    "(" "sign_ext" <n:Width> <v:Expr> ")" => Box::new(Expr::BVSignExtTo(n, v, 0)),
    "(" "sign_ext" <n:Expr> <v:Expr> ")" => Box::new(Expr::BVSignExtToVarWidth(n, v, 0)),
    "(" "extract" <s:UNum> <t:UNum> <v:Expr> ")" => 
        Box::new(Expr::BVExtract(s, t, v, 0)),
    "(" "concat" <s:UNum> <xs:Expr+> ")" => Box::new(Expr::BVConcat(Some(s), xs.iter().map(|x| *x.clone()).collect(), 0)),
    "(" "concat" <xs:Expr+> ")" => Box::new(Expr::BVConcat(None, xs.iter().map(|x| *x.clone()).collect(), 0)),
    "(" "conv_to" <n:Width> <v:Expr> ")" => Box::new(Expr::BVConvTo(n, v, 0)),
    "(" "conv_to" <n:Expr> <v:Expr> ")" => 
        Box::new(Expr::BVConvToVarWidth(n, v, 0)),

    "(" "if" <c:Expr> <e1:Expr> <e2:Expr> ")" =>
        Box::new(Expr::Conditional(c, e1, e2, 0)),

    "(" "switch" <c:Expr> <l:Pair+> ")" => Box::new(Expr::Switch(c, l, 0)),

    "(" "int2bv" <n:UNum> <v:Expr> ")" => Box::new(Expr::BVIntToBv(n, v, 0)),
    "(" "bv2int" <v:Expr> ")" => Box::new(Expr::BVToInt(v, 0)),
    "(" "widthof" <v:Expr> ")" => Box::new(Expr::WidthOf(v, 0)),
    "(" "mem" <k:UNum> <f:Expr> <a:Expr> <w:Expr> ")" => Box::new(Expr::Mem(k, f, a, w, 0)),
};

pub TermAnnotation: TermAnnotation = {
    "(" "spec" <s:TermSignature> "(" "provide" <a:ExprList> ")" "(" "require" <b:ExprList> ")" ")" =>
        TermAnnotation {sig: s, assumptions: a, assertions: b },
    "(" "spec" <s:TermSignature> "(" "provide" <a:ExprList> ")" ")" =>
        TermAnnotation {sig: s, assumptions: a, assertions: vec![] },
};

use std::str::FromStr;

use veri_ir as ast;
use ast::*;

// DO NOT FORGET TO CHANGE THE EXTENSION!!!

grammar;

Num: usize = <s:r"[0-9]+">  => usize::from_str(s).unwrap();

pub VIRType: VIRType = {
    // TODO: support bvX instead of only numbers
    "bv" <n:Num> => VIRType::BitVector(n),
    "bool" => VIRType::Bool,
};

pub BoundVar: BoundVar = {
    <s:r"[A-Za-z]|[A-zac-z]\w+|b[A-Za-uw-z0-9]\w*"> ":" <t:VIRType> => 
        BoundVar{name: s.to_string(), ty: t},
};

//Arg: BoundVar = "(" <v:BoundVar> ")" => v;

ArgList: Vec<BoundVar> = {
    "(args" <vs:BoundVar+> ")" => vs,
    "(" "args" ")" => Vec::new(),
};

pub FunctionAnnotation: FunctionAnnotation = {
    "(sig" <a:ArgList> "(" <r:BoundVar> ")" ")" => 
        FunctionAnnotation {args: a, result: r},
};

// TODO: assertion, assertion list

//pub VIRAnnotation: VIRAnnotation = {
//    "(spec" <f:FunctionAnnotation> <a:AssertionList> ")" =>
//        VIRAnnotation {func: f, assertions: a},
//};

;;@ (spec (sig (args arg) (ret))
;;@     (assertions (= (arg) (ret))))
(decl lower (Inst) ValueRegs)

;;@ (spec (sig (args ty, arg) (ret))
;;@     (assertions (= (ty) (tywidth)), (= (arg) (ret))))
(decl has_type (Type Inst) Inst)

;;@ (spec (sig (args arg) (ret))
;;@     (assertions (<= (arg) (64i128: isleType)), (= (arg) (ret))))
(decl fits_in_64 (Type) Type)

;;@ (spec (sig (args x, y) (ret))
;;@       (assertions (= (+ (x) (y)) (ret))))
(decl iadd (Value Value) Inst)

;;@ (spec (sig (args ty, a, b) (r))
;;@     (assertions (= (+ (a) (b)) (r))))
(decl add (Type Reg Reg) Reg)

(rule (lower (has_type (fits_in_64 ty) (iadd x y)))
      (add ty x y))